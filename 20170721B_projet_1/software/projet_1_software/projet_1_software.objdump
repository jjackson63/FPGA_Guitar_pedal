
projet_1_software.elf:     file format elf32-littlenios2
projet_1_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080230

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000111e4 memsz 0x000111e4 flags r-x
    LOAD off    0x00012204 vaddr 0x00091204 paddr 0x00092d58 align 2**12
         filesz 0x00001b54 memsz 0x00001b54 flags rw-
    LOAD off    0x000148ac vaddr 0x000948ac paddr 0x000948ac align 2**12
         filesz 0x00000000 memsz 0x00010178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010bb0  00080230  00080230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000424  00090de0  00090de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  00091204  00092d58  00012204  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00010178  000948ac  000948ac  000148ac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000a4a24  000a4a24  00013d58  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013d58  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ed0  00000000  00000000  00013d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024afc  00000000  00000000  00014c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009242  00000000  00000000  0003974c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b806  00000000  00000000  0004298e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026a4  00000000  00000000  0004e194  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003db6  00000000  00000000  00050838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016a7c  00000000  00000000  000545ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0006b06c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001808  00000000  00000000  0006b080  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007035c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007035f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007036b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007036c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007036d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00070371  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00070375  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00070379  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00070384  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0007038f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0007039a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  000703a0  2**0
                  CONTENTS, READONLY
 29 .jdi          0000408f  00000000  00000000  000703ca  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00052294  00000000  00000000  00074459  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080230 l    d  .text	00000000 .text
00090de0 l    d  .rodata	00000000 .rodata
00091204 l    d  .rwdata	00000000 .rwdata
000948ac l    d  .bss	00000000 .bss
000a4a24 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../projet_1_software_bsp//obj/HAL/src/crt0.o
00080268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00090ec9 l     O .rodata	00000010 SSEG_HEX_TABLE.2549
00000000 l    df *ABS*	00000000 lib2-divmod.c
00080fd0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00090f22 l     O .rodata	00000010 zeroes.4255
00083334 l     F .text	000000bc __sbprintf
00090f32 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083544 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00085128 l     F .text	00000008 __fp_lock
00085130 l     F .text	00000008 __fp_unlock
00085144 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00091204 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00091648 l     O .rwdata	00000020 lc_ctype_charset
00091628 l     O .rwdata	00000020 lc_message_charset
00091668 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00090f64 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0008868c l     F .text	000000fc __sprint_r.part.0
00091088 l     O .rodata	00000010 zeroes.4200
00091098 l     O .rodata	00000010 blanks.4199
00089ab4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008d8fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008da24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008da50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008db58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008dc54 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008dd38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008df1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00092d48 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008e1a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008e2f0 l     F .text	00000038 alt_dev_reg
00091c50 l     O .rwdata	00001060 jtag_uart_0
00092cb0 l     O .rwdata	00000030 audio_config
00092ce0 l     O .rwdata	00000030 audio_codec
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008e5d8 l     F .text	00000208 altera_avalon_jtag_uart_irq
0008e7e0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008fdf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00090050 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00090358 l     F .text	00000050 alt_get_errno
000903a8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000948f8 g     O .bss	00000004 alt_instruction_exception_handler
0008f6dc g     F .text	00000038 alt_up_av_config_reset
00087d04 g     F .text	00000074 _mprec_log10
0008fb3c g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
00087df0 g     F .text	0000008c __any_on
0008a034 g     F .text	00000054 _isatty_r
00090f70 g     O .rodata	00000028 __mprec_tinytens
0008f74c g     F .text	00000034 alt_up_av_config_disable_interrupt
0008de64 g     F .text	00000078 alt_main
00081164 g     F .text	000000a8 _puts_r
000a4924 g     O .bss	00000100 alt_irq
0008a088 g     F .text	0000005c _lseek_r
00092d58 g       *ABS*	00000000 __flash_rwdata_start
0008c31c g     F .text	00000084 .hidden __eqdf2
0008f098 g     F .text	00000060 alt_up_audio_read_fifo_avail
000a4a24 g       *ABS*	00000000 __alt_heap_start
0008f810 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
000a44fc g     O .bss	00000100 octave_outputbuffer
00081128 g     F .text	0000003c printf
0008f0f8 g     F .text	00000068 alt_up_audio_record_r
0008a294 g     F .text	0000009c _wcrtomb_r
00088584 g     F .text	0000005c __sseek
00085488 g     F .text	00000010 __sinit
0008a140 g     F .text	00000138 __swbuf_r
00085f40 g     F .text	0000007c _setlocale_r
000852e0 g     F .text	00000078 __sfmoreglue
0008defc g     F .text	00000020 __malloc_unlock
0008f008 g     F .text	00000090 alt_up_audio_reset_audio_core
000802c0 g     F .text	0000007c sseg_disp_4_digit
00086ba0 g     F .text	0000015c memmove
000948b0 g     O .bss	00000004 octave_reading_index1
00085470 g     F .text	00000018 _cleanup
00086e20 g     F .text	000000a8 _Balloc
0008c3a0 g     F .text	000000e0 .hidden __gtdf2
00090798 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00080f2c g     F .text	000000a4 state_select
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00089fdc g     F .text	00000058 _fstat_r
000948dc g     O .bss	00000004 errno
0008088c g     F .text	00000140 audio_distortion
00088500 g     F .text	00000008 __seofread
000805a8 g     F .text	0000015c audio_init
0008efc8 g     F .text	00000040 alt_up_audio_write_interrupt_pending
000948e4 g     O .bss	00000004 alt_argv
0009ad10 g       *ABS*	00000000 _gp
00091ad0 g     O .rwdata	00000180 alt_fd_list
0008ffa4 g     F .text	00000090 alt_find_dev
00086a68 g     F .text	00000138 memcpy
00085138 g     F .text	0000000c _cleanup_r
0008d724 g     F .text	000000d0 .hidden __floatsidf
00090130 g     F .text	00000078 alt_io_redirect
0008c480 g     F .text	000000e0 .hidden __ltdf2
00090de0 g       *ABS*	00000000 __DTOR_END__
0008120c g     F .text	00000014 puts
000909a0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000883e4 g     F .text	00000074 __fpclassifyd
00087c60 g     F .text	000000a4 __ratio
00089a90 g     F .text	00000024 __vfiprintf_internal
00080490 g     F .text	00000090 display_pause
0008f4e0 g     F .text	00000050 alt_up_audio_read_fifo_head
0008e9dc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000810fc g     F .text	0000002c _printf_r
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000810ec g     F .text	00000008 .hidden __udivsi3
0008dba8 g     F .text	000000ac isatty
00092d14 g     O .rwdata	00000004 octave_reading_index2
00090fc0 g     O .rodata	000000c8 __mprec_tens
00085fbc g     F .text	0000000c __locale_charset
000948d8 g     O .bss	00000004 __malloc_top_pad
0008f65c g     F .text	00000080 alt_up_av_config_read_data
000a43fc g     O .bss	00000100 octave_buffer2
00092d20 g     O .rwdata	00000004 __mb_cur_max
00085fec g     F .text	0000000c _localeconv_r
00087254 g     F .text	0000003c __i2b
000858ec g     F .text	000004cc __sfvwrite_r
000948bc g     O .bss	00000004 audio_dev
00088458 g     F .text	00000054 _sbrk_r
0008a0e4 g     F .text	0000005c _read_r
00092d40 g     O .rwdata	00000004 alt_max_fd
0008f530 g     F .text	00000064 alt_up_audio_write_fifo_head
00089cf8 g     F .text	000000f0 _fclose_r
000850f8 g     F .text	00000030 fflush
000948d4 g     O .bss	00000004 __malloc_max_sbrked_mem
000901a8 g     F .text	000001b0 alt_irq_register
0008b100 g     F .text	0000089c .hidden __adddf3
00087a08 g     F .text	0000011c __b2d
0008aabc g     F .text	0000061c .hidden __umoddi3
0008dd88 g     F .text	000000dc lseek
00092d18 g     O .rwdata	00000004 _global_impure_ptr
00087e7c g     F .text	00000568 _realloc_r
000a4a24 g       *ABS*	00000000 __bss_end
00090694 g     F .text	00000104 alt_tick
000948fc g     O .bss	0000fa00 delay_audio_buffer
0008a47c g     F .text	00000640 .hidden __udivdi3
00089dfc g     F .text	00000184 _fputwc_r
00090f98 g     O .rodata	00000028 __mprec_bigtens
00087038 g     F .text	00000104 __s2b
0008d7f4 g     F .text	000000a4 .hidden __floatunsidf
000877b0 g     F .text	00000060 __mcmp
0008ee00 g     F .text	00000040 alt_up_audio_open_dev
000854a8 g     F .text	00000018 __fp_lock_all
000948b8 g     O .bss	00000004 state
0008f228 g     F .text	00000068 alt_up_audio_play_r
000905fc g     F .text	00000098 alt_alarm_stop
000948ec g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d4 alt_irq_handler
00091aa8 g     O .rwdata	00000028 alt_dev_null
0008fddc g     F .text	0000001c alt_dcache_flush_all
0008713c g     F .text	00000068 __hi0bits
0008d69c g     F .text	00000088 .hidden __fixdfsi
00092d58 g       *ABS*	00000000 __ram_rwdata_end
00092d38 g     O .rwdata	00000008 alt_dev_list
0008e1f0 g     F .text	00000100 write
00091204 g       *ABS*	00000000 __ram_rodata_end
0008daa0 g     F .text	000000b8 fstat
0008c480 g     F .text	000000e0 .hidden __ledf2
00087520 g     F .text	00000140 __pow5mult
000887a0 g     F .text	000012f0 ___vfiprintf_internal_r
000948cc g     O .bss	00000004 __nlocale_changed
000810f4 g     F .text	00000008 .hidden __umodsi3
00080520 g     F .text	00000088 display_all_off
000a4a24 g       *ABS*	00000000 end
000a4624 g     O .bss	00000100 r_buf
0008e520 g     F .text	000000b8 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00090de0 g       *ABS*	00000000 __CTOR_LIST__
000c93e0 g       *ABS*	00000000 __alt_stack_pointer
000948c0 g     O .bss	00000004 av_config_dev
0008d898 g     F .text	00000064 .hidden __clzsi2
0008ebe8 g     F .text	00000218 altera_avalon_jtag_uart_write
00085498 g     F .text	00000004 __sfp_lock_acquire
00086980 g     F .text	000000e8 memchr
000812b8 g     F .text	00002058 ___vfprintf_internal_r
000a4724 g     O .bss	00000100 outgoing_buffer
000855fc g     F .text	000002f0 _free_r
00085fc8 g     F .text	00000010 __locale_mb_cur_max
00090c18 g     F .text	00000194 __call_exitprocs
000948c8 g     O .bss	00000004 __mlocale_changed
00092d24 g     O .rwdata	00000004 __malloc_sbrk_base
00080230 g     F .text	0000003c _start
000948f0 g     O .bss	00000004 _alt_tick_rate
00080704 g     F .text	00000188 audio_no_effect
0008f3d8 g     F .text	00000108 alt_up_audio_write_fifo
00087660 g     F .text	00000150 __lshift
0008f5f8 g     F .text	00000064 alt_up_av_config_write_data
000948f4 g     O .bss	00000004 _alt_nticks
0008df6c g     F .text	00000104 read
0008e35c g     F .text	00000060 alt_sys_init
0008f2f8 g     F .text	000000e0 alt_up_audio_read_fifo
00090b04 g     F .text	00000114 __register_exitproc
0008fc44 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
0008ef34 g     F .text	00000054 alt_up_audio_disable_write_interrupt
00092d10 g     O .rwdata	00000004 reading_audio_index
00087290 g     F .text	00000290 __multiply
0008e888 g     F .text	00000068 altera_avalon_jtag_uart_close
0008b0d8 g     F .text	00000028 .hidden __mulsi3
00091204 g       *ABS*	00000000 __ram_rwdata_start
00090de0 g       *ABS*	00000000 __ram_rodata_start
000a45fc g     O .bss	00000028 __malloc_current_mallinfo
00087b24 g     F .text	0000013c __d2b
0008e3bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000908cc g     F .text	000000d4 alt_get_fd
00089bcc g     F .text	00000054 _close_r
0008eee4 g     F .text	00000050 alt_up_audio_enable_write_interrupt
00090a88 g     F .text	0000007c memcmp
0008e47c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000a4a24 g       *ABS*	00000000 __alt_stack_base
0008e4cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000833f0 g     F .text	00000154 __swsetup_r
0008033c g     F .text	00000154 display_int_to_sseg
00080c04 g     F .text	000002a0 audio_octave
0008b99c g     F .text	00000980 .hidden __divdf3
0008ee90 g     F .text	00000054 alt_up_audio_disable_read_interrupt
00085358 g     F .text	00000118 __sfp
00087d78 g     F .text	00000078 __copybits
000916a0 g     O .rwdata	00000408 __malloc_av_
000854a4 g     F .text	00000004 __sinit_lock_release
0008c560 g     F .text	0000086c .hidden __muldf3
000884ac g     F .text	00000054 __sread
000907b8 g     F .text	00000114 alt_find_file
0008fe48 g     F .text	000000a4 alt_dev_llist_insert
0008dedc g     F .text	00000020 __malloc_lock
0008e0f0 g     F .text	000000b0 sbrk
0008509c g     F .text	0000005c _fflush_r
00089c20 g     F .text	000000d8 _calloc_r
000948ac g       *ABS*	00000000 __bss_start
00086cfc g     F .text	00000124 memset
00080ea4 g     F .text	00000088 main
0008f1c8 g     F .text	00000060 alt_up_audio_write_fifo_space
000948e8 g     O .bss	00000004 alt_envp
000948d0 g     O .bss	00000004 __malloc_max_total_mem
0008e41c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008a278 g     F .text	0000001c __swbuf
000885e0 g     F .text	00000008 __sclose
000c93e0 g       *ABS*	00000000 __alt_heap_limit
00089de8 g     F .text	00000014 fclose
0008376c g     F .text	00001728 _dtoa_r
000861d8 g     F .text	000007a8 _malloc_r
0008a3f0 g     F .text	00000030 __ascii_wctomb
00092d44 g     O .rwdata	00000004 alt_errno
00085db8 g     F .text	000000c4 _fwalk
0008103c g     F .text	00000054 .hidden __divsi3
000809cc g     F .text	00000238 audio_delay
000854d8 g     F .text	00000124 _malloc_trim_r
00090de0 g       *ABS*	00000000 __CTOR_END__
000885e8 g     F .text	000000a4 strcmp
00090de0 g       *ABS*	00000000 __flash_rodata_start
000948b4 g     O .bss	00000004 octave_storing_index
00090de0 g       *ABS*	00000000 __DTOR_LIST__
0008c31c g     F .text	00000084 .hidden __nedf2
0008f594 g     F .text	00000064 alt_up_av_config_open_dev
0008e328 g     F .text	00000034 alt_irq_init
0008e070 g     F .text	00000080 alt_release_fd
000910a8 g     O .rodata	00000100 .hidden __clz_tab
000948c4 g     O .bss	00000004 _PathLocale
00090a3c g     F .text	00000014 atexit
00089b70 g     F .text	0000005c _write_r
0008f7d8 g     F .text	00000038 alt_up_av_config_read_ready
00085ff8 g     F .text	0000001c setlocale
00092d1c g     O .rwdata	00000004 _impure_ptr
000948e0 g     O .bss	00000004 alt_argc
00084e94 g     F .text	00000208 __sflush_r
0008ff48 g     F .text	0000005c _do_dtors
00085fe4 g     F .text	00000008 __locale_cjk_lang
0008026c g     F .text	00000054 sseg_conv_hex
000948ac g     O .bss	00000004 storing_audio_index
00080020 g       .exceptions	00000000 alt_irq_entry
000879a8 g     F .text	00000060 __ulp
000854c0 g     F .text	00000018 __fp_unlock_all
00092d30 g     O .rwdata	00000008 alt_fs_list
0008f160 g     F .text	00000068 alt_up_audio_record_l
00080020 g       *ABS*	00000000 __ram_exceptions_start
00086014 g     F .text	0000000c localeconv
0008f714 g     F .text	00000038 alt_up_av_config_enable_interrupt
0008f780 g     F .text	00000058 alt_up_av_config_read_acknowledge
0008fae4 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
00092d58 g       *ABS*	00000000 _edata
000a4a24 g       *ABS*	00000000 _end
00080230 g       *ABS*	00000000 __ram_exceptions_end
0008e8f0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000a4824 g     O .bss	00000100 l_buf
0008f290 g     F .text	00000068 alt_up_audio_play_l
00088508 g     F .text	0000007c __swrite
00092d28 g     O .rwdata	00000004 __malloc_trim_threshold
00085fd8 g     F .text	0000000c __locale_msgcharset
00090a50 g     F .text	00000038 exit
00085e7c g     F .text	000000c4 _fwalk_reent
00087810 g     F .text	00000198 __mdiff
0008fbec g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
00081090 g     F .text	0000005c .hidden __modsi3
000c93e0 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
0008549c g     F .text	00000004 __sfp_lock_release
000a42fc g     O .bss	00000100 octave_buffer1
00090dac g     F .text	00000034 _exit
0008fc9c g     F .text	00000140 alt_alarm_start
00086020 g     F .text	000001b8 __smakebuf_r
00081220 g     F .text	00000098 strlen
0009049c g     F .text	00000160 open
0008c3a0 g     F .text	000000e0 .hidden __gedf2
0008f8b4 g     F .text	000000ec alt_up_av_config_read_video_cfg_register
00092d2c g     O .rwdata	00000004 __wctomb
00088788 g     F .text	00000018 __sprint_r
00090034 g     F .text	0000001c alt_icache_flush_all
00092d4c g     O .rwdata	00000004 alt_priority_mask
00083310 g     F .text	00000024 __vfprintf_internal
0008fb94 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
0008a420 g     F .text	0000005c _wctomb_r
0008cdcc g     F .text	000008d0 .hidden __subdf3
000871a4 g     F .text	000000b0 __lo0bits
00092d50 g     O .rwdata	00000008 alt_alarm_list
0008feec g     F .text	0000005c _do_ctors
0008a330 g     F .text	000000c0 wcrtomb
0008d94c g     F .text	000000d8 close
0008dcb8 g     F .text	00000080 alt_load
0008ee40 g     F .text	00000050 alt_up_audio_enable_read_interrupt
0008f9a0 g     F .text	000000ec alt_up_av_config_write_video_cfg_register
00089f80 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
000854a0 g     F .text	00000004 __sinit_lock_acquire
00086ef0 g     F .text	00000148 __multadd
00086ec8 g     F .text	00000028 _Bfree
0008fa8c g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
0008ef88 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408c14 	ori	at,at,560
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001526 	beq	r2,zero,80190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   8013c:	008002b4 	movhi	r2,10
   80140:	10924904 	addi	r2,r2,18724
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	008002b4 	movhi	r2,10
   80158:	10924904 	addi	r2,r2,18724
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	21000104 	addi	r4,r4,4
   80168:	1105883a 	add	r2,r2,r4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	e17ffd17 	ldw	r5,-12(fp)
   80178:	183ee83a 	callr	r3
#endif
        break;
   8017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80180:	0005313a 	rdctl	r2,ipending
   80184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80188:	e0bfff17 	ldw	r2,-4(fp)
   8018c:	00000706 	br	801ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   80190:	e0bffc17 	ldw	r2,-16(fp)
   80194:	1085883a 	add	r2,r2,r2
   80198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   8019c:	e0bffd17 	ldw	r2,-12(fp)
   801a0:	10800044 	addi	r2,r2,1
   801a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a8:	003fe006 	br	8012c <__alt_data_end+0xfffb6d4c>

    active = alt_irq_pending ();
   801ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801b0:	e0bffb17 	ldw	r2,-20(fp)
   801b4:	103fda1e 	bne	r2,zero,80120 <__alt_data_end+0xfffb6d40>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b8:	0001883a 	nop
}
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801e4:	00bfffc4 	movi	r2,-1
   801e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801f0:	d0a6fa17 	ldw	r2,-25624(gp)
   801f4:	10000726 	beq	r2,zero,80214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801f8:	d0a6fa17 	ldw	r2,-25624(gp)
   801fc:	e0fffd17 	ldw	r3,-12(fp)
   80200:	1809883a 	mov	r4,r3
   80204:	e17fff17 	ldw	r5,-4(fp)
   80208:	e1bffe17 	ldw	r6,-8(fp)
   8020c:	103ee83a 	callr	r2
   80210:	00000206 	br	8021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80218:	0005883a 	mov	r2,zero
}
   8021c:	e037883a 	mov	sp,fp
   80220:	dfc00117 	ldw	ra,4(sp)
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00204 	addi	sp,sp,8
   8022c:	f800283a 	ret

Disassembly of section .text:

00080230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80230:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80234:	dee4f814 	ori	sp,sp,37856
    movhi gp, %hi(_gp)
   80238:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   8023c:	d6ab4414 	ori	gp,gp,44304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80240:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80244:	10922b14 	ori	r2,r2,18604

    movhi r3, %hi(__bss_end)
   80248:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   8024c:	18d28914 	ori	r3,r3,18980

    beq r2, r3, 1f
   80250:	10c00326 	beq	r2,r3,80260 <_start+0x30>

0:
    stw zero, (r2)
   80254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8025c:	10fffd36 	bltu	r2,r3,80254 <__alt_data_end+0xfffb6e74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80260:	008dcb80 	call	8dcb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80264:	008de640 	call	8de64 <alt_main>

00080268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80268:	003fff06 	br	80268 <__alt_data_end+0xfffb6e88>

0008026c <sseg_conv_hex>:
	sseg_disp_4_digit(SSEG_1_4_BASE, message); //equivalent message[0]
*/


alt_u8 sseg_conv_hex(int hex)
{
   8026c:	defffd04 	addi	sp,sp,-12
   80270:	df000215 	stw	fp,8(sp)
   80274:	df000204 	addi	fp,sp,8
   80278:	e13fff15 	stw	r4,-4(fp)
			0x40, 0x79, 0x24, 0x30, 0x19, 0x92, 0x02, 0x78, 0x00, 0x10, // 0-9
			0x88, 0x03, 0x46, 0x21, 0x06, 0x0E};						// a-f

	alt_u8 pattern;

	if (hex < 16) {
   8027c:	e0bfff17 	ldw	r2,-4(fp)
   80280:	10800408 	cmpgei	r2,r2,16
   80284:	1000071e 	bne	r2,zero,802a4 <sseg_conv_hex+0x38>
		pattern = SSEG_HEX_TABLE[hex];
   80288:	00800274 	movhi	r2,9
   8028c:	1083b244 	addi	r2,r2,3785
   80290:	e0ffff17 	ldw	r3,-4(fp)
   80294:	10c5883a 	add	r2,r2,r3
   80298:	10800003 	ldbu	r2,0(r2)
   8029c:	e0bffe05 	stb	r2,-8(fp)
   802a0:	00000206 	br	802ac <sseg_conv_hex+0x40>
	} else {
		pattern = 0xff; //tous eteint
   802a4:	00bfffc4 	movi	r2,-1
   802a8:	e0bffe05 	stb	r2,-8(fp)
	}
	return (pattern);
   802ac:	e0bffe03 	ldbu	r2,-8(fp)
}
   802b0:	e037883a 	mov	sp,fp
   802b4:	df000017 	ldw	fp,0(sp)
   802b8:	dec00104 	addi	sp,sp,4
   802bc:	f800283a 	ret

000802c0 <sseg_disp_4_digit>:


void sseg_disp_4_digit(alt_u32 base, alt_u8 *digit)
{
   802c0:	defffb04 	addi	sp,sp,-20
   802c4:	df000415 	stw	fp,16(sp)
   802c8:	df000404 	addi	fp,sp,16
   802cc:	e13ffe15 	stw	r4,-8(fp)
   802d0:	e17fff15 	stw	r5,-4(fp)
	/* digit est l'adresse d'un tableau de 4 alt_u8 */

	alt_u32 sseg_data = 0;
   802d4:	e03ffc15 	stw	zero,-16(fp)
	int i;

	/* assemblage de 4 donnees par OR et decalage pour former un 32 bit */
	for(i = 0; i < 4; i++){
   802d8:	e03ffd15 	stw	zero,-12(fp)
   802dc:	00000d06 	br	80314 <sseg_disp_4_digit+0x54>
		sseg_data = (sseg_data << 8) | *digit;
   802e0:	e0bffc17 	ldw	r2,-16(fp)
   802e4:	1006923a 	slli	r3,r2,8
   802e8:	e0bfff17 	ldw	r2,-4(fp)
   802ec:	10800003 	ldbu	r2,0(r2)
   802f0:	10803fcc 	andi	r2,r2,255
   802f4:	1884b03a 	or	r2,r3,r2
   802f8:	e0bffc15 	stw	r2,-16(fp)
		digit++;
   802fc:	e0bfff17 	ldw	r2,-4(fp)
   80300:	10800044 	addi	r2,r2,1
   80304:	e0bfff15 	stw	r2,-4(fp)

	alt_u32 sseg_data = 0;
	int i;

	/* assemblage de 4 donnees par OR et decalage pour former un 32 bit */
	for(i = 0; i < 4; i++){
   80308:	e0bffd17 	ldw	r2,-12(fp)
   8030c:	10800044 	addi	r2,r2,1
   80310:	e0bffd15 	stw	r2,-12(fp)
   80314:	e0bffd17 	ldw	r2,-12(fp)
   80318:	10800110 	cmplti	r2,r2,4
   8031c:	103ff01e 	bne	r2,zero,802e0 <__alt_data_end+0xfffb6f00>
		sseg_data = (sseg_data << 8) | *digit;
		digit++;
	}
	pio_write(base,sseg_data);
   80320:	e0bffe17 	ldw	r2,-8(fp)
   80324:	e0fffc17 	ldw	r3,-16(fp)
   80328:	10c00035 	stwio	r3,0(r2)
}
   8032c:	e037883a 	mov	sp,fp
   80330:	df000017 	ldw	fp,0(sp)
   80334:	dec00104 	addi	sp,sp,4
   80338:	f800283a 	ret

0008033c <display_int_to_sseg>:

void display_int_to_sseg(int number)
{
   8033c:	defffa04 	addi	sp,sp,-24
   80340:	dfc00515 	stw	ra,20(sp)
   80344:	df000415 	stw	fp,16(sp)
   80348:	df000404 	addi	fp,sp,16
   8034c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 message[4];


	//Pour Display sur le hex3.
	int i = 0;
   80350:	e03ffc15 	stw	zero,-16(fp)
	while(number >= 1000)
   80354:	00000606 	br	80370 <display_int_to_sseg+0x34>
	{
		i++;
   80358:	e0bffc17 	ldw	r2,-16(fp)
   8035c:	10800044 	addi	r2,r2,1
   80360:	e0bffc15 	stw	r2,-16(fp)
		number -= 1000;
   80364:	e0bfff17 	ldw	r2,-4(fp)
   80368:	10bf0604 	addi	r2,r2,-1000
   8036c:	e0bfff15 	stw	r2,-4(fp)
	alt_u8 message[4];


	//Pour Display sur le hex3.
	int i = 0;
	while(number >= 1000)
   80370:	e0bfff17 	ldw	r2,-4(fp)
   80374:	1080fa08 	cmpgei	r2,r2,1000
   80378:	103ff71e 	bne	r2,zero,80358 <__alt_data_end+0xfffb6f78>
		i++;
		number -= 1000;

	}
	//display i  on hex3.
	message[0] = sseg_conv_hex(i);
   8037c:	e13ffc17 	ldw	r4,-16(fp)
   80380:	008026c0 	call	8026c <sseg_conv_hex>
   80384:	e0bffd05 	stb	r2,-12(fp)
	i = 0;
   80388:	e03ffc15 	stw	zero,-16(fp)
	while(number >= 100)
   8038c:	00000606 	br	803a8 <display_int_to_sseg+0x6c>
	{
		i++;
   80390:	e0bffc17 	ldw	r2,-16(fp)
   80394:	10800044 	addi	r2,r2,1
   80398:	e0bffc15 	stw	r2,-16(fp)
		number -= 100;
   8039c:	e0bfff17 	ldw	r2,-4(fp)
   803a0:	10bfe704 	addi	r2,r2,-100
   803a4:	e0bfff15 	stw	r2,-4(fp)

	}
	//display i  on hex3.
	message[0] = sseg_conv_hex(i);
	i = 0;
	while(number >= 100)
   803a8:	e0bfff17 	ldw	r2,-4(fp)
   803ac:	10801908 	cmpgei	r2,r2,100
   803b0:	103ff71e 	bne	r2,zero,80390 <__alt_data_end+0xfffb6fb0>
	{
		i++;
		number -= 100;
	}
	//display i  on hex2.
	message[1] = sseg_conv_hex(i);
   803b4:	e13ffc17 	ldw	r4,-16(fp)
   803b8:	008026c0 	call	8026c <sseg_conv_hex>
   803bc:	e0bffd45 	stb	r2,-11(fp)
	i = 0;
   803c0:	e03ffc15 	stw	zero,-16(fp)
	while(number >= 10)
   803c4:	00000606 	br	803e0 <display_int_to_sseg+0xa4>
	{
		i++;
   803c8:	e0bffc17 	ldw	r2,-16(fp)
   803cc:	10800044 	addi	r2,r2,1
   803d0:	e0bffc15 	stw	r2,-16(fp)
		number -= 10;
   803d4:	e0bfff17 	ldw	r2,-4(fp)
   803d8:	10bffd84 	addi	r2,r2,-10
   803dc:	e0bfff15 	stw	r2,-4(fp)
		number -= 100;
	}
	//display i  on hex2.
	message[1] = sseg_conv_hex(i);
	i = 0;
	while(number >= 10)
   803e0:	e0bfff17 	ldw	r2,-4(fp)
   803e4:	10800288 	cmpgei	r2,r2,10
   803e8:	103ff71e 	bne	r2,zero,803c8 <__alt_data_end+0xfffb6fe8>
	{
		i++;
		number -= 10;
	}
	//display i  on hex1.
	message[2] = sseg_conv_hex(i);
   803ec:	e13ffc17 	ldw	r4,-16(fp)
   803f0:	008026c0 	call	8026c <sseg_conv_hex>
   803f4:	e0bffd85 	stb	r2,-10(fp)
	i = 0;
   803f8:	e03ffc15 	stw	zero,-16(fp)
	while(number >= 1)
   803fc:	00000606 	br	80418 <display_int_to_sseg+0xdc>
	{
		i++;
   80400:	e0bffc17 	ldw	r2,-16(fp)
   80404:	10800044 	addi	r2,r2,1
   80408:	e0bffc15 	stw	r2,-16(fp)
		number -= 1;
   8040c:	e0bfff17 	ldw	r2,-4(fp)
   80410:	10bfffc4 	addi	r2,r2,-1
   80414:	e0bfff15 	stw	r2,-4(fp)
		number -= 10;
	}
	//display i  on hex1.
	message[2] = sseg_conv_hex(i);
	i = 0;
	while(number >= 1)
   80418:	e0bfff17 	ldw	r2,-4(fp)
   8041c:	00bff816 	blt	zero,r2,80400 <__alt_data_end+0xfffb7020>
	{
		i++;
		number -= 1;
	}
	//display i  on hex0.
	message[3] = sseg_conv_hex(i);
   80420:	e13ffc17 	ldw	r4,-16(fp)
   80424:	008026c0 	call	8026c <sseg_conv_hex>
   80428:	e0bffdc5 	stb	r2,-9(fp)
	sseg_disp_4_digit(SSEG_I_IV_BASE, message); //equivalent message[0]
   8042c:	e0bffd04 	addi	r2,fp,-12
   80430:	01000434 	movhi	r4,16
   80434:	21040404 	addi	r4,r4,4112
   80438:	100b883a 	mov	r5,r2
   8043c:	00802c00 	call	802c0 <sseg_disp_4_digit>

	alt_u8 message1[4];

	message1[0] = sseg_conv_hex(0x01);//no hex here...
   80440:	01000044 	movi	r4,1
   80444:	008026c0 	call	8026c <sseg_conv_hex>
   80448:	e0bffe05 	stb	r2,-8(fp)
	message1[1] = sseg_conv_hex(0x02);//no hex here...
   8044c:	01000084 	movi	r4,2
   80450:	008026c0 	call	8026c <sseg_conv_hex>
   80454:	e0bffe45 	stb	r2,-7(fp)
	message1[2] = 0x40;//hex5 -> OFF
   80458:	00801004 	movi	r2,64
   8045c:	e0bffe85 	stb	r2,-6(fp)
	message1[3] = 0x40;//hex4 -> OFF
   80460:	00801004 	movi	r2,64
   80464:	e0bffec5 	stb	r2,-5(fp)
	sseg_disp_4_digit(SSEG_V_VI_BASE, message1); //equivalent message[0]
   80468:	e0bffe04 	addi	r2,fp,-8
   8046c:	01000434 	movhi	r4,16
   80470:	21040004 	addi	r4,r4,4096
   80474:	100b883a 	mov	r5,r2
   80478:	00802c00 	call	802c0 <sseg_disp_4_digit>

}
   8047c:	e037883a 	mov	sp,fp
   80480:	dfc00117 	ldw	ra,4(sp)
   80484:	df000017 	ldw	fp,0(sp)
   80488:	dec00204 	addi	sp,sp,8
   8048c:	f800283a 	ret

00080490 <display_pause>:

void display_pause(void)
{
   80490:	defffc04 	addi	sp,sp,-16
   80494:	dfc00315 	stw	ra,12(sp)
   80498:	df000215 	stw	fp,8(sp)
   8049c:	df000204 	addi	fp,sp,8
	alt_u8 message[4];

	message[0] = 0x41;//hex3 -> U
   804a0:	00801044 	movi	r2,65
   804a4:	e0bffe05 	stb	r2,-8(fp)
	message[1] = 0x12;//hex2 -> S
   804a8:	00800484 	movi	r2,18
   804ac:	e0bffe45 	stb	r2,-7(fp)
	message[2] = 0x06;//hex1 -> E
   804b0:	00800184 	movi	r2,6
   804b4:	e0bffe85 	stb	r2,-6(fp)
	message[3] = 0xff;//hex0 -> OFF.
   804b8:	00bfffc4 	movi	r2,-1
   804bc:	e0bffec5 	stb	r2,-5(fp)
	sseg_disp_4_digit(SSEG_I_IV_BASE, message); //equivalent message[0]
   804c0:	01000434 	movhi	r4,16
   804c4:	21040404 	addi	r4,r4,4112
   804c8:	e17ffe04 	addi	r5,fp,-8
   804cc:	00802c00 	call	802c0 <sseg_disp_4_digit>

	alt_u8 message1[4];

	message1[0] = sseg_conv_hex(0x01);
   804d0:	01000044 	movi	r4,1
   804d4:	008026c0 	call	8026c <sseg_conv_hex>
   804d8:	e0bfff05 	stb	r2,-4(fp)
	message1[1] = sseg_conv_hex(0x02);
   804dc:	01000084 	movi	r4,2
   804e0:	008026c0 	call	8026c <sseg_conv_hex>
   804e4:	e0bfff45 	stb	r2,-3(fp)
	message1[2] = 0x0c;//hex5 -> P
   804e8:	00800304 	movi	r2,12
   804ec:	e0bfff85 	stb	r2,-2(fp)
	message1[3] = 0x88;//hex4 -> A
   804f0:	00bfe204 	movi	r2,-120
   804f4:	e0bfffc5 	stb	r2,-1(fp)
	sseg_disp_4_digit(SSEG_V_VI_BASE, message1); //equivalent message[0]
   804f8:	e0bfff04 	addi	r2,fp,-4
   804fc:	01000434 	movhi	r4,16
   80500:	21040004 	addi	r4,r4,4096
   80504:	100b883a 	mov	r5,r2
   80508:	00802c00 	call	802c0 <sseg_disp_4_digit>
}
   8050c:	e037883a 	mov	sp,fp
   80510:	dfc00117 	ldw	ra,4(sp)
   80514:	df000017 	ldw	fp,0(sp)
   80518:	dec00204 	addi	sp,sp,8
   8051c:	f800283a 	ret

00080520 <display_all_off>:

//usefull for debugging
void display_all_off(void)
{
   80520:	defffc04 	addi	sp,sp,-16
   80524:	dfc00315 	stw	ra,12(sp)
   80528:	df000215 	stw	fp,8(sp)
   8052c:	df000204 	addi	fp,sp,8
	alt_u8 message[4];

		message[0] = 0xff;//OFF
   80530:	00bfffc4 	movi	r2,-1
   80534:	e0bffe05 	stb	r2,-8(fp)
		message[1] = 0xff;
   80538:	00bfffc4 	movi	r2,-1
   8053c:	e0bffe45 	stb	r2,-7(fp)
		message[2] = 0xff;
   80540:	00bfffc4 	movi	r2,-1
   80544:	e0bffe85 	stb	r2,-6(fp)
		message[3] = 0xff;
   80548:	00bfffc4 	movi	r2,-1
   8054c:	e0bffec5 	stb	r2,-5(fp)
		sseg_disp_4_digit(SSEG_I_IV_BASE, message); //equivalent message[0]
   80550:	01000434 	movhi	r4,16
   80554:	21040404 	addi	r4,r4,4112
   80558:	e17ffe04 	addi	r5,fp,-8
   8055c:	00802c00 	call	802c0 <sseg_disp_4_digit>

		alt_u8 message1[4];

		message1[0] = 0xff;
   80560:	00bfffc4 	movi	r2,-1
   80564:	e0bfff05 	stb	r2,-4(fp)
		message1[1] = 0xff;
   80568:	00bfffc4 	movi	r2,-1
   8056c:	e0bfff45 	stb	r2,-3(fp)
		message1[2] = 0xff;
   80570:	00bfffc4 	movi	r2,-1
   80574:	e0bfff85 	stb	r2,-2(fp)
		message1[3] = 0xff;
   80578:	00bfffc4 	movi	r2,-1
   8057c:	e0bfffc5 	stb	r2,-1(fp)
		sseg_disp_4_digit(SSEG_V_VI_BASE, message1); //equivalent message[0]
   80580:	e0bfff04 	addi	r2,fp,-4
   80584:	01000434 	movhi	r4,16
   80588:	21040004 	addi	r4,r4,4096
   8058c:	100b883a 	mov	r5,r2
   80590:	00802c00 	call	802c0 <sseg_disp_4_digit>
}
   80594:	e037883a 	mov	sp,fp
   80598:	dfc00117 	ldw	ra,4(sp)
   8059c:	df000017 	ldw	fp,0(sp)
   805a0:	dec00204 	addi	sp,sp,8
   805a4:	f800283a 	ret

000805a8 <audio_init>:




//Audio init, connects
void audio_init(void){
   805a8:	defffe04 	addi	sp,sp,-8
   805ac:	dfc00115 	stw	ra,4(sp)
   805b0:	df000015 	stw	fp,0(sp)
   805b4:	d839883a 	mov	fp,sp

	//open the Audio codec device
	audio_dev = alt_up_audio_open_dev (AUDIO_CODEC_NAME);
   805b8:	01000274 	movhi	r4,9
   805bc:	21037804 	addi	r4,r4,3552
   805c0:	008ee000 	call	8ee00 <alt_up_audio_open_dev>
   805c4:	d0a6eb15 	stw	r2,-25684(gp)
	if ( audio_dev == NULL){
   805c8:	d0a6eb17 	ldw	r2,-25684(gp)
   805cc:	1000041e 	bne	r2,zero,805e0 <audio_init+0x38>
	printf("Error: could not open audio codec device \n");
   805d0:	01000274 	movhi	r4,9
   805d4:	21037d04 	addi	r4,r4,3572
   805d8:	008120c0 	call	8120c <puts>
   805dc:	00000306 	br	805ec <audio_init+0x44>
	} else {
	printf("Opened audio codec device \n");
   805e0:	01000274 	movhi	r4,9
   805e4:	21038804 	addi	r4,r4,3616
   805e8:	008120c0 	call	8120c <puts>
	}

	// open the Audio config device
	av_config_dev = alt_up_av_config_open_dev(AUDIO_CONFIG_NAME);
   805ec:	01000274 	movhi	r4,9
   805f0:	21038f04 	addi	r4,r4,3644
   805f4:	008f5940 	call	8f594 <alt_up_av_config_open_dev>
   805f8:	d0a6ec15 	stw	r2,-25680(gp)
	if ( av_config_dev == NULL){
   805fc:	d0a6ec17 	ldw	r2,-25680(gp)
   80600:	1000041e 	bne	r2,zero,80614 <audio_init+0x6c>
	printf("Error: could not open audio config device \n\r");
   80604:	01000274 	movhi	r4,9
   80608:	21039404 	addi	r4,r4,3664
   8060c:	00811280 	call	81128 <printf>
   80610:	00000306 	br	80620 <audio_init+0x78>
	} else {
	printf("Opened audio config device \n\r");
   80614:	01000274 	movhi	r4,9
   80618:	2103a004 	addi	r4,r4,3712
   8061c:	00811280 	call	81128 <printf>
	}

	//Reset Audio Codec chip (WM8731) to empty Fifos + hardware init config.
	alt_up_audio_reset_audio_core(audio_dev);
   80620:	d0a6eb17 	ldw	r2,-25684(gp)
   80624:	1009883a 	mov	r4,r2
   80628:	008f0080 	call	8f008 <alt_up_audio_reset_audio_core>
	alt_up_av_config_reset(av_config_dev);
   8062c:	d0a6ec17 	ldw	r2,-25680(gp)
   80630:	1009883a 	mov	r4,r2
   80634:	008f6dc0 	call	8f6dc <alt_up_av_config_reset>

	//Audio Chip ready for I2C transfer?
	av_config_dev = alt_up_av_config_open_dev(AUDIO_CONFIG_NAME);
   80638:	01000274 	movhi	r4,9
   8063c:	21038f04 	addi	r4,r4,3644
   80640:	008f5940 	call	8f594 <alt_up_av_config_open_dev>
   80644:	d0a6ec15 	stw	r2,-25680(gp)
	if(alt_up_av_config_read_ready(av_config_dev)){
   80648:	d0a6ec17 	ldw	r2,-25680(gp)
   8064c:	1009883a 	mov	r4,r2
   80650:	008f7d80 	call	8f7d8 <alt_up_av_config_read_ready>
   80654:	10000326 	beq	r2,zero,80664 <audio_init+0xbc>
		printf("Audio chip ready for new I2c transfer \n\r");
   80658:	01000274 	movhi	r4,9
   8065c:	2103a804 	addi	r4,r4,3744
   80660:	00811280 	call	81128 <printf>
	//Enable BYPASS, should received audio now. Audio Path control Register = 0x04, Data to send = 0x0A
	//alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x0A);

	//Enabling Left Line Input
	//0db, Disable mute.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x00, 0x17);
   80664:	d0a6ec17 	ldw	r2,-25680(gp)
   80668:	1009883a 	mov	r4,r2
   8066c:	000b883a 	mov	r5,zero
   80670:	018005c4 	movi	r6,23
   80674:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>

	//NO right channel since my cheap audio cable has only left channel working...
	//Enabling Right Line Input
	//0db, Disable mute.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x01, 0x17);
   80678:	d0a6ec17 	ldw	r2,-25680(gp)
   8067c:	1009883a 	mov	r4,r2
   80680:	01400044 	movi	r5,1
   80684:	018005c4 	movi	r6,23
   80688:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>
	//alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x01, 0x80);

	//Left Headphone Out.
	//0db, with Zero Crossing Enable
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x2, 0xF9);
   8068c:	d0a6ec17 	ldw	r2,-25680(gp)
   80690:	1009883a 	mov	r4,r2
   80694:	01400084 	movi	r5,2
   80698:	01803e44 	movi	r6,249
   8069c:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>
	//Right Headphone Out.
	//0db, with Zero Crossing Enable
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x3, 0xF9);
   806a0:	d0a6ec17 	ldw	r2,-25680(gp)
   806a4:	1009883a 	mov	r4,r2
   806a8:	014000c4 	movi	r5,3
   806ac:	01803e44 	movi	r6,249
   806b0:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>

	//Analogue Audio Path Control
	//Select DAC, Disable Bypass to be output to RHPout/LHPout.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x12);
   806b4:	d0a6ec17 	ldw	r2,-25680(gp)
   806b8:	1009883a 	mov	r4,r2
   806bc:	01400104 	movi	r5,4
   806c0:	01800484 	movi	r6,18
   806c4:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>

	//Digital Audio Path Control
	//Disable DAC Soft Mute Control
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x5, 0x06);
   806c8:	d0a6ec17 	ldw	r2,-25680(gp)
   806cc:	1009883a 	mov	r4,r2
   806d0:	01400144 	movi	r5,5
   806d4:	01800184 	movi	r6,6
   806d8:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>

	//Power Down Control
	//everything ON except MICPD, OSCPD, CLKOUTPD. Not using MIC input.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x6, 0x02);
   806dc:	d0a6ec17 	ldw	r2,-25680(gp)
   806e0:	1009883a 	mov	r4,r2
   806e4:	01400184 	movi	r5,6
   806e8:	01800084 	movi	r6,2
   806ec:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>

	//The rest of control registers are initialized by Hardware.
}
   806f0:	e037883a 	mov	sp,fp
   806f4:	dfc00117 	ldw	ra,4(sp)
   806f8:	df000017 	ldw	fp,0(sp)
   806fc:	dec00204 	addi	sp,sp,8
   80700:	f800283a 	ret

00080704 <audio_no_effect>:

//No effect, this simply reads value from ADC and outputs them to DAC.
// NOTE : with my cheap audio cable, only the LEFT input works.
void audio_no_effect(void){
   80704:	defffc04 	addi	sp,sp,-16
   80708:	dfc00315 	stw	ra,12(sp)
   8070c:	df000215 	stw	fp,8(sp)
   80710:	df000204 	addi	fp,sp,8

	//Select DAC, Disable Bypass to be output to RHPout/LHPout.
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x12);
   80714:	d0a6ec17 	ldw	r2,-25680(gp)
   80718:	1009883a 	mov	r4,r2
   8071c:	01400104 	movi	r5,4
   80720:	01800484 	movi	r6,18
   80724:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>

	//EVEN BETTER, best one.

	int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_LEFT);
   80728:	d0a6eb17 	ldw	r2,-25684(gp)
   8072c:	1009883a 	mov	r4,r2
   80730:	000b883a 	mov	r5,zero
   80734:	008f0980 	call	8f098 <alt_up_audio_read_fifo_avail>
   80738:	e0bfff15 	stw	r2,-4(fp)
	if(fifospace>AUDIO_BUFFER_LEN){
   8073c:	e0bfff17 	ldw	r2,-4(fp)
   80740:	10801050 	cmplti	r2,r2,65
   80744:	10004c1e 	bne	r2,zero,80878 <audio_no_effect+0x174>

		alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   80748:	d0a6eb17 	ldw	r2,-25684(gp)
   8074c:	1009883a 	mov	r4,r2
   80750:	014002b4 	movhi	r5,10
   80754:	29518904 	addi	r5,r5,17956
   80758:	01801004 	movi	r6,64
   8075c:	01c00044 	movi	r7,1
   80760:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>
		alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   80764:	d0a6eb17 	ldw	r2,-25684(gp)
   80768:	1009883a 	mov	r4,r2
   8076c:	014002b4 	movhi	r5,10
   80770:	29520904 	addi	r5,r5,18468
   80774:	01801004 	movi	r6,64
   80778:	000f883a 	mov	r7,zero
   8077c:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>

		//AROUND 32767,
		int i;
		for(i=0;i<AUDIO_BUFFER_LEN;i++){
   80780:	e03ffe15 	stw	zero,-8(fp)
   80784:	00002b06 	br	80834 <audio_no_effect+0x130>
			if(l_buf[i]>40000){
   80788:	008002b4 	movhi	r2,10
   8078c:	10920904 	addi	r2,r2,18468
   80790:	e0fffe17 	ldw	r3,-8(fp)
   80794:	18c7883a 	add	r3,r3,r3
   80798:	18c7883a 	add	r3,r3,r3
   8079c:	10c5883a 	add	r2,r2,r3
   807a0:	10800017 	ldw	r2,0(r2)
   807a4:	10a71070 	cmpltui	r2,r2,40001
   807a8:	1000101e 	bne	r2,zero,807ec <audio_no_effect+0xe8>
				l_buf[i] = l_buf[i] - 0x7fff;
   807ac:	008002b4 	movhi	r2,10
   807b0:	10920904 	addi	r2,r2,18468
   807b4:	e0fffe17 	ldw	r3,-8(fp)
   807b8:	18c7883a 	add	r3,r3,r3
   807bc:	18c7883a 	add	r3,r3,r3
   807c0:	10c5883a 	add	r2,r2,r3
   807c4:	10800017 	ldw	r2,0(r2)
   807c8:	11200044 	addi	r4,r2,-32767
   807cc:	008002b4 	movhi	r2,10
   807d0:	10920904 	addi	r2,r2,18468
   807d4:	e0fffe17 	ldw	r3,-8(fp)
   807d8:	18c7883a 	add	r3,r3,r3
   807dc:	18c7883a 	add	r3,r3,r3
   807e0:	10c5883a 	add	r2,r2,r3
   807e4:	11000015 	stw	r4,0(r2)
   807e8:	00000f06 	br	80828 <audio_no_effect+0x124>
			} else {
				l_buf[i] = l_buf[i] + 0x7fff;
   807ec:	008002b4 	movhi	r2,10
   807f0:	10920904 	addi	r2,r2,18468
   807f4:	e0fffe17 	ldw	r3,-8(fp)
   807f8:	18c7883a 	add	r3,r3,r3
   807fc:	18c7883a 	add	r3,r3,r3
   80800:	10c5883a 	add	r2,r2,r3
   80804:	10800017 	ldw	r2,0(r2)
   80808:	111fffc4 	addi	r4,r2,32767
   8080c:	008002b4 	movhi	r2,10
   80810:	10920904 	addi	r2,r2,18468
   80814:	e0fffe17 	ldw	r3,-8(fp)
   80818:	18c7883a 	add	r3,r3,r3
   8081c:	18c7883a 	add	r3,r3,r3
   80820:	10c5883a 	add	r2,r2,r3
   80824:	11000015 	stw	r4,0(r2)
		alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
		alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);

		//AROUND 32767,
		int i;
		for(i=0;i<AUDIO_BUFFER_LEN;i++){
   80828:	e0bffe17 	ldw	r2,-8(fp)
   8082c:	10800044 	addi	r2,r2,1
   80830:	e0bffe15 	stw	r2,-8(fp)
   80834:	e0bffe17 	ldw	r2,-8(fp)
   80838:	10801010 	cmplti	r2,r2,64
   8083c:	103fd21e 	bne	r2,zero,80788 <__alt_data_end+0xfffb73a8>
			} else {
				l_buf[i] = l_buf[i] + 0x7fff;
			}
		}

		alt_up_audio_write_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   80840:	d0a6eb17 	ldw	r2,-25684(gp)
   80844:	1009883a 	mov	r4,r2
   80848:	014002b4 	movhi	r5,10
   8084c:	29520904 	addi	r5,r5,18468
   80850:	01801004 	movi	r6,64
   80854:	01c00044 	movi	r7,1
   80858:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   8085c:	d0a6eb17 	ldw	r2,-25684(gp)
   80860:	1009883a 	mov	r4,r2
   80864:	014002b4 	movhi	r5,10
   80868:	29520904 	addi	r5,r5,18468
   8086c:	01801004 	movi	r6,64
   80870:	000f883a 	mov	r7,zero
   80874:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	}

}
   80878:	e037883a 	mov	sp,fp
   8087c:	dfc00117 	ldw	ra,4(sp)
   80880:	df000017 	ldw	fp,0(sp)
   80884:	dec00204 	addi	sp,sp,8
   80888:	f800283a 	ret

0008088c <audio_distortion>:

void audio_distortion(void){
   8088c:	defffc04 	addi	sp,sp,-16
   80890:	dfc00315 	stw	ra,12(sp)
   80894:	df000215 	stw	fp,8(sp)
   80898:	df000204 	addi	fp,sp,8

	unsigned int distortion_l_buf;
	unsigned int distortion_r_buf;

	// read audio buffer
	alt_up_audio_read_fifo (audio_dev, &(distortion_r_buf), 1, ALT_UP_AUDIO_RIGHT);
   8089c:	d0e6eb17 	ldw	r3,-25684(gp)
   808a0:	e0bfff04 	addi	r2,fp,-4
   808a4:	1809883a 	mov	r4,r3
   808a8:	100b883a 	mov	r5,r2
   808ac:	01800044 	movi	r6,1
   808b0:	01c00044 	movi	r7,1
   808b4:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>
	alt_up_audio_read_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   808b8:	d0a6eb17 	ldw	r2,-25684(gp)
   808bc:	1009883a 	mov	r4,r2
   808c0:	e17ffe04 	addi	r5,fp,-8
   808c4:	01800044 	movi	r6,1
   808c8:	000f883a 	mov	r7,zero
   808cc:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>

	if(distortion_l_buf>40000){
   808d0:	e0bffe17 	ldw	r2,-8(fp)
   808d4:	10a71070 	cmpltui	r2,r2,40001
   808d8:	1000041e 	bne	r2,zero,808ec <audio_distortion+0x60>
		distortion_l_buf = distortion_l_buf - 0x7fff ;
   808dc:	e0bffe17 	ldw	r2,-8(fp)
   808e0:	10a00044 	addi	r2,r2,-32767
   808e4:	e0bffe15 	stw	r2,-8(fp)
   808e8:	00000306 	br	808f8 <audio_distortion+0x6c>

			} else {
				distortion_l_buf = distortion_l_buf + 0x7fff ;
   808ec:	e0bffe17 	ldw	r2,-8(fp)
   808f0:	109fffc4 	addi	r2,r2,32767
   808f4:	e0bffe15 	stw	r2,-8(fp)

			}

	//Write audio buffer
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_RIGHT);
   808f8:	d0a6eb17 	ldw	r2,-25684(gp)
   808fc:	1009883a 	mov	r4,r2
   80900:	e17ffe04 	addi	r5,fp,-8
   80904:	01800044 	movi	r6,1
   80908:	01c00044 	movi	r7,1
   8090c:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   80910:	d0a6eb17 	ldw	r2,-25684(gp)
   80914:	1009883a 	mov	r4,r2
   80918:	e17ffe04 	addi	r5,fp,-8
   8091c:	01800044 	movi	r6,1
   80920:	000f883a 	mov	r7,zero
   80924:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_RIGHT);
   80928:	d0a6eb17 	ldw	r2,-25684(gp)
   8092c:	1009883a 	mov	r4,r2
   80930:	e17ffe04 	addi	r5,fp,-8
   80934:	01800044 	movi	r6,1
   80938:	01c00044 	movi	r7,1
   8093c:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   80940:	d0a6eb17 	ldw	r2,-25684(gp)
   80944:	1009883a 	mov	r4,r2
   80948:	e17ffe04 	addi	r5,fp,-8
   8094c:	01800044 	movi	r6,1
   80950:	000f883a 	mov	r7,zero
   80954:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_RIGHT);
   80958:	d0a6eb17 	ldw	r2,-25684(gp)
   8095c:	1009883a 	mov	r4,r2
   80960:	e17ffe04 	addi	r5,fp,-8
   80964:	01800044 	movi	r6,1
   80968:	01c00044 	movi	r7,1
   8096c:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   80970:	d0a6eb17 	ldw	r2,-25684(gp)
   80974:	1009883a 	mov	r4,r2
   80978:	e17ffe04 	addi	r5,fp,-8
   8097c:	01800044 	movi	r6,1
   80980:	000f883a 	mov	r7,zero
   80984:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_RIGHT);
   80988:	d0a6eb17 	ldw	r2,-25684(gp)
   8098c:	1009883a 	mov	r4,r2
   80990:	e17ffe04 	addi	r5,fp,-8
   80994:	01800044 	movi	r6,1
   80998:	01c00044 	movi	r7,1
   8099c:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	alt_up_audio_write_fifo (audio_dev, &(distortion_l_buf), 1, ALT_UP_AUDIO_LEFT);
   809a0:	d0a6eb17 	ldw	r2,-25684(gp)
   809a4:	1009883a 	mov	r4,r2
   809a8:	e17ffe04 	addi	r5,fp,-8
   809ac:	01800044 	movi	r6,1
   809b0:	000f883a 	mov	r7,zero
   809b4:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
}
   809b8:	e037883a 	mov	sp,fp
   809bc:	dfc00117 	ldw	ra,4(sp)
   809c0:	df000017 	ldw	fp,0(sp)
   809c4:	dec00204 	addi	sp,sp,8
   809c8:	f800283a 	ret

000809cc <audio_delay>:

void audio_delay(void){
   809cc:	defffc04 	addi	sp,sp,-16
   809d0:	dfc00315 	stw	ra,12(sp)
   809d4:	df000215 	stw	fp,8(sp)
   809d8:	df000204 	addi	fp,sp,8
	//Sample rate is 32kHz, 31.25usec between each samples

	//echo will be at 500ms. So we need to store 16000samples.

	//Active bypass + dac in audio path
	alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x1A);
   809dc:	d0a6ec17 	ldw	r2,-25680(gp)
   809e0:	1009883a 	mov	r4,r2
   809e4:	01400104 	movi	r5,4
   809e8:	01800684 	movi	r6,26
   809ec:	008f8100 	call	8f810 <alt_up_av_config_write_audio_cfg_register>

	//Aquiring/Writing to Audio Chip
	int input_fifo = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_LEFT);
   809f0:	d0a6eb17 	ldw	r2,-25684(gp)
   809f4:	1009883a 	mov	r4,r2
   809f8:	000b883a 	mov	r5,zero
   809fc:	008f0980 	call	8f098 <alt_up_audio_read_fifo_avail>
   80a00:	e0bfff15 	stw	r2,-4(fp)
	//For synchronizing writing/reading from audio chip.
	if(input_fifo>AUDIO_BUFFER_LEN){
   80a04:	e0bfff17 	ldw	r2,-4(fp)
   80a08:	10801050 	cmplti	r2,r2,65
   80a0c:	1000781e 	bne	r2,zero,80bf0 <audio_delay+0x224>

		//Circular buffer of 16000
		//storing index
		storing_audio_index = storing_audio_index % (DELAY_AUDIO_BUFFER_LEN);
   80a10:	d0a6e717 	ldw	r2,-25700(gp)
   80a14:	1009883a 	mov	r4,r2
   80a18:	014fa004 	movi	r5,16000
   80a1c:	00810f40 	call	810f4 <__umodsi3>
   80a20:	d0a6e715 	stw	r2,-25700(gp)
		//reading index
		reading_audio_index = reading_audio_index % (DELAY_AUDIO_BUFFER_LEN-64);//SOLVE THE TOCTOC
   80a24:	d0a00017 	ldw	r2,-32768(gp)
   80a28:	1009883a 	mov	r4,r2
   80a2c:	014f9004 	movi	r5,15936
   80a30:	00810f40 	call	810f4 <__umodsi3>
   80a34:	d0a00015 	stw	r2,-32768(gp)

		//Reading input fifo.
		alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   80a38:	d0a6eb17 	ldw	r2,-25684(gp)
   80a3c:	1009883a 	mov	r4,r2
   80a40:	014002b4 	movhi	r5,10
   80a44:	29518904 	addi	r5,r5,17956
   80a48:	01801004 	movi	r6,64
   80a4c:	01c00044 	movi	r7,1
   80a50:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>
		alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   80a54:	d0a6eb17 	ldw	r2,-25684(gp)
   80a58:	1009883a 	mov	r4,r2
   80a5c:	014002b4 	movhi	r5,10
   80a60:	29520904 	addi	r5,r5,18468
   80a64:	01801004 	movi	r6,64
   80a68:	000f883a 	mov	r7,zero
   80a6c:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>
		//printf("words_read = %d\n\r",words_read);

		//for 100 samples.
		int i;
		for(i=0;i<AUDIO_BUFFER_LEN;i++){
   80a70:	e03ffe15 	stw	zero,-8(fp)
   80a74:	00004d06 	br	80bac <audio_delay+0x1e0>

			//ADJUSTING TO AROUND 32767,
			if(l_buf[i]>40000){
   80a78:	008002b4 	movhi	r2,10
   80a7c:	10920904 	addi	r2,r2,18468
   80a80:	e0fffe17 	ldw	r3,-8(fp)
   80a84:	18c7883a 	add	r3,r3,r3
   80a88:	18c7883a 	add	r3,r3,r3
   80a8c:	10c5883a 	add	r2,r2,r3
   80a90:	10800017 	ldw	r2,0(r2)
   80a94:	10a71070 	cmpltui	r2,r2,40001
   80a98:	1000101e 	bne	r2,zero,80adc <audio_delay+0x110>
				l_buf[i] = l_buf[i] - 0x7fff;
   80a9c:	008002b4 	movhi	r2,10
   80aa0:	10920904 	addi	r2,r2,18468
   80aa4:	e0fffe17 	ldw	r3,-8(fp)
   80aa8:	18c7883a 	add	r3,r3,r3
   80aac:	18c7883a 	add	r3,r3,r3
   80ab0:	10c5883a 	add	r2,r2,r3
   80ab4:	10800017 	ldw	r2,0(r2)
   80ab8:	11200044 	addi	r4,r2,-32767
   80abc:	008002b4 	movhi	r2,10
   80ac0:	10920904 	addi	r2,r2,18468
   80ac4:	e0fffe17 	ldw	r3,-8(fp)
   80ac8:	18c7883a 	add	r3,r3,r3
   80acc:	18c7883a 	add	r3,r3,r3
   80ad0:	10c5883a 	add	r2,r2,r3
   80ad4:	11000015 	stw	r4,0(r2)
   80ad8:	00000f06 	br	80b18 <audio_delay+0x14c>
			} else {
				l_buf[i] = l_buf[i] + 0x7fff;
   80adc:	008002b4 	movhi	r2,10
   80ae0:	10920904 	addi	r2,r2,18468
   80ae4:	e0fffe17 	ldw	r3,-8(fp)
   80ae8:	18c7883a 	add	r3,r3,r3
   80aec:	18c7883a 	add	r3,r3,r3
   80af0:	10c5883a 	add	r2,r2,r3
   80af4:	10800017 	ldw	r2,0(r2)
   80af8:	111fffc4 	addi	r4,r2,32767
   80afc:	008002b4 	movhi	r2,10
   80b00:	10920904 	addi	r2,r2,18468
   80b04:	e0fffe17 	ldw	r3,-8(fp)
   80b08:	18c7883a 	add	r3,r3,r3
   80b0c:	18c7883a 	add	r3,r3,r3
   80b10:	10c5883a 	add	r2,r2,r3
   80b14:	11000015 	stw	r4,0(r2)
			}

			//storing in delay_buffer
			delay_audio_buffer[storing_audio_index] = l_buf[i];
   80b18:	d0e6e717 	ldw	r3,-25700(gp)
   80b1c:	008002b4 	movhi	r2,10
   80b20:	10920904 	addi	r2,r2,18468
   80b24:	e13ffe17 	ldw	r4,-8(fp)
   80b28:	2109883a 	add	r4,r4,r4
   80b2c:	2109883a 	add	r4,r4,r4
   80b30:	1105883a 	add	r2,r2,r4
   80b34:	11000017 	ldw	r4,0(r2)
   80b38:	00800274 	movhi	r2,9
   80b3c:	10923f04 	addi	r2,r2,18684
   80b40:	18c7883a 	add	r3,r3,r3
   80b44:	18c7883a 	add	r3,r3,r3
   80b48:	10c5883a 	add	r2,r2,r3
   80b4c:	11000015 	stw	r4,0(r2)
			//retriving from buffer
			outgoing_buffer[i] = delay_audio_buffer[reading_audio_index];
   80b50:	d0e00017 	ldw	r3,-32768(gp)
   80b54:	00800274 	movhi	r2,9
   80b58:	10923f04 	addi	r2,r2,18684
   80b5c:	18c7883a 	add	r3,r3,r3
   80b60:	18c7883a 	add	r3,r3,r3
   80b64:	10c5883a 	add	r2,r2,r3
   80b68:	11000017 	ldw	r4,0(r2)
   80b6c:	008002b4 	movhi	r2,10
   80b70:	1091c904 	addi	r2,r2,18212
   80b74:	e0fffe17 	ldw	r3,-8(fp)
   80b78:	18c7883a 	add	r3,r3,r3
   80b7c:	18c7883a 	add	r3,r3,r3
   80b80:	10c5883a 	add	r2,r2,r3
   80b84:	11000015 	stw	r4,0(r2)

			//Reading index is always 1 sample ahead of storing index.
			storing_audio_index = storing_audio_index + 1;
   80b88:	d0a6e717 	ldw	r2,-25700(gp)
   80b8c:	10800044 	addi	r2,r2,1
   80b90:	d0a6e715 	stw	r2,-25700(gp)
			reading_audio_index = reading_audio_index + 1;
   80b94:	d0a00017 	ldw	r2,-32768(gp)
   80b98:	10800044 	addi	r2,r2,1
   80b9c:	d0a00015 	stw	r2,-32768(gp)
		alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
		//printf("words_read = %d\n\r",words_read);

		//for 100 samples.
		int i;
		for(i=0;i<AUDIO_BUFFER_LEN;i++){
   80ba0:	e0bffe17 	ldw	r2,-8(fp)
   80ba4:	10800044 	addi	r2,r2,1
   80ba8:	e0bffe15 	stw	r2,-8(fp)
   80bac:	e0bffe17 	ldw	r2,-8(fp)
   80bb0:	10801010 	cmplti	r2,r2,64
   80bb4:	103fb01e 	bne	r2,zero,80a78 <__alt_data_end+0xfffb7698>
			storing_audio_index = storing_audio_index + 1;
			reading_audio_index = reading_audio_index + 1;

		}
		//writing to output fifo
		alt_up_audio_write_fifo (audio_dev, outgoing_buffer, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   80bb8:	d0a6eb17 	ldw	r2,-25684(gp)
   80bbc:	1009883a 	mov	r4,r2
   80bc0:	014002b4 	movhi	r5,10
   80bc4:	2951c904 	addi	r5,r5,18212
   80bc8:	01801004 	movi	r6,64
   80bcc:	01c00044 	movi	r7,1
   80bd0:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo (audio_dev, outgoing_buffer, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   80bd4:	d0a6eb17 	ldw	r2,-25684(gp)
   80bd8:	1009883a 	mov	r4,r2
   80bdc:	014002b4 	movhi	r5,10
   80be0:	2951c904 	addi	r5,r5,18212
   80be4:	01801004 	movi	r6,64
   80be8:	000f883a 	mov	r7,zero
   80bec:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
	}

}
   80bf0:	e037883a 	mov	sp,fp
   80bf4:	dfc00117 	ldw	ra,4(sp)
   80bf8:	df000017 	ldw	fp,0(sp)
   80bfc:	dec00204 	addi	sp,sp,8
   80c00:	f800283a 	ret

00080c04 <audio_octave>:

void audio_octave(void){
   80c04:	defff904 	addi	sp,sp,-28
   80c08:	dfc00615 	stw	ra,24(sp)
   80c0c:	df000515 	stw	fp,20(sp)
   80c10:	df000504 	addi	fp,sp,20
	//Not required.
	//Active bypass + dac in audio path
	//alt_up_av_config_write_audio_cfg_register(av_config_dev, 0x04, 0x1A);

	//Dual buffer scheme use.
	int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_LEFT);
   80c14:	d0a6eb17 	ldw	r2,-25684(gp)
   80c18:	1009883a 	mov	r4,r2
   80c1c:	000b883a 	mov	r5,zero
   80c20:	008f0980 	call	8f098 <alt_up_audio_read_fifo_avail>
   80c24:	e0bffc15 	stw	r2,-16(fp)
		if(fifospace>AUDIO_BUFFER_LEN){
   80c28:	e0bffc17 	ldw	r2,-16(fp)
   80c2c:	10801050 	cmplti	r2,r2,65
   80c30:	1000971e 	bne	r2,zero,80e90 <audio_octave+0x28c>

			//2 circular buffer phased shift by 180degrees.
			octave_storing_index = octave_storing_index %  OCTAVE_AUDIO_BUFFER_LEN;
   80c34:	d0a6e917 	ldw	r2,-25692(gp)
   80c38:	10800fcc 	andi	r2,r2,63
   80c3c:	d0a6e915 	stw	r2,-25692(gp)
			octave_reading_index1 = octave_reading_index1 %  OCTAVE_AUDIO_BUFFER_LEN;
   80c40:	d0a6e817 	ldw	r2,-25696(gp)
   80c44:	10800fcc 	andi	r2,r2,63
   80c48:	d0a6e815 	stw	r2,-25696(gp)
			octave_reading_index2 = octave_reading_index2 %  OCTAVE_AUDIO_BUFFER_LEN;
   80c4c:	d0a00117 	ldw	r2,-32764(gp)
   80c50:	10800fcc 	andi	r2,r2,63
   80c54:	d0a00115 	stw	r2,-32764(gp)

			alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   80c58:	d0a6eb17 	ldw	r2,-25684(gp)
   80c5c:	1009883a 	mov	r4,r2
   80c60:	014002b4 	movhi	r5,10
   80c64:	29518904 	addi	r5,r5,17956
   80c68:	01801004 	movi	r6,64
   80c6c:	01c00044 	movi	r7,1
   80c70:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>
			alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   80c74:	d0a6eb17 	ldw	r2,-25684(gp)
   80c78:	1009883a 	mov	r4,r2
   80c7c:	014002b4 	movhi	r5,10
   80c80:	29520904 	addi	r5,r5,18468
   80c84:	01801004 	movi	r6,64
   80c88:	000f883a 	mov	r7,zero
   80c8c:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>


			int i;
			for(i=0;i<AUDIO_BUFFER_LEN;i++){
   80c90:	e03ffb15 	stw	zero,-20(fp)
   80c94:	00006d06 	br	80e4c <audio_octave+0x248>
				//AROUND 32767
				if(l_buf[i]>40000){
   80c98:	008002b4 	movhi	r2,10
   80c9c:	10920904 	addi	r2,r2,18468
   80ca0:	e0fffb17 	ldw	r3,-20(fp)
   80ca4:	18c7883a 	add	r3,r3,r3
   80ca8:	18c7883a 	add	r3,r3,r3
   80cac:	10c5883a 	add	r2,r2,r3
   80cb0:	10800017 	ldw	r2,0(r2)
   80cb4:	10a71070 	cmpltui	r2,r2,40001
   80cb8:	1000101e 	bne	r2,zero,80cfc <audio_octave+0xf8>
					l_buf[i] = l_buf[i] - 0x7fff;
   80cbc:	008002b4 	movhi	r2,10
   80cc0:	10920904 	addi	r2,r2,18468
   80cc4:	e0fffb17 	ldw	r3,-20(fp)
   80cc8:	18c7883a 	add	r3,r3,r3
   80ccc:	18c7883a 	add	r3,r3,r3
   80cd0:	10c5883a 	add	r2,r2,r3
   80cd4:	10800017 	ldw	r2,0(r2)
   80cd8:	11200044 	addi	r4,r2,-32767
   80cdc:	008002b4 	movhi	r2,10
   80ce0:	10920904 	addi	r2,r2,18468
   80ce4:	e0fffb17 	ldw	r3,-20(fp)
   80ce8:	18c7883a 	add	r3,r3,r3
   80cec:	18c7883a 	add	r3,r3,r3
   80cf0:	10c5883a 	add	r2,r2,r3
   80cf4:	11000015 	stw	r4,0(r2)
   80cf8:	00000f06 	br	80d38 <audio_octave+0x134>
				} else {
					l_buf[i] = l_buf[i] + 0x7fff;
   80cfc:	008002b4 	movhi	r2,10
   80d00:	10920904 	addi	r2,r2,18468
   80d04:	e0fffb17 	ldw	r3,-20(fp)
   80d08:	18c7883a 	add	r3,r3,r3
   80d0c:	18c7883a 	add	r3,r3,r3
   80d10:	10c5883a 	add	r2,r2,r3
   80d14:	10800017 	ldw	r2,0(r2)
   80d18:	111fffc4 	addi	r4,r2,32767
   80d1c:	008002b4 	movhi	r2,10
   80d20:	10920904 	addi	r2,r2,18468
   80d24:	e0fffb17 	ldw	r3,-20(fp)
   80d28:	18c7883a 	add	r3,r3,r3
   80d2c:	18c7883a 	add	r3,r3,r3
   80d30:	10c5883a 	add	r2,r2,r3
   80d34:	11000015 	stw	r4,0(r2)
				}

				//storing in octave_buffer1
				octave_buffer1[octave_storing_index] = l_buf[i];
   80d38:	d0e6e917 	ldw	r3,-25692(gp)
   80d3c:	008002b4 	movhi	r2,10
   80d40:	10920904 	addi	r2,r2,18468
   80d44:	e13ffb17 	ldw	r4,-20(fp)
   80d48:	2109883a 	add	r4,r4,r4
   80d4c:	2109883a 	add	r4,r4,r4
   80d50:	1105883a 	add	r2,r2,r4
   80d54:	11000017 	ldw	r4,0(r2)
   80d58:	008002b4 	movhi	r2,10
   80d5c:	1090bf04 	addi	r2,r2,17148
   80d60:	18c7883a 	add	r3,r3,r3
   80d64:	18c7883a 	add	r3,r3,r3
   80d68:	10c5883a 	add	r2,r2,r3
   80d6c:	11000015 	stw	r4,0(r2)
				//storing in octave_buffer2
				octave_buffer2[octave_storing_index] = l_buf[i];
   80d70:	d0e6e917 	ldw	r3,-25692(gp)
   80d74:	008002b4 	movhi	r2,10
   80d78:	10920904 	addi	r2,r2,18468
   80d7c:	e13ffb17 	ldw	r4,-20(fp)
   80d80:	2109883a 	add	r4,r4,r4
   80d84:	2109883a 	add	r4,r4,r4
   80d88:	1105883a 	add	r2,r2,r4
   80d8c:	11000017 	ldw	r4,0(r2)
   80d90:	008002b4 	movhi	r2,10
   80d94:	1090ff04 	addi	r2,r2,17404
   80d98:	18c7883a 	add	r3,r3,r3
   80d9c:	18c7883a 	add	r3,r3,r3
   80da0:	10c5883a 	add	r2,r2,r3
   80da4:	11000015 	stw	r4,0(r2)
				//reading from octave_buffer1 into a temp1 value. Will be further averaged.
				unsigned int temp1,temp2;
				temp1 = octave_buffer1[octave_reading_index1];
   80da8:	d0e6e817 	ldw	r3,-25696(gp)
   80dac:	008002b4 	movhi	r2,10
   80db0:	1090bf04 	addi	r2,r2,17148
   80db4:	18c7883a 	add	r3,r3,r3
   80db8:	18c7883a 	add	r3,r3,r3
   80dbc:	10c5883a 	add	r2,r2,r3
   80dc0:	10800017 	ldw	r2,0(r2)
   80dc4:	e0bffd15 	stw	r2,-12(fp)
				temp2 = octave_buffer2[octave_reading_index2];
   80dc8:	d0e00117 	ldw	r3,-32764(gp)
   80dcc:	008002b4 	movhi	r2,10
   80dd0:	1090ff04 	addi	r2,r2,17404
   80dd4:	18c7883a 	add	r3,r3,r3
   80dd8:	18c7883a 	add	r3,r3,r3
   80ddc:	10c5883a 	add	r2,r2,r3
   80de0:	10800017 	ldw	r2,0(r2)
   80de4:	e0bffe15 	stw	r2,-8(fp)
				//Average is taken
				unsigned int average;
				average = (temp1+temp2)/2;
   80de8:	e0fffd17 	ldw	r3,-12(fp)
   80dec:	e0bffe17 	ldw	r2,-8(fp)
   80df0:	1885883a 	add	r2,r3,r2
   80df4:	1004d07a 	srli	r2,r2,1
   80df8:	e0bfff15 	stw	r2,-4(fp)
				//Average is put into octave_outputbuffer
				octave_outputbuffer[i] =  average;
   80dfc:	008002b4 	movhi	r2,10
   80e00:	10913f04 	addi	r2,r2,17660
   80e04:	e0fffb17 	ldw	r3,-20(fp)
   80e08:	18c7883a 	add	r3,r3,r3
   80e0c:	18c7883a 	add	r3,r3,r3
   80e10:	10c5883a 	add	r2,r2,r3
   80e14:	e0ffff17 	ldw	r3,-4(fp)
   80e18:	10c00015 	stw	r3,0(r2)
				//printf("average is %d\n\r", average);

				//Best fit.
				octave_reading_index1 = octave_reading_index1 + 1;
   80e1c:	d0a6e817 	ldw	r2,-25696(gp)
   80e20:	10800044 	addi	r2,r2,1
   80e24:	d0a6e815 	stw	r2,-25696(gp)
				octave_reading_index2 = octave_reading_index2 + 1;
   80e28:	d0a00117 	ldw	r2,-32764(gp)
   80e2c:	10800044 	addi	r2,r2,1
   80e30:	d0a00115 	stw	r2,-32764(gp)
				octave_storing_index = octave_storing_index + 1;
   80e34:	d0a6e917 	ldw	r2,-25692(gp)
   80e38:	10800044 	addi	r2,r2,1
   80e3c:	d0a6e915 	stw	r2,-25692(gp)
			alt_up_audio_read_fifo (audio_dev, r_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_read_fifo (audio_dev, l_buf, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);


			int i;
			for(i=0;i<AUDIO_BUFFER_LEN;i++){
   80e40:	e0bffb17 	ldw	r2,-20(fp)
   80e44:	10800044 	addi	r2,r2,1
   80e48:	e0bffb15 	stw	r2,-20(fp)
   80e4c:	e0bffb17 	ldw	r2,-20(fp)
   80e50:	10801010 	cmplti	r2,r2,64
   80e54:	103f901e 	bne	r2,zero,80c98 <__alt_data_end+0xfffb78b8>
				octave_reading_index2 = octave_reading_index2 + 1;
				octave_storing_index = octave_storing_index + 1;

			}
			//writing to output fifo
			alt_up_audio_write_fifo (audio_dev, octave_outputbuffer, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_RIGHT);
   80e58:	d0a6eb17 	ldw	r2,-25684(gp)
   80e5c:	1009883a 	mov	r4,r2
   80e60:	014002b4 	movhi	r5,10
   80e64:	29513f04 	addi	r5,r5,17660
   80e68:	01801004 	movi	r6,64
   80e6c:	01c00044 	movi	r7,1
   80e70:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
			alt_up_audio_write_fifo (audio_dev, octave_outputbuffer, AUDIO_BUFFER_LEN, ALT_UP_AUDIO_LEFT);
   80e74:	d0a6eb17 	ldw	r2,-25684(gp)
   80e78:	1009883a 	mov	r4,r2
   80e7c:	014002b4 	movhi	r5,10
   80e80:	29513f04 	addi	r5,r5,17660
   80e84:	01801004 	movi	r6,64
   80e88:	000f883a 	mov	r7,zero
   80e8c:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
		}

}
   80e90:	e037883a 	mov	sp,fp
   80e94:	dfc00117 	ldw	ra,4(sp)
   80e98:	df000017 	ldw	fp,0(sp)
   80e9c:	dec00204 	addi	sp,sp,8
   80ea0:	f800283a 	ret

00080ea4 <main>:
int state = 0;
//State selection
void state_select(void);

int main(void)
{
   80ea4:	defffe04 	addi	sp,sp,-8
   80ea8:	dfc00115 	stw	ra,4(sp)
   80eac:	df000015 	stw	fp,0(sp)
   80eb0:	d839883a 	mov	fp,sp
	//FALLING Edge selected in Qsys.
	clear_all_edge_capture;
   80eb4:	00c003c4 	movi	r3,15
   80eb8:	00800434 	movhi	r2,16
   80ebc:	10840b04 	addi	r2,r2,4140
   80ec0:	10c00035 	stwio	r3,0(r2)

	//Configure audio chip. By default, Line IN is connected to Line OUT by the BYPASS scheme.
	audio_init();
   80ec4:	00805a80 	call	805a8 <audio_init>
	while(1)
	{

		//Guitar Pedal.

		display_int_to_sseg(state); //0 for no-effect
   80ec8:	d0a6ea17 	ldw	r2,-25688(gp)
   80ecc:	1009883a 	mov	r4,r2
   80ed0:	008033c0 	call	8033c <display_int_to_sseg>
		state_select();
   80ed4:	0080f2c0 	call	80f2c <state_select>
		switch (state){
   80ed8:	d0a6ea17 	ldw	r2,-25688(gp)
   80edc:	10c00060 	cmpeqi	r3,r2,1
   80ee0:	18000b1e 	bne	r3,zero,80f10 <main+0x6c>
   80ee4:	10c00088 	cmpgei	r3,r2,2
   80ee8:	1800021e 	bne	r3,zero,80ef4 <main+0x50>
   80eec:	10000626 	beq	r2,zero,80f08 <main+0x64>
   80ef0:	00000d06 	br	80f28 <main+0x84>
   80ef4:	10c000a0 	cmpeqi	r3,r2,2
   80ef8:	1800071e 	bne	r3,zero,80f18 <main+0x74>
   80efc:	108000e0 	cmpeqi	r2,r2,3
   80f00:	1000071e 	bne	r2,zero,80f20 <main+0x7c>
   80f04:	00000806 	br	80f28 <main+0x84>
		case 0 :
			audio_no_effect();
   80f08:	00807040 	call	80704 <audio_no_effect>
			break;
   80f0c:	00000606 	br	80f28 <main+0x84>

		case 1 :
			audio_distortion();
   80f10:	008088c0 	call	8088c <audio_distortion>
			break;
   80f14:	00000406 	br	80f28 <main+0x84>

		case 2 :
			audio_delay();
   80f18:	00809cc0 	call	809cc <audio_delay>
			break;
   80f1c:	00000206 	br	80f28 <main+0x84>

		case 3 :
			audio_octave();
   80f20:	0080c040 	call	80c04 <audio_octave>
			break;
   80f24:	0001883a 	nop

		}
	}
   80f28:	003fe706 	br	80ec8 <__alt_data_end+0xfffb7ae8>

00080f2c <state_select>:
	return 0;
}

void state_select(void){
   80f2c:	deffff04 	addi	sp,sp,-4
   80f30:	df000015 	stw	fp,0(sp)
   80f34:	d839883a 	mov	fp,sp
	if(edge_capture & key0_pressed){
   80f38:	00800434 	movhi	r2,16
   80f3c:	10840b04 	addi	r2,r2,4140
   80f40:	10800037 	ldwio	r2,0(r2)
   80f44:	1080004c 	andi	r2,r2,1
   80f48:	10000226 	beq	r2,zero,80f54 <state_select+0x28>
		state = 0;
   80f4c:	d026ea15 	stw	zero,-25688(gp)
   80f50:	00001706 	br	80fb0 <state_select+0x84>
		//clear_key0;
	} else if(edge_capture & key1_pressed){
   80f54:	00800434 	movhi	r2,16
   80f58:	10840b04 	addi	r2,r2,4140
   80f5c:	10800037 	ldwio	r2,0(r2)
   80f60:	1080008c 	andi	r2,r2,2
   80f64:	10000326 	beq	r2,zero,80f74 <state_select+0x48>
		state = 1;
   80f68:	00800044 	movi	r2,1
   80f6c:	d0a6ea15 	stw	r2,-25688(gp)
   80f70:	00000f06 	br	80fb0 <state_select+0x84>
		//clear_key1;
	} else if(edge_capture & key2_pressed){
   80f74:	00800434 	movhi	r2,16
   80f78:	10840b04 	addi	r2,r2,4140
   80f7c:	10800037 	ldwio	r2,0(r2)
   80f80:	1080010c 	andi	r2,r2,4
   80f84:	10000326 	beq	r2,zero,80f94 <state_select+0x68>
		state = 2;
   80f88:	00800084 	movi	r2,2
   80f8c:	d0a6ea15 	stw	r2,-25688(gp)
   80f90:	00000706 	br	80fb0 <state_select+0x84>
		//clear_key2;
	} else if(edge_capture & key3_pressed){
   80f94:	00800434 	movhi	r2,16
   80f98:	10840b04 	addi	r2,r2,4140
   80f9c:	10800037 	ldwio	r2,0(r2)
   80fa0:	1080020c 	andi	r2,r2,8
   80fa4:	10000226 	beq	r2,zero,80fb0 <state_select+0x84>
		state = 3;
   80fa8:	008000c4 	movi	r2,3
   80fac:	d0a6ea15 	stw	r2,-25688(gp)
		//clear_key3;
	}

	clear_all_edge_capture;
   80fb0:	00c003c4 	movi	r3,15
   80fb4:	00800434 	movhi	r2,16
   80fb8:	10840b04 	addi	r2,r2,4140
   80fbc:	10c00035 	stwio	r3,0(r2)
}
   80fc0:	e037883a 	mov	sp,fp
   80fc4:	df000017 	ldw	fp,0(sp)
   80fc8:	dec00104 	addi	sp,sp,4
   80fcc:	f800283a 	ret

00080fd0 <udivmodsi4>:
   80fd0:	2900182e 	bgeu	r5,r4,81034 <udivmodsi4+0x64>
   80fd4:	28001716 	blt	r5,zero,81034 <udivmodsi4+0x64>
   80fd8:	00800804 	movi	r2,32
   80fdc:	00c00044 	movi	r3,1
   80fe0:	00000206 	br	80fec <udivmodsi4+0x1c>
   80fe4:	10001126 	beq	r2,zero,8102c <udivmodsi4+0x5c>
   80fe8:	28000516 	blt	r5,zero,81000 <udivmodsi4+0x30>
   80fec:	294b883a 	add	r5,r5,r5
   80ff0:	10bfffc4 	addi	r2,r2,-1
   80ff4:	18c7883a 	add	r3,r3,r3
   80ff8:	293ffa36 	bltu	r5,r4,80fe4 <__alt_data_end+0xfffb7c04>
   80ffc:	18000b26 	beq	r3,zero,8102c <udivmodsi4+0x5c>
   81000:	0005883a 	mov	r2,zero
   81004:	21400236 	bltu	r4,r5,81010 <udivmodsi4+0x40>
   81008:	2149c83a 	sub	r4,r4,r5
   8100c:	10c4b03a 	or	r2,r2,r3
   81010:	1806d07a 	srli	r3,r3,1
   81014:	280ad07a 	srli	r5,r5,1
   81018:	183ffa1e 	bne	r3,zero,81004 <__alt_data_end+0xfffb7c24>
   8101c:	3000011e 	bne	r6,zero,81024 <udivmodsi4+0x54>
   81020:	f800283a 	ret
   81024:	2005883a 	mov	r2,r4
   81028:	f800283a 	ret
   8102c:	0005883a 	mov	r2,zero
   81030:	003ffa06 	br	8101c <__alt_data_end+0xfffb7c3c>
   81034:	00c00044 	movi	r3,1
   81038:	003ff106 	br	81000 <__alt_data_end+0xfffb7c20>

0008103c <__divsi3>:
   8103c:	defffe04 	addi	sp,sp,-8
   81040:	dfc00115 	stw	ra,4(sp)
   81044:	dc000015 	stw	r16,0(sp)
   81048:	20000b16 	blt	r4,zero,81078 <__divsi3+0x3c>
   8104c:	0021883a 	mov	r16,zero
   81050:	28000c16 	blt	r5,zero,81084 <__divsi3+0x48>
   81054:	000d883a 	mov	r6,zero
   81058:	0080fd00 	call	80fd0 <udivmodsi4>
   8105c:	0407c83a 	sub	r3,zero,r16
   81060:	1884f03a 	xor	r2,r3,r2
   81064:	1405883a 	add	r2,r2,r16
   81068:	dfc00117 	ldw	ra,4(sp)
   8106c:	dc000017 	ldw	r16,0(sp)
   81070:	dec00204 	addi	sp,sp,8
   81074:	f800283a 	ret
   81078:	0109c83a 	sub	r4,zero,r4
   8107c:	04000044 	movi	r16,1
   81080:	283ff40e 	bge	r5,zero,81054 <__alt_data_end+0xfffb7c74>
   81084:	014bc83a 	sub	r5,zero,r5
   81088:	8400005c 	xori	r16,r16,1
   8108c:	003ff106 	br	81054 <__alt_data_end+0xfffb7c74>

00081090 <__modsi3>:
   81090:	defffd04 	addi	sp,sp,-12
   81094:	dfc00215 	stw	ra,8(sp)
   81098:	dc400115 	stw	r17,4(sp)
   8109c:	dc000015 	stw	r16,0(sp)
   810a0:	20000c16 	blt	r4,zero,810d4 <__modsi3+0x44>
   810a4:	0023883a 	mov	r17,zero
   810a8:	0021883a 	mov	r16,zero
   810ac:	28000d16 	blt	r5,zero,810e4 <__modsi3+0x54>
   810b0:	01800044 	movi	r6,1
   810b4:	0080fd00 	call	80fd0 <udivmodsi4>
   810b8:	1404f03a 	xor	r2,r2,r16
   810bc:	8885883a 	add	r2,r17,r2
   810c0:	dfc00217 	ldw	ra,8(sp)
   810c4:	dc400117 	ldw	r17,4(sp)
   810c8:	dc000017 	ldw	r16,0(sp)
   810cc:	dec00304 	addi	sp,sp,12
   810d0:	f800283a 	ret
   810d4:	0109c83a 	sub	r4,zero,r4
   810d8:	04400044 	movi	r17,1
   810dc:	043fffc4 	movi	r16,-1
   810e0:	283ff30e 	bge	r5,zero,810b0 <__alt_data_end+0xfffb7cd0>
   810e4:	014bc83a 	sub	r5,zero,r5
   810e8:	003ff106 	br	810b0 <__alt_data_end+0xfffb7cd0>

000810ec <__udivsi3>:
   810ec:	000d883a 	mov	r6,zero
   810f0:	0080fd01 	jmpi	80fd0 <udivmodsi4>

000810f4 <__umodsi3>:
   810f4:	01800044 	movi	r6,1
   810f8:	0080fd01 	jmpi	80fd0 <udivmodsi4>

000810fc <_printf_r>:
   810fc:	defffd04 	addi	sp,sp,-12
   81100:	dfc00015 	stw	ra,0(sp)
   81104:	d9800115 	stw	r6,4(sp)
   81108:	d9c00215 	stw	r7,8(sp)
   8110c:	280d883a 	mov	r6,r5
   81110:	21400217 	ldw	r5,8(r4)
   81114:	d9c00104 	addi	r7,sp,4
   81118:	00812b80 	call	812b8 <___vfprintf_internal_r>
   8111c:	dfc00017 	ldw	ra,0(sp)
   81120:	dec00304 	addi	sp,sp,12
   81124:	f800283a 	ret

00081128 <printf>:
   81128:	defffc04 	addi	sp,sp,-16
   8112c:	dfc00015 	stw	ra,0(sp)
   81130:	d9400115 	stw	r5,4(sp)
   81134:	d9800215 	stw	r6,8(sp)
   81138:	d9c00315 	stw	r7,12(sp)
   8113c:	00800274 	movhi	r2,9
   81140:	108b4704 	addi	r2,r2,11548
   81144:	10800017 	ldw	r2,0(r2)
   81148:	200b883a 	mov	r5,r4
   8114c:	d9800104 	addi	r6,sp,4
   81150:	11000217 	ldw	r4,8(r2)
   81154:	00833100 	call	83310 <__vfprintf_internal>
   81158:	dfc00017 	ldw	ra,0(sp)
   8115c:	dec00404 	addi	sp,sp,16
   81160:	f800283a 	ret

00081164 <_puts_r>:
   81164:	defff604 	addi	sp,sp,-40
   81168:	dc000715 	stw	r16,28(sp)
   8116c:	2021883a 	mov	r16,r4
   81170:	2809883a 	mov	r4,r5
   81174:	dc400815 	stw	r17,32(sp)
   81178:	dfc00915 	stw	ra,36(sp)
   8117c:	2823883a 	mov	r17,r5
   81180:	00812200 	call	81220 <strlen>
   81184:	81400217 	ldw	r5,8(r16)
   81188:	11000044 	addi	r4,r2,1
   8118c:	d8800115 	stw	r2,4(sp)
   81190:	00800274 	movhi	r2,9
   81194:	2980030b 	ldhu	r6,12(r5)
   81198:	1083b704 	addi	r2,r2,3804
   8119c:	d8800215 	stw	r2,8(sp)
   811a0:	00800044 	movi	r2,1
   811a4:	d8800315 	stw	r2,12(sp)
   811a8:	00800084 	movi	r2,2
   811ac:	d8800515 	stw	r2,20(sp)
   811b0:	dc400015 	stw	r17,0(sp)
   811b4:	d9000615 	stw	r4,24(sp)
   811b8:	dec00415 	stw	sp,16(sp)
   811bc:	3088000c 	andi	r2,r6,8192
   811c0:	1000061e 	bne	r2,zero,811dc <_puts_r+0x78>
   811c4:	29001917 	ldw	r4,100(r5)
   811c8:	00b7ffc4 	movi	r2,-8193
   811cc:	31880014 	ori	r6,r6,8192
   811d0:	2084703a 	and	r2,r4,r2
   811d4:	2980030d 	sth	r6,12(r5)
   811d8:	28801915 	stw	r2,100(r5)
   811dc:	8009883a 	mov	r4,r16
   811e0:	d9800404 	addi	r6,sp,16
   811e4:	00858ec0 	call	858ec <__sfvwrite_r>
   811e8:	1000061e 	bne	r2,zero,81204 <_puts_r+0xa0>
   811ec:	00800284 	movi	r2,10
   811f0:	dfc00917 	ldw	ra,36(sp)
   811f4:	dc400817 	ldw	r17,32(sp)
   811f8:	dc000717 	ldw	r16,28(sp)
   811fc:	dec00a04 	addi	sp,sp,40
   81200:	f800283a 	ret
   81204:	00bfffc4 	movi	r2,-1
   81208:	003ff906 	br	811f0 <__alt_data_end+0xfffb7e10>

0008120c <puts>:
   8120c:	00800274 	movhi	r2,9
   81210:	108b4704 	addi	r2,r2,11548
   81214:	200b883a 	mov	r5,r4
   81218:	11000017 	ldw	r4,0(r2)
   8121c:	00811641 	jmpi	81164 <_puts_r>

00081220 <strlen>:
   81220:	208000cc 	andi	r2,r4,3
   81224:	10002026 	beq	r2,zero,812a8 <strlen+0x88>
   81228:	20800007 	ldb	r2,0(r4)
   8122c:	10002026 	beq	r2,zero,812b0 <strlen+0x90>
   81230:	2005883a 	mov	r2,r4
   81234:	00000206 	br	81240 <strlen+0x20>
   81238:	10c00007 	ldb	r3,0(r2)
   8123c:	18001826 	beq	r3,zero,812a0 <strlen+0x80>
   81240:	10800044 	addi	r2,r2,1
   81244:	10c000cc 	andi	r3,r2,3
   81248:	183ffb1e 	bne	r3,zero,81238 <__alt_data_end+0xfffb7e58>
   8124c:	10c00017 	ldw	r3,0(r2)
   81250:	01ffbff4 	movhi	r7,65279
   81254:	39ffbfc4 	addi	r7,r7,-257
   81258:	00ca303a 	nor	r5,zero,r3
   8125c:	01a02074 	movhi	r6,32897
   81260:	19c7883a 	add	r3,r3,r7
   81264:	31a02004 	addi	r6,r6,-32640
   81268:	1946703a 	and	r3,r3,r5
   8126c:	1986703a 	and	r3,r3,r6
   81270:	1800091e 	bne	r3,zero,81298 <strlen+0x78>
   81274:	10800104 	addi	r2,r2,4
   81278:	10c00017 	ldw	r3,0(r2)
   8127c:	19cb883a 	add	r5,r3,r7
   81280:	00c6303a 	nor	r3,zero,r3
   81284:	28c6703a 	and	r3,r5,r3
   81288:	1986703a 	and	r3,r3,r6
   8128c:	183ff926 	beq	r3,zero,81274 <__alt_data_end+0xfffb7e94>
   81290:	00000106 	br	81298 <strlen+0x78>
   81294:	10800044 	addi	r2,r2,1
   81298:	10c00007 	ldb	r3,0(r2)
   8129c:	183ffd1e 	bne	r3,zero,81294 <__alt_data_end+0xfffb7eb4>
   812a0:	1105c83a 	sub	r2,r2,r4
   812a4:	f800283a 	ret
   812a8:	2005883a 	mov	r2,r4
   812ac:	003fe706 	br	8124c <__alt_data_end+0xfffb7e6c>
   812b0:	0005883a 	mov	r2,zero
   812b4:	f800283a 	ret

000812b8 <___vfprintf_internal_r>:
   812b8:	deffb604 	addi	sp,sp,-296
   812bc:	dfc04915 	stw	ra,292(sp)
   812c0:	ddc04715 	stw	r23,284(sp)
   812c4:	dd804615 	stw	r22,280(sp)
   812c8:	202f883a 	mov	r23,r4
   812cc:	282d883a 	mov	r22,r5
   812d0:	d9802a15 	stw	r6,168(sp)
   812d4:	d9c02d15 	stw	r7,180(sp)
   812d8:	df004815 	stw	fp,288(sp)
   812dc:	dd404515 	stw	r21,276(sp)
   812e0:	dd004415 	stw	r20,272(sp)
   812e4:	dcc04315 	stw	r19,268(sp)
   812e8:	dc804215 	stw	r18,264(sp)
   812ec:	dc404115 	stw	r17,260(sp)
   812f0:	dc004015 	stw	r16,256(sp)
   812f4:	0085fec0 	call	85fec <_localeconv_r>
   812f8:	10800017 	ldw	r2,0(r2)
   812fc:	1009883a 	mov	r4,r2
   81300:	d8803515 	stw	r2,212(sp)
   81304:	00812200 	call	81220 <strlen>
   81308:	d8803815 	stw	r2,224(sp)
   8130c:	b8000226 	beq	r23,zero,81318 <___vfprintf_internal_r+0x60>
   81310:	b8800e17 	ldw	r2,56(r23)
   81314:	1000e226 	beq	r2,zero,816a0 <___vfprintf_internal_r+0x3e8>
   81318:	b080030b 	ldhu	r2,12(r22)
   8131c:	10c8000c 	andi	r3,r2,8192
   81320:	1800061e 	bne	r3,zero,8133c <___vfprintf_internal_r+0x84>
   81324:	b1001917 	ldw	r4,100(r22)
   81328:	00f7ffc4 	movi	r3,-8193
   8132c:	10880014 	ori	r2,r2,8192
   81330:	20c6703a 	and	r3,r4,r3
   81334:	b080030d 	sth	r2,12(r22)
   81338:	b0c01915 	stw	r3,100(r22)
   8133c:	10c0020c 	andi	r3,r2,8
   81340:	1800a826 	beq	r3,zero,815e4 <___vfprintf_internal_r+0x32c>
   81344:	b0c00417 	ldw	r3,16(r22)
   81348:	1800a626 	beq	r3,zero,815e4 <___vfprintf_internal_r+0x32c>
   8134c:	1080068c 	andi	r2,r2,26
   81350:	00c00284 	movi	r3,10
   81354:	10c0ab26 	beq	r2,r3,81604 <___vfprintf_internal_r+0x34c>
   81358:	d8801e04 	addi	r2,sp,120
   8135c:	d8c01dc4 	addi	r3,sp,119
   81360:	d9000404 	addi	r4,sp,16
   81364:	05000274 	movhi	r20,9
   81368:	10cbc83a 	sub	r5,r2,r3
   8136c:	a503c884 	addi	r20,r20,3874
   81370:	d8802815 	stw	r2,160(sp)
   81374:	d8c02915 	stw	r3,164(sp)
   81378:	d9001e15 	stw	r4,120(sp)
   8137c:	d8002015 	stw	zero,128(sp)
   81380:	d8001f15 	stw	zero,124(sp)
   81384:	d8003315 	stw	zero,204(sp)
   81388:	d8003715 	stw	zero,220(sp)
   8138c:	d8003915 	stw	zero,228(sp)
   81390:	2011883a 	mov	r8,r4
   81394:	d8003b15 	stw	zero,236(sp)
   81398:	d8003a15 	stw	zero,232(sp)
   8139c:	d8002f15 	stw	zero,188(sp)
   813a0:	d9403c15 	stw	r5,240(sp)
   813a4:	d8c02a17 	ldw	r3,168(sp)
   813a8:	18800007 	ldb	r2,0(r3)
   813ac:	1001f226 	beq	r2,zero,81b78 <___vfprintf_internal_r+0x8c0>
   813b0:	00c00944 	movi	r3,37
   813b4:	dc002a17 	ldw	r16,168(sp)
   813b8:	10c0021e 	bne	r2,r3,813c4 <___vfprintf_internal_r+0x10c>
   813bc:	00001606 	br	81418 <___vfprintf_internal_r+0x160>
   813c0:	10c08526 	beq	r2,r3,815d8 <___vfprintf_internal_r+0x320>
   813c4:	84000044 	addi	r16,r16,1
   813c8:	80800007 	ldb	r2,0(r16)
   813cc:	103ffc1e 	bne	r2,zero,813c0 <__alt_data_end+0xfffb7fe0>
   813d0:	d9002a17 	ldw	r4,168(sp)
   813d4:	8123c83a 	sub	r17,r16,r4
   813d8:	88000f26 	beq	r17,zero,81418 <___vfprintf_internal_r+0x160>
   813dc:	d8802a17 	ldw	r2,168(sp)
   813e0:	d8c02017 	ldw	r3,128(sp)
   813e4:	44400115 	stw	r17,4(r8)
   813e8:	40800015 	stw	r2,0(r8)
   813ec:	d8801f17 	ldw	r2,124(sp)
   813f0:	1c47883a 	add	r3,r3,r17
   813f4:	d8c02015 	stw	r3,128(sp)
   813f8:	10800044 	addi	r2,r2,1
   813fc:	d8801f15 	stw	r2,124(sp)
   81400:	00c001c4 	movi	r3,7
   81404:	18809416 	blt	r3,r2,81658 <___vfprintf_internal_r+0x3a0>
   81408:	42000204 	addi	r8,r8,8
   8140c:	d8c02f17 	ldw	r3,188(sp)
   81410:	1c47883a 	add	r3,r3,r17
   81414:	d8c02f15 	stw	r3,188(sp)
   81418:	80800007 	ldb	r2,0(r16)
   8141c:	10009526 	beq	r2,zero,81674 <___vfprintf_internal_r+0x3bc>
   81420:	80800044 	addi	r2,r16,1
   81424:	84000047 	ldb	r16,1(r16)
   81428:	0027883a 	mov	r19,zero
   8142c:	0039883a 	mov	fp,zero
   81430:	dcc02b05 	stb	r19,172(sp)
   81434:	d8002785 	stb	zero,158(sp)
   81438:	027fffc4 	movi	r9,-1
   8143c:	d8002e15 	stw	zero,184(sp)
   81440:	04401604 	movi	r17,88
   81444:	04800244 	movi	r18,9
   81448:	da002a15 	stw	r8,168(sp)
   8144c:	e027883a 	mov	r19,fp
   81450:	17000044 	addi	fp,r2,1
   81454:	80bff804 	addi	r2,r16,-32
   81458:	8882ed36 	bltu	r17,r2,82010 <___vfprintf_internal_r+0xd58>
   8145c:	100490ba 	slli	r2,r2,2
   81460:	01000234 	movhi	r4,8
   81464:	21051d04 	addi	r4,r4,5236
   81468:	1105883a 	add	r2,r2,r4
   8146c:	10800017 	ldw	r2,0(r2)
   81470:	1000683a 	jmp	r2
   81474:	00081e58 	cmpnei	zero,zero,8313
   81478:	00082010 	cmplti	zero,zero,8320
   8147c:	00082010 	cmplti	zero,zero,8320
   81480:	00081e74 	movhi	zero,8313
   81484:	00082010 	cmplti	zero,zero,8320
   81488:	00082010 	cmplti	zero,zero,8320
   8148c:	00082010 	cmplti	zero,zero,8320
   81490:	00082010 	cmplti	zero,zero,8320
   81494:	00082010 	cmplti	zero,zero,8320
   81498:	00082010 	cmplti	zero,zero,8320
   8149c:	00081e84 	movi	zero,8314
   814a0:	00081eac 	andhi	zero,zero,8314
   814a4:	00082010 	cmplti	zero,zero,8320
   814a8:	000816ac 	andhi	zero,zero,8282
   814ac:	000816bc 	xorhi	zero,zero,8282
   814b0:	00082010 	cmplti	zero,zero,8320
   814b4:	0008170c 	andi	zero,zero,8284
   814b8:	0008171c 	xori	zero,zero,8284
   814bc:	0008171c 	xori	zero,zero,8284
   814c0:	0008171c 	xori	zero,zero,8284
   814c4:	0008171c 	xori	zero,zero,8284
   814c8:	0008171c 	xori	zero,zero,8284
   814cc:	0008171c 	xori	zero,zero,8284
   814d0:	0008171c 	xori	zero,zero,8284
   814d4:	0008171c 	xori	zero,zero,8284
   814d8:	0008171c 	xori	zero,zero,8284
   814dc:	00082010 	cmplti	zero,zero,8320
   814e0:	00082010 	cmplti	zero,zero,8320
   814e4:	00082010 	cmplti	zero,zero,8320
   814e8:	00082010 	cmplti	zero,zero,8320
   814ec:	00082010 	cmplti	zero,zero,8320
   814f0:	00082010 	cmplti	zero,zero,8320
   814f4:	00082010 	cmplti	zero,zero,8320
   814f8:	00082010 	cmplti	zero,zero,8320
   814fc:	00082010 	cmplti	zero,zero,8320
   81500:	00082010 	cmplti	zero,zero,8320
   81504:	00081760 	cmpeqi	zero,zero,8285
   81508:	00081b80 	call	81b8 <__reset-0x77e48>
   8150c:	00082010 	cmplti	zero,zero,8320
   81510:	00081b80 	call	81b8 <__reset-0x77e48>
   81514:	00082010 	cmplti	zero,zero,8320
   81518:	00082010 	cmplti	zero,zero,8320
   8151c:	00082010 	cmplti	zero,zero,8320
   81520:	00082010 	cmplti	zero,zero,8320
   81524:	00081c28 	cmpgeui	zero,zero,8304
   81528:	00082010 	cmplti	zero,zero,8320
   8152c:	00082010 	cmplti	zero,zero,8320
   81530:	00081c38 	rdprs	zero,zero,8304
   81534:	00082010 	cmplti	zero,zero,8320
   81538:	00082010 	cmplti	zero,zero,8320
   8153c:	00082010 	cmplti	zero,zero,8320
   81540:	00082010 	cmplti	zero,zero,8320
   81544:	00082010 	cmplti	zero,zero,8320
   81548:	00081c78 	rdprs	zero,zero,8305
   8154c:	00082010 	cmplti	zero,zero,8320
   81550:	00082010 	cmplti	zero,zero,8320
   81554:	00081da4 	muli	zero,zero,8310
   81558:	00082010 	cmplti	zero,zero,8320
   8155c:	00082010 	cmplti	zero,zero,8320
   81560:	00082010 	cmplti	zero,zero,8320
   81564:	00082010 	cmplti	zero,zero,8320
   81568:	00082010 	cmplti	zero,zero,8320
   8156c:	00082010 	cmplti	zero,zero,8320
   81570:	00082010 	cmplti	zero,zero,8320
   81574:	00082010 	cmplti	zero,zero,8320
   81578:	00082010 	cmplti	zero,zero,8320
   8157c:	00082010 	cmplti	zero,zero,8320
   81580:	00081e0c 	andi	zero,zero,8312
   81584:	00081cf8 	rdprs	zero,zero,8307
   81588:	00081b80 	call	81b8 <__reset-0x77e48>
   8158c:	00081b80 	call	81b8 <__reset-0x77e48>
   81590:	00081b80 	call	81b8 <__reset-0x77e48>
   81594:	00081d3c 	xorhi	zero,zero,8308
   81598:	00081cf8 	rdprs	zero,zero,8307
   8159c:	00082010 	cmplti	zero,zero,8320
   815a0:	00082010 	cmplti	zero,zero,8320
   815a4:	00081d4c 	andi	zero,zero,8309
   815a8:	00082010 	cmplti	zero,zero,8320
   815ac:	00081d64 	muli	zero,zero,8309
   815b0:	00081fd4 	movui	zero,8319
   815b4:	00081cac 	andhi	zero,zero,8306
   815b8:	00081f88 	cmpgei	zero,zero,8318
   815bc:	00082010 	cmplti	zero,zero,8320
   815c0:	00081ec0 	call	81ec <__reset-0x77e14>
   815c4:	00082010 	cmplti	zero,zero,8320
   815c8:	00081f98 	cmpnei	zero,zero,8318
   815cc:	00082010 	cmplti	zero,zero,8320
   815d0:	00082010 	cmplti	zero,zero,8320
   815d4:	00081f3c 	xorhi	zero,zero,8316
   815d8:	d9402a17 	ldw	r5,168(sp)
   815dc:	8163c83a 	sub	r17,r16,r5
   815e0:	003f7d06 	br	813d8 <__alt_data_end+0xfffb7ff8>
   815e4:	b809883a 	mov	r4,r23
   815e8:	b00b883a 	mov	r5,r22
   815ec:	00833f00 	call	833f0 <__swsetup_r>
   815f0:	10000c1e 	bne	r2,zero,81624 <___vfprintf_internal_r+0x36c>
   815f4:	b080030b 	ldhu	r2,12(r22)
   815f8:	00c00284 	movi	r3,10
   815fc:	1080068c 	andi	r2,r2,26
   81600:	10ff551e 	bne	r2,r3,81358 <__alt_data_end+0xfffb7f78>
   81604:	b080038f 	ldh	r2,14(r22)
   81608:	103f5316 	blt	r2,zero,81358 <__alt_data_end+0xfffb7f78>
   8160c:	d9802a17 	ldw	r6,168(sp)
   81610:	d9c02d17 	ldw	r7,180(sp)
   81614:	b809883a 	mov	r4,r23
   81618:	b00b883a 	mov	r5,r22
   8161c:	00833340 	call	83334 <__sbprintf>
   81620:	00000106 	br	81628 <___vfprintf_internal_r+0x370>
   81624:	00bfffc4 	movi	r2,-1
   81628:	dfc04917 	ldw	ra,292(sp)
   8162c:	df004817 	ldw	fp,288(sp)
   81630:	ddc04717 	ldw	r23,284(sp)
   81634:	dd804617 	ldw	r22,280(sp)
   81638:	dd404517 	ldw	r21,276(sp)
   8163c:	dd004417 	ldw	r20,272(sp)
   81640:	dcc04317 	ldw	r19,268(sp)
   81644:	dc804217 	ldw	r18,264(sp)
   81648:	dc404117 	ldw	r17,260(sp)
   8164c:	dc004017 	ldw	r16,256(sp)
   81650:	dec04a04 	addi	sp,sp,296
   81654:	f800283a 	ret
   81658:	b809883a 	mov	r4,r23
   8165c:	b00b883a 	mov	r5,r22
   81660:	d9801e04 	addi	r6,sp,120
   81664:	00887880 	call	88788 <__sprint_r>
   81668:	1000081e 	bne	r2,zero,8168c <___vfprintf_internal_r+0x3d4>
   8166c:	da000404 	addi	r8,sp,16
   81670:	003f6606 	br	8140c <__alt_data_end+0xfffb802c>
   81674:	d8802017 	ldw	r2,128(sp)
   81678:	10000426 	beq	r2,zero,8168c <___vfprintf_internal_r+0x3d4>
   8167c:	b809883a 	mov	r4,r23
   81680:	b00b883a 	mov	r5,r22
   81684:	d9801e04 	addi	r6,sp,120
   81688:	00887880 	call	88788 <__sprint_r>
   8168c:	b080030b 	ldhu	r2,12(r22)
   81690:	1080100c 	andi	r2,r2,64
   81694:	103fe31e 	bne	r2,zero,81624 <__alt_data_end+0xfffb8244>
   81698:	d8802f17 	ldw	r2,188(sp)
   8169c:	003fe206 	br	81628 <__alt_data_end+0xfffb8248>
   816a0:	b809883a 	mov	r4,r23
   816a4:	00854880 	call	85488 <__sinit>
   816a8:	003f1b06 	br	81318 <__alt_data_end+0xfffb7f38>
   816ac:	e005883a 	mov	r2,fp
   816b0:	9cc00114 	ori	r19,r19,4
   816b4:	e4000007 	ldb	r16,0(fp)
   816b8:	003f6506 	br	81450 <__alt_data_end+0xfffb8070>
   816bc:	e4000007 	ldb	r16,0(fp)
   816c0:	01000a84 	movi	r4,42
   816c4:	e0800044 	addi	r2,fp,1
   816c8:	8106ff26 	beq	r16,r4,832c8 <___vfprintf_internal_r+0x2010>
   816cc:	857ff404 	addi	r21,r16,-48
   816d0:	1039883a 	mov	fp,r2
   816d4:	0013883a 	mov	r9,zero
   816d8:	957f5e36 	bltu	r18,r21,81454 <__alt_data_end+0xfffb8074>
   816dc:	0009883a 	mov	r4,zero
   816e0:	01400284 	movi	r5,10
   816e4:	008b0d80 	call	8b0d8 <__mulsi3>
   816e8:	e4000007 	ldb	r16,0(fp)
   816ec:	a889883a 	add	r4,r21,r2
   816f0:	e7000044 	addi	fp,fp,1
   816f4:	857ff404 	addi	r21,r16,-48
   816f8:	957ff92e 	bgeu	r18,r21,816e0 <__alt_data_end+0xfffb8300>
   816fc:	2013883a 	mov	r9,r4
   81700:	203f540e 	bge	r4,zero,81454 <__alt_data_end+0xfffb8074>
   81704:	027fffc4 	movi	r9,-1
   81708:	003f5206 	br	81454 <__alt_data_end+0xfffb8074>
   8170c:	9cc02014 	ori	r19,r19,128
   81710:	e005883a 	mov	r2,fp
   81714:	e4000007 	ldb	r16,0(fp)
   81718:	003f4d06 	br	81450 <__alt_data_end+0xfffb8070>
   8171c:	857ff404 	addi	r21,r16,-48
   81720:	d8002e15 	stw	zero,184(sp)
   81724:	0009883a 	mov	r4,zero
   81728:	da402c15 	stw	r9,176(sp)
   8172c:	e021883a 	mov	r16,fp
   81730:	01400284 	movi	r5,10
   81734:	008b0d80 	call	8b0d8 <__mulsi3>
   81738:	81400007 	ldb	r5,0(r16)
   8173c:	1549883a 	add	r4,r2,r21
   81740:	e7000044 	addi	fp,fp,1
   81744:	2d7ff404 	addi	r21,r5,-48
   81748:	e021883a 	mov	r16,fp
   8174c:	957ff82e 	bgeu	r18,r21,81730 <__alt_data_end+0xfffb8350>
   81750:	2821883a 	mov	r16,r5
   81754:	d9002e15 	stw	r4,184(sp)
   81758:	da402c17 	ldw	r9,176(sp)
   8175c:	003f3d06 	br	81454 <__alt_data_end+0xfffb8074>
   81760:	da002a17 	ldw	r8,168(sp)
   81764:	df002a15 	stw	fp,168(sp)
   81768:	9839883a 	mov	fp,r19
   8176c:	dcc02b03 	ldbu	r19,172(sp)
   81770:	e7000414 	ori	fp,fp,16
   81774:	e080080c 	andi	r2,fp,32
   81778:	dcc02785 	stb	r19,158(sp)
   8177c:	d8c02d17 	ldw	r3,180(sp)
   81780:	10016526 	beq	r2,zero,81d18 <___vfprintf_internal_r+0xa60>
   81784:	d9002d17 	ldw	r4,180(sp)
   81788:	18800117 	ldw	r2,4(r3)
   8178c:	1c800017 	ldw	r18,0(r3)
   81790:	21000204 	addi	r4,r4,8
   81794:	d9002d15 	stw	r4,180(sp)
   81798:	102b883a 	mov	r21,r2
   8179c:	10044516 	blt	r2,zero,828b4 <___vfprintf_internal_r+0x15fc>
   817a0:	dcc02783 	ldbu	r19,158(sp)
   817a4:	da403215 	stw	r9,200(sp)
   817a8:	00800044 	movi	r2,1
   817ac:	9546b03a 	or	r3,r18,r21
   817b0:	48000216 	blt	r9,zero,817bc <___vfprintf_internal_r+0x504>
   817b4:	013fdfc4 	movi	r4,-129
   817b8:	e138703a 	and	fp,fp,r4
   817bc:	1802211e 	bne	r3,zero,82044 <___vfprintf_internal_r+0xd8c>
   817c0:	48031326 	beq	r9,zero,82410 <___vfprintf_internal_r+0x1158>
   817c4:	10803fcc 	andi	r2,r2,255
   817c8:	00c00044 	movi	r3,1
   817cc:	10c24126 	beq	r2,r3,820d4 <___vfprintf_internal_r+0xe1c>
   817d0:	00c00084 	movi	r3,2
   817d4:	10c33426 	beq	r2,r3,824a8 <___vfprintf_internal_r+0x11f0>
   817d8:	d8c01e04 	addi	r3,sp,120
   817dc:	9008d0fa 	srli	r4,r18,3
   817e0:	a80a977a 	slli	r5,r21,29
   817e4:	a82ad0fa 	srli	r21,r21,3
   817e8:	948001cc 	andi	r18,r18,7
   817ec:	90800c04 	addi	r2,r18,48
   817f0:	18ffffc4 	addi	r3,r3,-1
   817f4:	2924b03a 	or	r18,r5,r4
   817f8:	18800005 	stb	r2,0(r3)
   817fc:	9548b03a 	or	r4,r18,r21
   81800:	203ff61e 	bne	r4,zero,817dc <__alt_data_end+0xfffb83fc>
   81804:	e100004c 	andi	r4,fp,1
   81808:	d8c03115 	stw	r3,196(sp)
   8180c:	2003961e 	bne	r4,zero,82668 <___vfprintf_internal_r+0x13b0>
   81810:	d8802817 	ldw	r2,160(sp)
   81814:	10e3c83a 	sub	r17,r2,r3
   81818:	8805883a 	mov	r2,r17
   8181c:	8a40010e 	bge	r17,r9,81824 <___vfprintf_internal_r+0x56c>
   81820:	4805883a 	mov	r2,r9
   81824:	d8802b15 	stw	r2,172(sp)
   81828:	d8003415 	stw	zero,208(sp)
   8182c:	98803fcc 	andi	r2,r19,255
   81830:	1080201c 	xori	r2,r2,128
   81834:	10bfe004 	addi	r2,r2,-128
   81838:	10000326 	beq	r2,zero,81848 <___vfprintf_internal_r+0x590>
   8183c:	d8c02b17 	ldw	r3,172(sp)
   81840:	18c00044 	addi	r3,r3,1
   81844:	d8c02b15 	stw	r3,172(sp)
   81848:	e0c0008c 	andi	r3,fp,2
   8184c:	d8c02c15 	stw	r3,176(sp)
   81850:	18000326 	beq	r3,zero,81860 <___vfprintf_internal_r+0x5a8>
   81854:	d8c02b17 	ldw	r3,172(sp)
   81858:	18c00084 	addi	r3,r3,2
   8185c:	d8c02b15 	stw	r3,172(sp)
   81860:	e0c0210c 	andi	r3,fp,132
   81864:	d8c03015 	stw	r3,192(sp)
   81868:	1801f41e 	bne	r3,zero,8203c <___vfprintf_internal_r+0xd84>
   8186c:	d9002e17 	ldw	r4,184(sp)
   81870:	d8c02b17 	ldw	r3,172(sp)
   81874:	20ebc83a 	sub	r21,r4,r3
   81878:	0541f00e 	bge	zero,r21,8203c <___vfprintf_internal_r+0xd84>
   8187c:	02400404 	movi	r9,16
   81880:	d8c02017 	ldw	r3,128(sp)
   81884:	d8801f17 	ldw	r2,124(sp)
   81888:	4d45710e 	bge	r9,r21,82e50 <___vfprintf_internal_r+0x1b98>
   8188c:	01400274 	movhi	r5,9
   81890:	2943cc84 	addi	r5,r5,3890
   81894:	d9403615 	stw	r5,216(sp)
   81898:	4827883a 	mov	r19,r9
   8189c:	048001c4 	movi	r18,7
   818a0:	00000306 	br	818b0 <___vfprintf_internal_r+0x5f8>
   818a4:	ad7ffc04 	addi	r21,r21,-16
   818a8:	42000204 	addi	r8,r8,8
   818ac:	9d40130e 	bge	r19,r21,818fc <___vfprintf_internal_r+0x644>
   818b0:	01000274 	movhi	r4,9
   818b4:	18c00404 	addi	r3,r3,16
   818b8:	10800044 	addi	r2,r2,1
   818bc:	2103cc84 	addi	r4,r4,3890
   818c0:	41000015 	stw	r4,0(r8)
   818c4:	44c00115 	stw	r19,4(r8)
   818c8:	d8c02015 	stw	r3,128(sp)
   818cc:	d8801f15 	stw	r2,124(sp)
   818d0:	90bff40e 	bge	r18,r2,818a4 <__alt_data_end+0xfffb84c4>
   818d4:	b809883a 	mov	r4,r23
   818d8:	b00b883a 	mov	r5,r22
   818dc:	d9801e04 	addi	r6,sp,120
   818e0:	00887880 	call	88788 <__sprint_r>
   818e4:	103f691e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   818e8:	ad7ffc04 	addi	r21,r21,-16
   818ec:	d8c02017 	ldw	r3,128(sp)
   818f0:	d8801f17 	ldw	r2,124(sp)
   818f4:	da000404 	addi	r8,sp,16
   818f8:	9d7fed16 	blt	r19,r21,818b0 <__alt_data_end+0xfffb84d0>
   818fc:	d9403617 	ldw	r5,216(sp)
   81900:	a8c7883a 	add	r3,r21,r3
   81904:	10800044 	addi	r2,r2,1
   81908:	41400015 	stw	r5,0(r8)
   8190c:	45400115 	stw	r21,4(r8)
   81910:	d8c02015 	stw	r3,128(sp)
   81914:	d8801f15 	stw	r2,124(sp)
   81918:	010001c4 	movi	r4,7
   8191c:	20832716 	blt	r4,r2,825bc <___vfprintf_internal_r+0x1304>
   81920:	d8802787 	ldb	r2,158(sp)
   81924:	42000204 	addi	r8,r8,8
   81928:	10000c26 	beq	r2,zero,8195c <___vfprintf_internal_r+0x6a4>
   8192c:	d8801f17 	ldw	r2,124(sp)
   81930:	d9002784 	addi	r4,sp,158
   81934:	18c00044 	addi	r3,r3,1
   81938:	10800044 	addi	r2,r2,1
   8193c:	41000015 	stw	r4,0(r8)
   81940:	01000044 	movi	r4,1
   81944:	41000115 	stw	r4,4(r8)
   81948:	d8c02015 	stw	r3,128(sp)
   8194c:	d8801f15 	stw	r2,124(sp)
   81950:	010001c4 	movi	r4,7
   81954:	2082c016 	blt	r4,r2,82458 <___vfprintf_internal_r+0x11a0>
   81958:	42000204 	addi	r8,r8,8
   8195c:	d8802c17 	ldw	r2,176(sp)
   81960:	10000c26 	beq	r2,zero,81994 <___vfprintf_internal_r+0x6dc>
   81964:	d8801f17 	ldw	r2,124(sp)
   81968:	d9002704 	addi	r4,sp,156
   8196c:	18c00084 	addi	r3,r3,2
   81970:	10800044 	addi	r2,r2,1
   81974:	41000015 	stw	r4,0(r8)
   81978:	01000084 	movi	r4,2
   8197c:	41000115 	stw	r4,4(r8)
   81980:	d8c02015 	stw	r3,128(sp)
   81984:	d8801f15 	stw	r2,124(sp)
   81988:	010001c4 	movi	r4,7
   8198c:	2082ba16 	blt	r4,r2,82478 <___vfprintf_internal_r+0x11c0>
   81990:	42000204 	addi	r8,r8,8
   81994:	d9003017 	ldw	r4,192(sp)
   81998:	00802004 	movi	r2,128
   8199c:	20821c26 	beq	r4,r2,82210 <___vfprintf_internal_r+0xf58>
   819a0:	d9403217 	ldw	r5,200(sp)
   819a4:	2c67c83a 	sub	r19,r5,r17
   819a8:	04c0260e 	bge	zero,r19,81a44 <___vfprintf_internal_r+0x78c>
   819ac:	05400404 	movi	r21,16
   819b0:	d8801f17 	ldw	r2,124(sp)
   819b4:	acc46e0e 	bge	r21,r19,82b70 <___vfprintf_internal_r+0x18b8>
   819b8:	01400274 	movhi	r5,9
   819bc:	2943c884 	addi	r5,r5,3874
   819c0:	d9402c15 	stw	r5,176(sp)
   819c4:	048001c4 	movi	r18,7
   819c8:	00000306 	br	819d8 <___vfprintf_internal_r+0x720>
   819cc:	9cfffc04 	addi	r19,r19,-16
   819d0:	42000204 	addi	r8,r8,8
   819d4:	acc0110e 	bge	r21,r19,81a1c <___vfprintf_internal_r+0x764>
   819d8:	18c00404 	addi	r3,r3,16
   819dc:	10800044 	addi	r2,r2,1
   819e0:	45000015 	stw	r20,0(r8)
   819e4:	45400115 	stw	r21,4(r8)
   819e8:	d8c02015 	stw	r3,128(sp)
   819ec:	d8801f15 	stw	r2,124(sp)
   819f0:	90bff60e 	bge	r18,r2,819cc <__alt_data_end+0xfffb85ec>
   819f4:	b809883a 	mov	r4,r23
   819f8:	b00b883a 	mov	r5,r22
   819fc:	d9801e04 	addi	r6,sp,120
   81a00:	00887880 	call	88788 <__sprint_r>
   81a04:	103f211e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   81a08:	9cfffc04 	addi	r19,r19,-16
   81a0c:	d8c02017 	ldw	r3,128(sp)
   81a10:	d8801f17 	ldw	r2,124(sp)
   81a14:	da000404 	addi	r8,sp,16
   81a18:	acffef16 	blt	r21,r19,819d8 <__alt_data_end+0xfffb85f8>
   81a1c:	d9002c17 	ldw	r4,176(sp)
   81a20:	1cc7883a 	add	r3,r3,r19
   81a24:	10800044 	addi	r2,r2,1
   81a28:	41000015 	stw	r4,0(r8)
   81a2c:	44c00115 	stw	r19,4(r8)
   81a30:	d8c02015 	stw	r3,128(sp)
   81a34:	d8801f15 	stw	r2,124(sp)
   81a38:	010001c4 	movi	r4,7
   81a3c:	20827e16 	blt	r4,r2,82438 <___vfprintf_internal_r+0x1180>
   81a40:	42000204 	addi	r8,r8,8
   81a44:	e080400c 	andi	r2,fp,256
   81a48:	1001a81e 	bne	r2,zero,820ec <___vfprintf_internal_r+0xe34>
   81a4c:	d8801f17 	ldw	r2,124(sp)
   81a50:	d9403117 	ldw	r5,196(sp)
   81a54:	1c47883a 	add	r3,r3,r17
   81a58:	10800044 	addi	r2,r2,1
   81a5c:	41400015 	stw	r5,0(r8)
   81a60:	44400115 	stw	r17,4(r8)
   81a64:	d8c02015 	stw	r3,128(sp)
   81a68:	d8801f15 	stw	r2,124(sp)
   81a6c:	010001c4 	movi	r4,7
   81a70:	20825916 	blt	r4,r2,823d8 <___vfprintf_internal_r+0x1120>
   81a74:	42000204 	addi	r8,r8,8
   81a78:	e080010c 	andi	r2,fp,4
   81a7c:	10003126 	beq	r2,zero,81b44 <___vfprintf_internal_r+0x88c>
   81a80:	d8802e17 	ldw	r2,184(sp)
   81a84:	d9002b17 	ldw	r4,172(sp)
   81a88:	1121c83a 	sub	r16,r2,r4
   81a8c:	04002d0e 	bge	zero,r16,81b44 <___vfprintf_internal_r+0x88c>
   81a90:	04400404 	movi	r17,16
   81a94:	d8801f17 	ldw	r2,124(sp)
   81a98:	8c053f0e 	bge	r17,r16,82f98 <___vfprintf_internal_r+0x1ce0>
   81a9c:	01000274 	movhi	r4,9
   81aa0:	2103cc84 	addi	r4,r4,3890
   81aa4:	d9003615 	stw	r4,216(sp)
   81aa8:	048001c4 	movi	r18,7
   81aac:	00000306 	br	81abc <___vfprintf_internal_r+0x804>
   81ab0:	843ffc04 	addi	r16,r16,-16
   81ab4:	42000204 	addi	r8,r8,8
   81ab8:	8c00130e 	bge	r17,r16,81b08 <___vfprintf_internal_r+0x850>
   81abc:	01400274 	movhi	r5,9
   81ac0:	18c00404 	addi	r3,r3,16
   81ac4:	10800044 	addi	r2,r2,1
   81ac8:	2943cc84 	addi	r5,r5,3890
   81acc:	41400015 	stw	r5,0(r8)
   81ad0:	44400115 	stw	r17,4(r8)
   81ad4:	d8c02015 	stw	r3,128(sp)
   81ad8:	d8801f15 	stw	r2,124(sp)
   81adc:	90bff40e 	bge	r18,r2,81ab0 <__alt_data_end+0xfffb86d0>
   81ae0:	b809883a 	mov	r4,r23
   81ae4:	b00b883a 	mov	r5,r22
   81ae8:	d9801e04 	addi	r6,sp,120
   81aec:	00887880 	call	88788 <__sprint_r>
   81af0:	103ee61e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   81af4:	843ffc04 	addi	r16,r16,-16
   81af8:	d8c02017 	ldw	r3,128(sp)
   81afc:	d8801f17 	ldw	r2,124(sp)
   81b00:	da000404 	addi	r8,sp,16
   81b04:	8c3fed16 	blt	r17,r16,81abc <__alt_data_end+0xfffb86dc>
   81b08:	d9003617 	ldw	r4,216(sp)
   81b0c:	1c07883a 	add	r3,r3,r16
   81b10:	10800044 	addi	r2,r2,1
   81b14:	41000015 	stw	r4,0(r8)
   81b18:	44000115 	stw	r16,4(r8)
   81b1c:	d8c02015 	stw	r3,128(sp)
   81b20:	d8801f15 	stw	r2,124(sp)
   81b24:	010001c4 	movi	r4,7
   81b28:	2080060e 	bge	r4,r2,81b44 <___vfprintf_internal_r+0x88c>
   81b2c:	b809883a 	mov	r4,r23
   81b30:	b00b883a 	mov	r5,r22
   81b34:	d9801e04 	addi	r6,sp,120
   81b38:	00887880 	call	88788 <__sprint_r>
   81b3c:	103ed31e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   81b40:	d8c02017 	ldw	r3,128(sp)
   81b44:	df002b17 	ldw	fp,172(sp)
   81b48:	d9402e17 	ldw	r5,184(sp)
   81b4c:	e140010e 	bge	fp,r5,81b54 <___vfprintf_internal_r+0x89c>
   81b50:	2839883a 	mov	fp,r5
   81b54:	d8802f17 	ldw	r2,188(sp)
   81b58:	1705883a 	add	r2,r2,fp
   81b5c:	d8802f15 	stw	r2,188(sp)
   81b60:	1802251e 	bne	r3,zero,823f8 <___vfprintf_internal_r+0x1140>
   81b64:	d8c02a17 	ldw	r3,168(sp)
   81b68:	d8001f15 	stw	zero,124(sp)
   81b6c:	da000404 	addi	r8,sp,16
   81b70:	18800007 	ldb	r2,0(r3)
   81b74:	103e0e1e 	bne	r2,zero,813b0 <__alt_data_end+0xfffb7fd0>
   81b78:	dc002a17 	ldw	r16,168(sp)
   81b7c:	003e2606 	br	81418 <__alt_data_end+0xfffb8038>
   81b80:	d9002d17 	ldw	r4,180(sp)
   81b84:	d9402d17 	ldw	r5,180(sp)
   81b88:	da002a17 	ldw	r8,168(sp)
   81b8c:	21000017 	ldw	r4,0(r4)
   81b90:	29400117 	ldw	r5,4(r5)
   81b94:	df002a15 	stw	fp,168(sp)
   81b98:	9839883a 	mov	fp,r19
   81b9c:	dcc02b03 	ldbu	r19,172(sp)
   81ba0:	d9003715 	stw	r4,220(sp)
   81ba4:	d9403915 	stw	r5,228(sp)
   81ba8:	da003f15 	stw	r8,252(sp)
   81bac:	da403e15 	stw	r9,248(sp)
   81bb0:	dcc02785 	stb	r19,158(sp)
   81bb4:	00883e40 	call	883e4 <__fpclassifyd>
   81bb8:	d8c02d17 	ldw	r3,180(sp)
   81bbc:	04400044 	movi	r17,1
   81bc0:	da003f17 	ldw	r8,252(sp)
   81bc4:	1c800204 	addi	r18,r3,8
   81bc8:	da403e17 	ldw	r9,248(sp)
   81bcc:	d9003717 	ldw	r4,220(sp)
   81bd0:	d9403917 	ldw	r5,228(sp)
   81bd4:	1443411e 	bne	r2,r17,828dc <___vfprintf_internal_r+0x1624>
   81bd8:	000d883a 	mov	r6,zero
   81bdc:	000f883a 	mov	r7,zero
   81be0:	008c4800 	call	8c480 <__ledf2>
   81be4:	da003f17 	ldw	r8,252(sp)
   81be8:	10050d16 	blt	r2,zero,83020 <___vfprintf_internal_r+0x1d68>
   81bec:	dcc02783 	ldbu	r19,158(sp)
   81bf0:	008011c4 	movi	r2,71
   81bf4:	1404590e 	bge	r2,r16,82d5c <___vfprintf_internal_r+0x1aa4>
   81bf8:	01400274 	movhi	r5,9
   81bfc:	2943b904 	addi	r5,r5,3812
   81c00:	d9403115 	stw	r5,196(sp)
   81c04:	00c000c4 	movi	r3,3
   81c08:	00bfdfc4 	movi	r2,-129
   81c0c:	d8c02b15 	stw	r3,172(sp)
   81c10:	e0b8703a 	and	fp,fp,r2
   81c14:	dc802d15 	stw	r18,180(sp)
   81c18:	1823883a 	mov	r17,r3
   81c1c:	d8003215 	stw	zero,200(sp)
   81c20:	d8003415 	stw	zero,208(sp)
   81c24:	003f0106 	br	8182c <__alt_data_end+0xfffb844c>
   81c28:	9cc00214 	ori	r19,r19,8
   81c2c:	e005883a 	mov	r2,fp
   81c30:	e4000007 	ldb	r16,0(fp)
   81c34:	003e0606 	br	81450 <__alt_data_end+0xfffb8070>
   81c38:	da002a17 	ldw	r8,168(sp)
   81c3c:	df002a15 	stw	fp,168(sp)
   81c40:	9f000414 	ori	fp,r19,16
   81c44:	e080080c 	andi	r2,fp,32
   81c48:	1000e726 	beq	r2,zero,81fe8 <___vfprintf_internal_r+0xd30>
   81c4c:	d9402d17 	ldw	r5,180(sp)
   81c50:	0005883a 	mov	r2,zero
   81c54:	2c800017 	ldw	r18,0(r5)
   81c58:	2d400117 	ldw	r21,4(r5)
   81c5c:	29400204 	addi	r5,r5,8
   81c60:	d9402d15 	stw	r5,180(sp)
   81c64:	9546b03a 	or	r3,r18,r21
   81c68:	d8002785 	stb	zero,158(sp)
   81c6c:	da403215 	stw	r9,200(sp)
   81c70:	0027883a 	mov	r19,zero
   81c74:	003ece06 	br	817b0 <__alt_data_end+0xfffb83d0>
   81c78:	da002a17 	ldw	r8,168(sp)
   81c7c:	df002a15 	stw	fp,168(sp)
   81c80:	9f000414 	ori	fp,r19,16
   81c84:	e080080c 	andi	r2,fp,32
   81c88:	1000c826 	beq	r2,zero,81fac <___vfprintf_internal_r+0xcf4>
   81c8c:	d9002d17 	ldw	r4,180(sp)
   81c90:	00800044 	movi	r2,1
   81c94:	24800017 	ldw	r18,0(r4)
   81c98:	25400117 	ldw	r21,4(r4)
   81c9c:	21000204 	addi	r4,r4,8
   81ca0:	d9002d15 	stw	r4,180(sp)
   81ca4:	9546b03a 	or	r3,r18,r21
   81ca8:	003fef06 	br	81c68 <__alt_data_end+0xfffb8888>
   81cac:	d9402d17 	ldw	r5,180(sp)
   81cb0:	00800c04 	movi	r2,48
   81cb4:	d8802705 	stb	r2,156(sp)
   81cb8:	2c800017 	ldw	r18,0(r5)
   81cbc:	00801e04 	movi	r2,120
   81cc0:	d8802745 	stb	r2,157(sp)
   81cc4:	00800274 	movhi	r2,9
   81cc8:	1083c104 	addi	r2,r2,3844
   81ccc:	29400104 	addi	r5,r5,4
   81cd0:	da002a17 	ldw	r8,168(sp)
   81cd4:	d8803b15 	stw	r2,236(sp)
   81cd8:	df002a15 	stw	fp,168(sp)
   81cdc:	002b883a 	mov	r21,zero
   81ce0:	9f000094 	ori	fp,r19,2
   81ce4:	d9402d15 	stw	r5,180(sp)
   81ce8:	00800084 	movi	r2,2
   81cec:	04001e04 	movi	r16,120
   81cf0:	9007883a 	mov	r3,r18
   81cf4:	003fdc06 	br	81c68 <__alt_data_end+0xfffb8888>
   81cf8:	da002a17 	ldw	r8,168(sp)
   81cfc:	df002a15 	stw	fp,168(sp)
   81d00:	9839883a 	mov	fp,r19
   81d04:	dcc02b03 	ldbu	r19,172(sp)
   81d08:	e080080c 	andi	r2,fp,32
   81d0c:	d8c02d17 	ldw	r3,180(sp)
   81d10:	dcc02785 	stb	r19,158(sp)
   81d14:	103e9b1e 	bne	r2,zero,81784 <__alt_data_end+0xfffb83a4>
   81d18:	e080040c 	andi	r2,fp,16
   81d1c:	10036626 	beq	r2,zero,82ab8 <___vfprintf_internal_r+0x1800>
   81d20:	1c800017 	ldw	r18,0(r3)
   81d24:	d9402d17 	ldw	r5,180(sp)
   81d28:	902bd7fa 	srai	r21,r18,31
   81d2c:	29400104 	addi	r5,r5,4
   81d30:	d9402d15 	stw	r5,180(sp)
   81d34:	a805883a 	mov	r2,r21
   81d38:	003e9806 	br	8179c <__alt_data_end+0xfffb83bc>
   81d3c:	9cc01014 	ori	r19,r19,64
   81d40:	e005883a 	mov	r2,fp
   81d44:	e4000007 	ldb	r16,0(fp)
   81d48:	003dc106 	br	81450 <__alt_data_end+0xfffb8070>
   81d4c:	e4000007 	ldb	r16,0(fp)
   81d50:	00801b04 	movi	r2,108
   81d54:	80841426 	beq	r16,r2,82da8 <___vfprintf_internal_r+0x1af0>
   81d58:	9cc00414 	ori	r19,r19,16
   81d5c:	e005883a 	mov	r2,fp
   81d60:	003dbb06 	br	81450 <__alt_data_end+0xfffb8070>
   81d64:	da002a17 	ldw	r8,168(sp)
   81d68:	df002a15 	stw	fp,168(sp)
   81d6c:	9839883a 	mov	fp,r19
   81d70:	dcc02b03 	ldbu	r19,172(sp)
   81d74:	e080080c 	andi	r2,fp,32
   81d78:	dcc02785 	stb	r19,158(sp)
   81d7c:	10036126 	beq	r2,zero,82b04 <___vfprintf_internal_r+0x184c>
   81d80:	d9402d17 	ldw	r5,180(sp)
   81d84:	d9002f17 	ldw	r4,188(sp)
   81d88:	28800017 	ldw	r2,0(r5)
   81d8c:	2007d7fa 	srai	r3,r4,31
   81d90:	29400104 	addi	r5,r5,4
   81d94:	d9402d15 	stw	r5,180(sp)
   81d98:	11000015 	stw	r4,0(r2)
   81d9c:	10c00115 	stw	r3,4(r2)
   81da0:	003d8006 	br	813a4 <__alt_data_end+0xfffb7fc4>
   81da4:	da002a17 	ldw	r8,168(sp)
   81da8:	df002a15 	stw	fp,168(sp)
   81dac:	9839883a 	mov	fp,r19
   81db0:	dcc02b03 	ldbu	r19,172(sp)
   81db4:	01400274 	movhi	r5,9
   81db8:	2943bc04 	addi	r5,r5,3824
   81dbc:	dcc02785 	stb	r19,158(sp)
   81dc0:	d9403b15 	stw	r5,236(sp)
   81dc4:	e0c0080c 	andi	r3,fp,32
   81dc8:	d8802d17 	ldw	r2,180(sp)
   81dcc:	18006626 	beq	r3,zero,81f68 <___vfprintf_internal_r+0xcb0>
   81dd0:	d9402d17 	ldw	r5,180(sp)
   81dd4:	14800017 	ldw	r18,0(r2)
   81dd8:	15400117 	ldw	r21,4(r2)
   81ddc:	29400204 	addi	r5,r5,8
   81de0:	d9402d15 	stw	r5,180(sp)
   81de4:	e080004c 	andi	r2,fp,1
   81de8:	1001fd26 	beq	r2,zero,825e0 <___vfprintf_internal_r+0x1328>
   81dec:	9546b03a 	or	r3,r18,r21
   81df0:	18034f26 	beq	r3,zero,82b30 <___vfprintf_internal_r+0x1878>
   81df4:	00800c04 	movi	r2,48
   81df8:	d8802705 	stb	r2,156(sp)
   81dfc:	dc002745 	stb	r16,157(sp)
   81e00:	e7000094 	ori	fp,fp,2
   81e04:	00800084 	movi	r2,2
   81e08:	003f9706 	br	81c68 <__alt_data_end+0xfffb8888>
   81e0c:	d8c02d17 	ldw	r3,180(sp)
   81e10:	d9002d17 	ldw	r4,180(sp)
   81e14:	da002a17 	ldw	r8,168(sp)
   81e18:	18800017 	ldw	r2,0(r3)
   81e1c:	21000104 	addi	r4,r4,4
   81e20:	00c00044 	movi	r3,1
   81e24:	df002a15 	stw	fp,168(sp)
   81e28:	d8c02b15 	stw	r3,172(sp)
   81e2c:	9839883a 	mov	fp,r19
   81e30:	d8002785 	stb	zero,158(sp)
   81e34:	d8801405 	stb	r2,80(sp)
   81e38:	d9002d15 	stw	r4,180(sp)
   81e3c:	1823883a 	mov	r17,r3
   81e40:	d8c01404 	addi	r3,sp,80
   81e44:	d8003215 	stw	zero,200(sp)
   81e48:	d8003415 	stw	zero,208(sp)
   81e4c:	d8c03115 	stw	r3,196(sp)
   81e50:	0005883a 	mov	r2,zero
   81e54:	003e7c06 	br	81848 <__alt_data_end+0xfffb8468>
   81e58:	d8802b07 	ldb	r2,172(sp)
   81e5c:	1003011e 	bne	r2,zero,82a64 <___vfprintf_internal_r+0x17ac>
   81e60:	00c00804 	movi	r3,32
   81e64:	d8c02b05 	stb	r3,172(sp)
   81e68:	e005883a 	mov	r2,fp
   81e6c:	e4000007 	ldb	r16,0(fp)
   81e70:	003d7706 	br	81450 <__alt_data_end+0xfffb8070>
   81e74:	9cc00054 	ori	r19,r19,1
   81e78:	e005883a 	mov	r2,fp
   81e7c:	e4000007 	ldb	r16,0(fp)
   81e80:	003d7306 	br	81450 <__alt_data_end+0xfffb8070>
   81e84:	d9002d17 	ldw	r4,180(sp)
   81e88:	d9402d17 	ldw	r5,180(sp)
   81e8c:	21000017 	ldw	r4,0(r4)
   81e90:	28c00104 	addi	r3,r5,4
   81e94:	d9002e15 	stw	r4,184(sp)
   81e98:	2003bd16 	blt	r4,zero,82d90 <___vfprintf_internal_r+0x1ad8>
   81e9c:	d8c02d15 	stw	r3,180(sp)
   81ea0:	e005883a 	mov	r2,fp
   81ea4:	e4000007 	ldb	r16,0(fp)
   81ea8:	003d6906 	br	81450 <__alt_data_end+0xfffb8070>
   81eac:	00c00ac4 	movi	r3,43
   81eb0:	d8c02b05 	stb	r3,172(sp)
   81eb4:	e005883a 	mov	r2,fp
   81eb8:	e4000007 	ldb	r16,0(fp)
   81ebc:	003d6406 	br	81450 <__alt_data_end+0xfffb8070>
   81ec0:	d8c02d17 	ldw	r3,180(sp)
   81ec4:	d9002d17 	ldw	r4,180(sp)
   81ec8:	da002a17 	ldw	r8,168(sp)
   81ecc:	18c00017 	ldw	r3,0(r3)
   81ed0:	df002a15 	stw	fp,168(sp)
   81ed4:	d8002785 	stb	zero,158(sp)
   81ed8:	d8c03115 	stw	r3,196(sp)
   81edc:	9839883a 	mov	fp,r19
   81ee0:	24800104 	addi	r18,r4,4
   81ee4:	18041b26 	beq	r3,zero,82f54 <___vfprintf_internal_r+0x1c9c>
   81ee8:	d9003117 	ldw	r4,196(sp)
   81eec:	4803be16 	blt	r9,zero,82de8 <___vfprintf_internal_r+0x1b30>
   81ef0:	480d883a 	mov	r6,r9
   81ef4:	000b883a 	mov	r5,zero
   81ef8:	da003f15 	stw	r8,252(sp)
   81efc:	da403e15 	stw	r9,248(sp)
   81f00:	00869800 	call	86980 <memchr>
   81f04:	da003f17 	ldw	r8,252(sp)
   81f08:	da403e17 	ldw	r9,248(sp)
   81f0c:	10045426 	beq	r2,zero,83060 <___vfprintf_internal_r+0x1da8>
   81f10:	d8c03117 	ldw	r3,196(sp)
   81f14:	10e3c83a 	sub	r17,r2,r3
   81f18:	4c436a16 	blt	r9,r17,82cc4 <___vfprintf_internal_r+0x1a0c>
   81f1c:	8805883a 	mov	r2,r17
   81f20:	8803b616 	blt	r17,zero,82dfc <___vfprintf_internal_r+0x1b44>
   81f24:	dcc02783 	ldbu	r19,158(sp)
   81f28:	d8802b15 	stw	r2,172(sp)
   81f2c:	dc802d15 	stw	r18,180(sp)
   81f30:	d8003215 	stw	zero,200(sp)
   81f34:	d8003415 	stw	zero,208(sp)
   81f38:	003e3c06 	br	8182c <__alt_data_end+0xfffb844c>
   81f3c:	da002a17 	ldw	r8,168(sp)
   81f40:	df002a15 	stw	fp,168(sp)
   81f44:	9839883a 	mov	fp,r19
   81f48:	dcc02b03 	ldbu	r19,172(sp)
   81f4c:	01000274 	movhi	r4,9
   81f50:	2103c104 	addi	r4,r4,3844
   81f54:	d9003b15 	stw	r4,236(sp)
   81f58:	dcc02785 	stb	r19,158(sp)
   81f5c:	e0c0080c 	andi	r3,fp,32
   81f60:	d8802d17 	ldw	r2,180(sp)
   81f64:	183f9a1e 	bne	r3,zero,81dd0 <__alt_data_end+0xfffb89f0>
   81f68:	e0c0040c 	andi	r3,fp,16
   81f6c:	1802c026 	beq	r3,zero,82a70 <___vfprintf_internal_r+0x17b8>
   81f70:	d8c02d17 	ldw	r3,180(sp)
   81f74:	14800017 	ldw	r18,0(r2)
   81f78:	002b883a 	mov	r21,zero
   81f7c:	18c00104 	addi	r3,r3,4
   81f80:	d8c02d15 	stw	r3,180(sp)
   81f84:	003f9706 	br	81de4 <__alt_data_end+0xfffb8a04>
   81f88:	9cc00814 	ori	r19,r19,32
   81f8c:	e005883a 	mov	r2,fp
   81f90:	e4000007 	ldb	r16,0(fp)
   81f94:	003d2e06 	br	81450 <__alt_data_end+0xfffb8070>
   81f98:	da002a17 	ldw	r8,168(sp)
   81f9c:	df002a15 	stw	fp,168(sp)
   81fa0:	9839883a 	mov	fp,r19
   81fa4:	e080080c 	andi	r2,fp,32
   81fa8:	103f381e 	bne	r2,zero,81c8c <__alt_data_end+0xfffb88ac>
   81fac:	e080040c 	andi	r2,fp,16
   81fb0:	1002b726 	beq	r2,zero,82a90 <___vfprintf_internal_r+0x17d8>
   81fb4:	d9402d17 	ldw	r5,180(sp)
   81fb8:	002b883a 	mov	r21,zero
   81fbc:	00800044 	movi	r2,1
   81fc0:	2c800017 	ldw	r18,0(r5)
   81fc4:	29400104 	addi	r5,r5,4
   81fc8:	d9402d15 	stw	r5,180(sp)
   81fcc:	9007883a 	mov	r3,r18
   81fd0:	003f2506 	br	81c68 <__alt_data_end+0xfffb8888>
   81fd4:	da002a17 	ldw	r8,168(sp)
   81fd8:	df002a15 	stw	fp,168(sp)
   81fdc:	9839883a 	mov	fp,r19
   81fe0:	e080080c 	andi	r2,fp,32
   81fe4:	103f191e 	bne	r2,zero,81c4c <__alt_data_end+0xfffb886c>
   81fe8:	e080040c 	andi	r2,fp,16
   81fec:	1002bb26 	beq	r2,zero,82adc <___vfprintf_internal_r+0x1824>
   81ff0:	d8802d17 	ldw	r2,180(sp)
   81ff4:	002b883a 	mov	r21,zero
   81ff8:	14800017 	ldw	r18,0(r2)
   81ffc:	10800104 	addi	r2,r2,4
   82000:	d8802d15 	stw	r2,180(sp)
   82004:	9007883a 	mov	r3,r18
   82008:	0005883a 	mov	r2,zero
   8200c:	003f1606 	br	81c68 <__alt_data_end+0xfffb8888>
   82010:	da002a17 	ldw	r8,168(sp)
   82014:	df002a15 	stw	fp,168(sp)
   82018:	9839883a 	mov	fp,r19
   8201c:	dcc02b03 	ldbu	r19,172(sp)
   82020:	dcc02785 	stb	r19,158(sp)
   82024:	803d9326 	beq	r16,zero,81674 <__alt_data_end+0xfffb8294>
   82028:	00c00044 	movi	r3,1
   8202c:	d8c02b15 	stw	r3,172(sp)
   82030:	dc001405 	stb	r16,80(sp)
   82034:	d8002785 	stb	zero,158(sp)
   82038:	003f8006 	br	81e3c <__alt_data_end+0xfffb8a5c>
   8203c:	d8c02017 	ldw	r3,128(sp)
   82040:	003e3906 	br	81928 <__alt_data_end+0xfffb8548>
   82044:	10803fcc 	andi	r2,r2,255
   82048:	00c00044 	movi	r3,1
   8204c:	10fde01e 	bne	r2,r3,817d0 <__alt_data_end+0xfffb83f0>
   82050:	a800021e 	bne	r21,zero,8205c <___vfprintf_internal_r+0xda4>
   82054:	00800244 	movi	r2,9
   82058:	14801e2e 	bgeu	r2,r18,820d4 <___vfprintf_internal_r+0xe1c>
   8205c:	dc002b15 	stw	r16,172(sp)
   82060:	dc401e04 	addi	r17,sp,120
   82064:	9021883a 	mov	r16,r18
   82068:	da402c15 	stw	r9,176(sp)
   8206c:	a825883a 	mov	r18,r21
   82070:	402b883a 	mov	r21,r8
   82074:	8009883a 	mov	r4,r16
   82078:	900b883a 	mov	r5,r18
   8207c:	01800284 	movi	r6,10
   82080:	000f883a 	mov	r7,zero
   82084:	008aabc0 	call	8aabc <__umoddi3>
   82088:	10800c04 	addi	r2,r2,48
   8208c:	8c7fffc4 	addi	r17,r17,-1
   82090:	8009883a 	mov	r4,r16
   82094:	900b883a 	mov	r5,r18
   82098:	01800284 	movi	r6,10
   8209c:	000f883a 	mov	r7,zero
   820a0:	88800005 	stb	r2,0(r17)
   820a4:	008a47c0 	call	8a47c <__udivdi3>
   820a8:	1021883a 	mov	r16,r2
   820ac:	10c4b03a 	or	r2,r2,r3
   820b0:	1825883a 	mov	r18,r3
   820b4:	103fef1e 	bne	r2,zero,82074 <__alt_data_end+0xfffb8c94>
   820b8:	d9002817 	ldw	r4,160(sp)
   820bc:	dc403115 	stw	r17,196(sp)
   820c0:	dc002b17 	ldw	r16,172(sp)
   820c4:	da402c17 	ldw	r9,176(sp)
   820c8:	a811883a 	mov	r8,r21
   820cc:	2463c83a 	sub	r17,r4,r17
   820d0:	003dd106 	br	81818 <__alt_data_end+0xfffb8438>
   820d4:	94800c04 	addi	r18,r18,48
   820d8:	d8c01dc4 	addi	r3,sp,119
   820dc:	dc801dc5 	stb	r18,119(sp)
   820e0:	dc403c17 	ldw	r17,240(sp)
   820e4:	d8c03115 	stw	r3,196(sp)
   820e8:	003dcb06 	br	81818 <__alt_data_end+0xfffb8438>
   820ec:	00801944 	movi	r2,101
   820f0:	1400720e 	bge	r2,r16,822bc <___vfprintf_internal_r+0x1004>
   820f4:	d9003717 	ldw	r4,220(sp)
   820f8:	d9403917 	ldw	r5,228(sp)
   820fc:	000d883a 	mov	r6,zero
   82100:	000f883a 	mov	r7,zero
   82104:	d8c03d15 	stw	r3,244(sp)
   82108:	da003f15 	stw	r8,252(sp)
   8210c:	008c31c0 	call	8c31c <__eqdf2>
   82110:	d8c03d17 	ldw	r3,244(sp)
   82114:	da003f17 	ldw	r8,252(sp)
   82118:	1000f41e 	bne	r2,zero,824ec <___vfprintf_internal_r+0x1234>
   8211c:	d8801f17 	ldw	r2,124(sp)
   82120:	01000274 	movhi	r4,9
   82124:	2103c804 	addi	r4,r4,3872
   82128:	18c00044 	addi	r3,r3,1
   8212c:	10800044 	addi	r2,r2,1
   82130:	41000015 	stw	r4,0(r8)
   82134:	01000044 	movi	r4,1
   82138:	41000115 	stw	r4,4(r8)
   8213c:	d8c02015 	stw	r3,128(sp)
   82140:	d8801f15 	stw	r2,124(sp)
   82144:	010001c4 	movi	r4,7
   82148:	20828d16 	blt	r4,r2,82b80 <___vfprintf_internal_r+0x18c8>
   8214c:	42000204 	addi	r8,r8,8
   82150:	d8802617 	ldw	r2,152(sp)
   82154:	d9403317 	ldw	r5,204(sp)
   82158:	11400216 	blt	r2,r5,82164 <___vfprintf_internal_r+0xeac>
   8215c:	e080004c 	andi	r2,fp,1
   82160:	103e4526 	beq	r2,zero,81a78 <__alt_data_end+0xfffb8698>
   82164:	d8803817 	ldw	r2,224(sp)
   82168:	d9003517 	ldw	r4,212(sp)
   8216c:	d9403817 	ldw	r5,224(sp)
   82170:	1887883a 	add	r3,r3,r2
   82174:	d8801f17 	ldw	r2,124(sp)
   82178:	41000015 	stw	r4,0(r8)
   8217c:	41400115 	stw	r5,4(r8)
   82180:	10800044 	addi	r2,r2,1
   82184:	d8c02015 	stw	r3,128(sp)
   82188:	d8801f15 	stw	r2,124(sp)
   8218c:	010001c4 	movi	r4,7
   82190:	20830916 	blt	r4,r2,82db8 <___vfprintf_internal_r+0x1b00>
   82194:	42000204 	addi	r8,r8,8
   82198:	d8803317 	ldw	r2,204(sp)
   8219c:	143fffc4 	addi	r16,r2,-1
   821a0:	043e350e 	bge	zero,r16,81a78 <__alt_data_end+0xfffb8698>
   821a4:	04400404 	movi	r17,16
   821a8:	d8801f17 	ldw	r2,124(sp)
   821ac:	8c007e0e 	bge	r17,r16,823a8 <___vfprintf_internal_r+0x10f0>
   821b0:	01400274 	movhi	r5,9
   821b4:	2943c884 	addi	r5,r5,3874
   821b8:	d9402c15 	stw	r5,176(sp)
   821bc:	04c001c4 	movi	r19,7
   821c0:	00000306 	br	821d0 <___vfprintf_internal_r+0xf18>
   821c4:	42000204 	addi	r8,r8,8
   821c8:	843ffc04 	addi	r16,r16,-16
   821cc:	8c00790e 	bge	r17,r16,823b4 <___vfprintf_internal_r+0x10fc>
   821d0:	18c00404 	addi	r3,r3,16
   821d4:	10800044 	addi	r2,r2,1
   821d8:	45000015 	stw	r20,0(r8)
   821dc:	44400115 	stw	r17,4(r8)
   821e0:	d8c02015 	stw	r3,128(sp)
   821e4:	d8801f15 	stw	r2,124(sp)
   821e8:	98bff60e 	bge	r19,r2,821c4 <__alt_data_end+0xfffb8de4>
   821ec:	b809883a 	mov	r4,r23
   821f0:	b00b883a 	mov	r5,r22
   821f4:	d9801e04 	addi	r6,sp,120
   821f8:	00887880 	call	88788 <__sprint_r>
   821fc:	103d231e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82200:	d8c02017 	ldw	r3,128(sp)
   82204:	d8801f17 	ldw	r2,124(sp)
   82208:	da000404 	addi	r8,sp,16
   8220c:	003fee06 	br	821c8 <__alt_data_end+0xfffb8de8>
   82210:	d9402e17 	ldw	r5,184(sp)
   82214:	d8802b17 	ldw	r2,172(sp)
   82218:	28a7c83a 	sub	r19,r5,r2
   8221c:	04fde00e 	bge	zero,r19,819a0 <__alt_data_end+0xfffb85c0>
   82220:	05400404 	movi	r21,16
   82224:	d8801f17 	ldw	r2,124(sp)
   82228:	acc3870e 	bge	r21,r19,83048 <___vfprintf_internal_r+0x1d90>
   8222c:	01400274 	movhi	r5,9
   82230:	2943c884 	addi	r5,r5,3874
   82234:	d9402c15 	stw	r5,176(sp)
   82238:	048001c4 	movi	r18,7
   8223c:	00000306 	br	8224c <___vfprintf_internal_r+0xf94>
   82240:	9cfffc04 	addi	r19,r19,-16
   82244:	42000204 	addi	r8,r8,8
   82248:	acc0110e 	bge	r21,r19,82290 <___vfprintf_internal_r+0xfd8>
   8224c:	18c00404 	addi	r3,r3,16
   82250:	10800044 	addi	r2,r2,1
   82254:	45000015 	stw	r20,0(r8)
   82258:	45400115 	stw	r21,4(r8)
   8225c:	d8c02015 	stw	r3,128(sp)
   82260:	d8801f15 	stw	r2,124(sp)
   82264:	90bff60e 	bge	r18,r2,82240 <__alt_data_end+0xfffb8e60>
   82268:	b809883a 	mov	r4,r23
   8226c:	b00b883a 	mov	r5,r22
   82270:	d9801e04 	addi	r6,sp,120
   82274:	00887880 	call	88788 <__sprint_r>
   82278:	103d041e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   8227c:	9cfffc04 	addi	r19,r19,-16
   82280:	d8c02017 	ldw	r3,128(sp)
   82284:	d8801f17 	ldw	r2,124(sp)
   82288:	da000404 	addi	r8,sp,16
   8228c:	acffef16 	blt	r21,r19,8224c <__alt_data_end+0xfffb8e6c>
   82290:	d9002c17 	ldw	r4,176(sp)
   82294:	1cc7883a 	add	r3,r3,r19
   82298:	10800044 	addi	r2,r2,1
   8229c:	41000015 	stw	r4,0(r8)
   822a0:	44c00115 	stw	r19,4(r8)
   822a4:	d8c02015 	stw	r3,128(sp)
   822a8:	d8801f15 	stw	r2,124(sp)
   822ac:	010001c4 	movi	r4,7
   822b0:	20817816 	blt	r4,r2,82894 <___vfprintf_internal_r+0x15dc>
   822b4:	42000204 	addi	r8,r8,8
   822b8:	003db906 	br	819a0 <__alt_data_end+0xfffb85c0>
   822bc:	d9403317 	ldw	r5,204(sp)
   822c0:	00800044 	movi	r2,1
   822c4:	18c00044 	addi	r3,r3,1
   822c8:	11413e0e 	bge	r2,r5,827c4 <___vfprintf_internal_r+0x150c>
   822cc:	dc001f17 	ldw	r16,124(sp)
   822d0:	d8803117 	ldw	r2,196(sp)
   822d4:	d8c02015 	stw	r3,128(sp)
   822d8:	84000044 	addi	r16,r16,1
   822dc:	40800015 	stw	r2,0(r8)
   822e0:	00800044 	movi	r2,1
   822e4:	40800115 	stw	r2,4(r8)
   822e8:	dc001f15 	stw	r16,124(sp)
   822ec:	008001c4 	movi	r2,7
   822f0:	14015616 	blt	r2,r16,8284c <___vfprintf_internal_r+0x1594>
   822f4:	42000204 	addi	r8,r8,8
   822f8:	d9003817 	ldw	r4,224(sp)
   822fc:	d9403517 	ldw	r5,212(sp)
   82300:	84000044 	addi	r16,r16,1
   82304:	1907883a 	add	r3,r3,r4
   82308:	41400015 	stw	r5,0(r8)
   8230c:	41000115 	stw	r4,4(r8)
   82310:	d8c02015 	stw	r3,128(sp)
   82314:	dc001f15 	stw	r16,124(sp)
   82318:	008001c4 	movi	r2,7
   8231c:	14015416 	blt	r2,r16,82870 <___vfprintf_internal_r+0x15b8>
   82320:	44400204 	addi	r17,r8,8
   82324:	d9003717 	ldw	r4,220(sp)
   82328:	d9403917 	ldw	r5,228(sp)
   8232c:	000d883a 	mov	r6,zero
   82330:	000f883a 	mov	r7,zero
   82334:	d8c03d15 	stw	r3,244(sp)
   82338:	008c31c0 	call	8c31c <__eqdf2>
   8233c:	d8c03d17 	ldw	r3,244(sp)
   82340:	1000aa26 	beq	r2,zero,825ec <___vfprintf_internal_r+0x1334>
   82344:	d9003317 	ldw	r4,204(sp)
   82348:	d9403117 	ldw	r5,196(sp)
   8234c:	84000044 	addi	r16,r16,1
   82350:	20bfffc4 	addi	r2,r4,-1
   82354:	1887883a 	add	r3,r3,r2
   82358:	29000044 	addi	r4,r5,1
   8235c:	88800115 	stw	r2,4(r17)
   82360:	89000015 	stw	r4,0(r17)
   82364:	d8c02015 	stw	r3,128(sp)
   82368:	dc001f15 	stw	r16,124(sp)
   8236c:	008001c4 	movi	r2,7
   82370:	14012d16 	blt	r2,r16,82828 <___vfprintf_internal_r+0x1570>
   82374:	8c400204 	addi	r17,r17,8
   82378:	d9403a17 	ldw	r5,232(sp)
   8237c:	dcc022c4 	addi	r19,sp,139
   82380:	84000044 	addi	r16,r16,1
   82384:	1947883a 	add	r3,r3,r5
   82388:	8cc00015 	stw	r19,0(r17)
   8238c:	89400115 	stw	r5,4(r17)
   82390:	d8c02015 	stw	r3,128(sp)
   82394:	dc001f15 	stw	r16,124(sp)
   82398:	008001c4 	movi	r2,7
   8239c:	14000e16 	blt	r2,r16,823d8 <___vfprintf_internal_r+0x1120>
   823a0:	8a000204 	addi	r8,r17,8
   823a4:	003db406 	br	81a78 <__alt_data_end+0xfffb8698>
   823a8:	01000274 	movhi	r4,9
   823ac:	2103c884 	addi	r4,r4,3874
   823b0:	d9002c15 	stw	r4,176(sp)
   823b4:	d9002c17 	ldw	r4,176(sp)
   823b8:	1c07883a 	add	r3,r3,r16
   823bc:	44000115 	stw	r16,4(r8)
   823c0:	41000015 	stw	r4,0(r8)
   823c4:	10800044 	addi	r2,r2,1
   823c8:	d8c02015 	stw	r3,128(sp)
   823cc:	d8801f15 	stw	r2,124(sp)
   823d0:	010001c4 	movi	r4,7
   823d4:	20bda70e 	bge	r4,r2,81a74 <__alt_data_end+0xfffb8694>
   823d8:	b809883a 	mov	r4,r23
   823dc:	b00b883a 	mov	r5,r22
   823e0:	d9801e04 	addi	r6,sp,120
   823e4:	00887880 	call	88788 <__sprint_r>
   823e8:	103ca81e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   823ec:	d8c02017 	ldw	r3,128(sp)
   823f0:	da000404 	addi	r8,sp,16
   823f4:	003da006 	br	81a78 <__alt_data_end+0xfffb8698>
   823f8:	b809883a 	mov	r4,r23
   823fc:	b00b883a 	mov	r5,r22
   82400:	d9801e04 	addi	r6,sp,120
   82404:	00887880 	call	88788 <__sprint_r>
   82408:	103dd626 	beq	r2,zero,81b64 <__alt_data_end+0xfffb8784>
   8240c:	003c9f06 	br	8168c <__alt_data_end+0xfffb82ac>
   82410:	10803fcc 	andi	r2,r2,255
   82414:	1000201e 	bne	r2,zero,82498 <___vfprintf_internal_r+0x11e0>
   82418:	e080004c 	andi	r2,fp,1
   8241c:	10001e26 	beq	r2,zero,82498 <___vfprintf_internal_r+0x11e0>
   82420:	00800c04 	movi	r2,48
   82424:	d8c01dc4 	addi	r3,sp,119
   82428:	d8801dc5 	stb	r2,119(sp)
   8242c:	dc403c17 	ldw	r17,240(sp)
   82430:	d8c03115 	stw	r3,196(sp)
   82434:	003cf806 	br	81818 <__alt_data_end+0xfffb8438>
   82438:	b809883a 	mov	r4,r23
   8243c:	b00b883a 	mov	r5,r22
   82440:	d9801e04 	addi	r6,sp,120
   82444:	00887880 	call	88788 <__sprint_r>
   82448:	103c901e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   8244c:	d8c02017 	ldw	r3,128(sp)
   82450:	da000404 	addi	r8,sp,16
   82454:	003d7b06 	br	81a44 <__alt_data_end+0xfffb8664>
   82458:	b809883a 	mov	r4,r23
   8245c:	b00b883a 	mov	r5,r22
   82460:	d9801e04 	addi	r6,sp,120
   82464:	00887880 	call	88788 <__sprint_r>
   82468:	103c881e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   8246c:	d8c02017 	ldw	r3,128(sp)
   82470:	da000404 	addi	r8,sp,16
   82474:	003d3906 	br	8195c <__alt_data_end+0xfffb857c>
   82478:	b809883a 	mov	r4,r23
   8247c:	b00b883a 	mov	r5,r22
   82480:	d9801e04 	addi	r6,sp,120
   82484:	00887880 	call	88788 <__sprint_r>
   82488:	103c801e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   8248c:	d8c02017 	ldw	r3,128(sp)
   82490:	da000404 	addi	r8,sp,16
   82494:	003d3f06 	br	81994 <__alt_data_end+0xfffb85b4>
   82498:	d8c01e04 	addi	r3,sp,120
   8249c:	0023883a 	mov	r17,zero
   824a0:	d8c03115 	stw	r3,196(sp)
   824a4:	003cdc06 	br	81818 <__alt_data_end+0xfffb8438>
   824a8:	d9403b17 	ldw	r5,236(sp)
   824ac:	d8c01e04 	addi	r3,sp,120
   824b0:	908003cc 	andi	r2,r18,15
   824b4:	a808973a 	slli	r4,r21,28
   824b8:	2885883a 	add	r2,r5,r2
   824bc:	9024d13a 	srli	r18,r18,4
   824c0:	10800003 	ldbu	r2,0(r2)
   824c4:	a82ad13a 	srli	r21,r21,4
   824c8:	18ffffc4 	addi	r3,r3,-1
   824cc:	24a4b03a 	or	r18,r4,r18
   824d0:	18800005 	stb	r2,0(r3)
   824d4:	9544b03a 	or	r2,r18,r21
   824d8:	103ff51e 	bne	r2,zero,824b0 <__alt_data_end+0xfffb90d0>
   824dc:	d9402817 	ldw	r5,160(sp)
   824e0:	d8c03115 	stw	r3,196(sp)
   824e4:	28e3c83a 	sub	r17,r5,r3
   824e8:	003ccb06 	br	81818 <__alt_data_end+0xfffb8438>
   824ec:	dc002617 	ldw	r16,152(sp)
   824f0:	0401ab0e 	bge	zero,r16,82ba0 <___vfprintf_internal_r+0x18e8>
   824f4:	d8803317 	ldw	r2,204(sp)
   824f8:	d9403117 	ldw	r5,196(sp)
   824fc:	d9003417 	ldw	r4,208(sp)
   82500:	1023883a 	mov	r17,r2
   82504:	28a1883a 	add	r16,r5,r2
   82508:	2080010e 	bge	r4,r2,82510 <___vfprintf_internal_r+0x1258>
   8250c:	2023883a 	mov	r17,r4
   82510:	04400b0e 	bge	zero,r17,82540 <___vfprintf_internal_r+0x1288>
   82514:	d8801f17 	ldw	r2,124(sp)
   82518:	d9403117 	ldw	r5,196(sp)
   8251c:	1c47883a 	add	r3,r3,r17
   82520:	10800044 	addi	r2,r2,1
   82524:	41400015 	stw	r5,0(r8)
   82528:	44400115 	stw	r17,4(r8)
   8252c:	d8c02015 	stw	r3,128(sp)
   82530:	d8801f15 	stw	r2,124(sp)
   82534:	010001c4 	movi	r4,7
   82538:	20826716 	blt	r4,r2,82ed8 <___vfprintf_internal_r+0x1c20>
   8253c:	42000204 	addi	r8,r8,8
   82540:	88026316 	blt	r17,zero,82ed0 <___vfprintf_internal_r+0x1c18>
   82544:	d8803417 	ldw	r2,208(sp)
   82548:	1463c83a 	sub	r17,r2,r17
   8254c:	0440590e 	bge	zero,r17,826b4 <___vfprintf_internal_r+0x13fc>
   82550:	04c00404 	movi	r19,16
   82554:	d8801f17 	ldw	r2,124(sp)
   82558:	9c41770e 	bge	r19,r17,82b38 <___vfprintf_internal_r+0x1880>
   8255c:	01400274 	movhi	r5,9
   82560:	2943c884 	addi	r5,r5,3874
   82564:	d9402c15 	stw	r5,176(sp)
   82568:	054001c4 	movi	r21,7
   8256c:	00000306 	br	8257c <___vfprintf_internal_r+0x12c4>
   82570:	42000204 	addi	r8,r8,8
   82574:	8c7ffc04 	addi	r17,r17,-16
   82578:	9c41720e 	bge	r19,r17,82b44 <___vfprintf_internal_r+0x188c>
   8257c:	18c00404 	addi	r3,r3,16
   82580:	10800044 	addi	r2,r2,1
   82584:	45000015 	stw	r20,0(r8)
   82588:	44c00115 	stw	r19,4(r8)
   8258c:	d8c02015 	stw	r3,128(sp)
   82590:	d8801f15 	stw	r2,124(sp)
   82594:	a8bff60e 	bge	r21,r2,82570 <__alt_data_end+0xfffb9190>
   82598:	b809883a 	mov	r4,r23
   8259c:	b00b883a 	mov	r5,r22
   825a0:	d9801e04 	addi	r6,sp,120
   825a4:	00887880 	call	88788 <__sprint_r>
   825a8:	103c381e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   825ac:	d8c02017 	ldw	r3,128(sp)
   825b0:	d8801f17 	ldw	r2,124(sp)
   825b4:	da000404 	addi	r8,sp,16
   825b8:	003fee06 	br	82574 <__alt_data_end+0xfffb9194>
   825bc:	b809883a 	mov	r4,r23
   825c0:	b00b883a 	mov	r5,r22
   825c4:	d9801e04 	addi	r6,sp,120
   825c8:	00887880 	call	88788 <__sprint_r>
   825cc:	103c2f1e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   825d0:	d8c02017 	ldw	r3,128(sp)
   825d4:	d8802787 	ldb	r2,158(sp)
   825d8:	da000404 	addi	r8,sp,16
   825dc:	003cd206 	br	81928 <__alt_data_end+0xfffb8548>
   825e0:	00800084 	movi	r2,2
   825e4:	9546b03a 	or	r3,r18,r21
   825e8:	003d9f06 	br	81c68 <__alt_data_end+0xfffb8888>
   825ec:	d8803317 	ldw	r2,204(sp)
   825f0:	14ffffc4 	addi	r19,r2,-1
   825f4:	04ff600e 	bge	zero,r19,82378 <__alt_data_end+0xfffb8f98>
   825f8:	05400404 	movi	r21,16
   825fc:	acc07e0e 	bge	r21,r19,827f8 <___vfprintf_internal_r+0x1540>
   82600:	01400274 	movhi	r5,9
   82604:	2943c884 	addi	r5,r5,3874
   82608:	d9402c15 	stw	r5,176(sp)
   8260c:	01c001c4 	movi	r7,7
   82610:	00000306 	br	82620 <___vfprintf_internal_r+0x1368>
   82614:	8c400204 	addi	r17,r17,8
   82618:	9cfffc04 	addi	r19,r19,-16
   8261c:	acc0790e 	bge	r21,r19,82804 <___vfprintf_internal_r+0x154c>
   82620:	18c00404 	addi	r3,r3,16
   82624:	84000044 	addi	r16,r16,1
   82628:	8d000015 	stw	r20,0(r17)
   8262c:	8d400115 	stw	r21,4(r17)
   82630:	d8c02015 	stw	r3,128(sp)
   82634:	dc001f15 	stw	r16,124(sp)
   82638:	3c3ff60e 	bge	r7,r16,82614 <__alt_data_end+0xfffb9234>
   8263c:	b809883a 	mov	r4,r23
   82640:	b00b883a 	mov	r5,r22
   82644:	d9801e04 	addi	r6,sp,120
   82648:	d9c03d15 	stw	r7,244(sp)
   8264c:	00887880 	call	88788 <__sprint_r>
   82650:	d9c03d17 	ldw	r7,244(sp)
   82654:	103c0d1e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82658:	d8c02017 	ldw	r3,128(sp)
   8265c:	dc001f17 	ldw	r16,124(sp)
   82660:	dc400404 	addi	r17,sp,16
   82664:	003fec06 	br	82618 <__alt_data_end+0xfffb9238>
   82668:	10803fcc 	andi	r2,r2,255
   8266c:	1080201c 	xori	r2,r2,128
   82670:	10bfe004 	addi	r2,r2,-128
   82674:	01000c04 	movi	r4,48
   82678:	1101d726 	beq	r2,r4,82dd8 <___vfprintf_internal_r+0x1b20>
   8267c:	d9403117 	ldw	r5,196(sp)
   82680:	d8802817 	ldw	r2,160(sp)
   82684:	193fffc5 	stb	r4,-1(r3)
   82688:	297fffc4 	addi	r5,r5,-1
   8268c:	d9403115 	stw	r5,196(sp)
   82690:	1163c83a 	sub	r17,r2,r5
   82694:	003c6006 	br	81818 <__alt_data_end+0xfffb8438>
   82698:	b809883a 	mov	r4,r23
   8269c:	b00b883a 	mov	r5,r22
   826a0:	d9801e04 	addi	r6,sp,120
   826a4:	00887880 	call	88788 <__sprint_r>
   826a8:	103bf81e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   826ac:	d8c02017 	ldw	r3,128(sp)
   826b0:	da000404 	addi	r8,sp,16
   826b4:	d9403117 	ldw	r5,196(sp)
   826b8:	d9003417 	ldw	r4,208(sp)
   826bc:	d8802617 	ldw	r2,152(sp)
   826c0:	2923883a 	add	r17,r5,r4
   826c4:	d9403317 	ldw	r5,204(sp)
   826c8:	11400216 	blt	r2,r5,826d4 <___vfprintf_internal_r+0x141c>
   826cc:	e100004c 	andi	r4,fp,1
   826d0:	20000d26 	beq	r4,zero,82708 <___vfprintf_internal_r+0x1450>
   826d4:	d9003817 	ldw	r4,224(sp)
   826d8:	d9403517 	ldw	r5,212(sp)
   826dc:	1907883a 	add	r3,r3,r4
   826e0:	d9001f17 	ldw	r4,124(sp)
   826e4:	41400015 	stw	r5,0(r8)
   826e8:	d9403817 	ldw	r5,224(sp)
   826ec:	21000044 	addi	r4,r4,1
   826f0:	d8c02015 	stw	r3,128(sp)
   826f4:	41400115 	stw	r5,4(r8)
   826f8:	d9001f15 	stw	r4,124(sp)
   826fc:	014001c4 	movi	r5,7
   82700:	2901fd16 	blt	r5,r4,82ef8 <___vfprintf_internal_r+0x1c40>
   82704:	42000204 	addi	r8,r8,8
   82708:	d9003317 	ldw	r4,204(sp)
   8270c:	2085c83a 	sub	r2,r4,r2
   82710:	8449c83a 	sub	r4,r16,r17
   82714:	1021883a 	mov	r16,r2
   82718:	2080010e 	bge	r4,r2,82720 <___vfprintf_internal_r+0x1468>
   8271c:	2021883a 	mov	r16,r4
   82720:	04000a0e 	bge	zero,r16,8274c <___vfprintf_internal_r+0x1494>
   82724:	d9001f17 	ldw	r4,124(sp)
   82728:	1c07883a 	add	r3,r3,r16
   8272c:	44400015 	stw	r17,0(r8)
   82730:	21000044 	addi	r4,r4,1
   82734:	44000115 	stw	r16,4(r8)
   82738:	d8c02015 	stw	r3,128(sp)
   8273c:	d9001f15 	stw	r4,124(sp)
   82740:	014001c4 	movi	r5,7
   82744:	29021816 	blt	r5,r4,82fa8 <___vfprintf_internal_r+0x1cf0>
   82748:	42000204 	addi	r8,r8,8
   8274c:	80021016 	blt	r16,zero,82f90 <___vfprintf_internal_r+0x1cd8>
   82750:	1421c83a 	sub	r16,r2,r16
   82754:	043cc80e 	bge	zero,r16,81a78 <__alt_data_end+0xfffb8698>
   82758:	04400404 	movi	r17,16
   8275c:	d8801f17 	ldw	r2,124(sp)
   82760:	8c3f110e 	bge	r17,r16,823a8 <__alt_data_end+0xfffb8fc8>
   82764:	01400274 	movhi	r5,9
   82768:	2943c884 	addi	r5,r5,3874
   8276c:	d9402c15 	stw	r5,176(sp)
   82770:	04c001c4 	movi	r19,7
   82774:	00000306 	br	82784 <___vfprintf_internal_r+0x14cc>
   82778:	42000204 	addi	r8,r8,8
   8277c:	843ffc04 	addi	r16,r16,-16
   82780:	8c3f0c0e 	bge	r17,r16,823b4 <__alt_data_end+0xfffb8fd4>
   82784:	18c00404 	addi	r3,r3,16
   82788:	10800044 	addi	r2,r2,1
   8278c:	45000015 	stw	r20,0(r8)
   82790:	44400115 	stw	r17,4(r8)
   82794:	d8c02015 	stw	r3,128(sp)
   82798:	d8801f15 	stw	r2,124(sp)
   8279c:	98bff60e 	bge	r19,r2,82778 <__alt_data_end+0xfffb9398>
   827a0:	b809883a 	mov	r4,r23
   827a4:	b00b883a 	mov	r5,r22
   827a8:	d9801e04 	addi	r6,sp,120
   827ac:	00887880 	call	88788 <__sprint_r>
   827b0:	103bb61e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   827b4:	d8c02017 	ldw	r3,128(sp)
   827b8:	d8801f17 	ldw	r2,124(sp)
   827bc:	da000404 	addi	r8,sp,16
   827c0:	003fee06 	br	8277c <__alt_data_end+0xfffb939c>
   827c4:	e088703a 	and	r4,fp,r2
   827c8:	203ec01e 	bne	r4,zero,822cc <__alt_data_end+0xfffb8eec>
   827cc:	dc001f17 	ldw	r16,124(sp)
   827d0:	d9003117 	ldw	r4,196(sp)
   827d4:	40800115 	stw	r2,4(r8)
   827d8:	84000044 	addi	r16,r16,1
   827dc:	41000015 	stw	r4,0(r8)
   827e0:	d8c02015 	stw	r3,128(sp)
   827e4:	dc001f15 	stw	r16,124(sp)
   827e8:	008001c4 	movi	r2,7
   827ec:	14000e16 	blt	r2,r16,82828 <___vfprintf_internal_r+0x1570>
   827f0:	44400204 	addi	r17,r8,8
   827f4:	003ee006 	br	82378 <__alt_data_end+0xfffb8f98>
   827f8:	01000274 	movhi	r4,9
   827fc:	2103c884 	addi	r4,r4,3874
   82800:	d9002c15 	stw	r4,176(sp)
   82804:	d8802c17 	ldw	r2,176(sp)
   82808:	1cc7883a 	add	r3,r3,r19
   8280c:	84000044 	addi	r16,r16,1
   82810:	88800015 	stw	r2,0(r17)
   82814:	8cc00115 	stw	r19,4(r17)
   82818:	d8c02015 	stw	r3,128(sp)
   8281c:	dc001f15 	stw	r16,124(sp)
   82820:	008001c4 	movi	r2,7
   82824:	143ed30e 	bge	r2,r16,82374 <__alt_data_end+0xfffb8f94>
   82828:	b809883a 	mov	r4,r23
   8282c:	b00b883a 	mov	r5,r22
   82830:	d9801e04 	addi	r6,sp,120
   82834:	00887880 	call	88788 <__sprint_r>
   82838:	103b941e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   8283c:	d8c02017 	ldw	r3,128(sp)
   82840:	dc001f17 	ldw	r16,124(sp)
   82844:	dc400404 	addi	r17,sp,16
   82848:	003ecb06 	br	82378 <__alt_data_end+0xfffb8f98>
   8284c:	b809883a 	mov	r4,r23
   82850:	b00b883a 	mov	r5,r22
   82854:	d9801e04 	addi	r6,sp,120
   82858:	00887880 	call	88788 <__sprint_r>
   8285c:	103b8b1e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82860:	d8c02017 	ldw	r3,128(sp)
   82864:	dc001f17 	ldw	r16,124(sp)
   82868:	da000404 	addi	r8,sp,16
   8286c:	003ea206 	br	822f8 <__alt_data_end+0xfffb8f18>
   82870:	b809883a 	mov	r4,r23
   82874:	b00b883a 	mov	r5,r22
   82878:	d9801e04 	addi	r6,sp,120
   8287c:	00887880 	call	88788 <__sprint_r>
   82880:	103b821e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82884:	d8c02017 	ldw	r3,128(sp)
   82888:	dc001f17 	ldw	r16,124(sp)
   8288c:	dc400404 	addi	r17,sp,16
   82890:	003ea406 	br	82324 <__alt_data_end+0xfffb8f44>
   82894:	b809883a 	mov	r4,r23
   82898:	b00b883a 	mov	r5,r22
   8289c:	d9801e04 	addi	r6,sp,120
   828a0:	00887880 	call	88788 <__sprint_r>
   828a4:	103b791e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   828a8:	d8c02017 	ldw	r3,128(sp)
   828ac:	da000404 	addi	r8,sp,16
   828b0:	003c3b06 	br	819a0 <__alt_data_end+0xfffb85c0>
   828b4:	04a5c83a 	sub	r18,zero,r18
   828b8:	9004c03a 	cmpne	r2,r18,zero
   828bc:	056bc83a 	sub	r21,zero,r21
   828c0:	a8abc83a 	sub	r21,r21,r2
   828c4:	04c00b44 	movi	r19,45
   828c8:	dcc02785 	stb	r19,158(sp)
   828cc:	da403215 	stw	r9,200(sp)
   828d0:	00800044 	movi	r2,1
   828d4:	9546b03a 	or	r3,r18,r21
   828d8:	003bb506 	br	817b0 <__alt_data_end+0xfffb83d0>
   828dc:	da003f15 	stw	r8,252(sp)
   828e0:	da403e15 	stw	r9,248(sp)
   828e4:	00883e40 	call	883e4 <__fpclassifyd>
   828e8:	da003f17 	ldw	r8,252(sp)
   828ec:	da403e17 	ldw	r9,248(sp)
   828f0:	1000e526 	beq	r2,zero,82c88 <___vfprintf_internal_r+0x19d0>
   828f4:	04fff7c4 	movi	r19,-33
   828f8:	00bfffc4 	movi	r2,-1
   828fc:	84e6703a 	and	r19,r16,r19
   82900:	48822526 	beq	r9,r2,83198 <___vfprintf_internal_r+0x1ee0>
   82904:	008011c4 	movi	r2,71
   82908:	98821626 	beq	r19,r2,83164 <___vfprintf_internal_r+0x1eac>
   8290c:	d9003917 	ldw	r4,228(sp)
   82910:	e0c04014 	ori	r3,fp,256
   82914:	d8c02d15 	stw	r3,180(sp)
   82918:	20022116 	blt	r4,zero,831a0 <___vfprintf_internal_r+0x1ee8>
   8291c:	dc403917 	ldw	r17,228(sp)
   82920:	d8002b05 	stb	zero,172(sp)
   82924:	00801984 	movi	r2,102
   82928:	80814d26 	beq	r16,r2,82e60 <___vfprintf_internal_r+0x1ba8>
   8292c:	00801184 	movi	r2,70
   82930:	80814b26 	beq	r16,r2,82e60 <___vfprintf_internal_r+0x1ba8>
   82934:	00801144 	movi	r2,69
   82938:	98822626 	beq	r19,r2,831d4 <___vfprintf_internal_r+0x1f1c>
   8293c:	482b883a 	mov	r21,r9
   82940:	d8802604 	addi	r2,sp,152
   82944:	d8800115 	stw	r2,4(sp)
   82948:	d9403717 	ldw	r5,220(sp)
   8294c:	d8802504 	addi	r2,sp,148
   82950:	d8800215 	stw	r2,8(sp)
   82954:	d8802104 	addi	r2,sp,132
   82958:	dd400015 	stw	r21,0(sp)
   8295c:	d8800315 	stw	r2,12(sp)
   82960:	b809883a 	mov	r4,r23
   82964:	880d883a 	mov	r6,r17
   82968:	01c00084 	movi	r7,2
   8296c:	da003f15 	stw	r8,252(sp)
   82970:	da403e15 	stw	r9,248(sp)
   82974:	008376c0 	call	8376c <_dtoa_r>
   82978:	d8803115 	stw	r2,196(sp)
   8297c:	008019c4 	movi	r2,103
   82980:	da003f17 	ldw	r8,252(sp)
   82984:	da403e17 	ldw	r9,248(sp)
   82988:	80800226 	beq	r16,r2,82994 <___vfprintf_internal_r+0x16dc>
   8298c:	008011c4 	movi	r2,71
   82990:	8081451e 	bne	r16,r2,82ea8 <___vfprintf_internal_r+0x1bf0>
   82994:	e080004c 	andi	r2,fp,1
   82998:	10021e26 	beq	r2,zero,83214 <___vfprintf_internal_r+0x1f5c>
   8299c:	d8c03117 	ldw	r3,196(sp)
   829a0:	1d55883a 	add	r10,r3,r21
   829a4:	d9003717 	ldw	r4,220(sp)
   829a8:	880b883a 	mov	r5,r17
   829ac:	000d883a 	mov	r6,zero
   829b0:	000f883a 	mov	r7,zero
   829b4:	da003f15 	stw	r8,252(sp)
   829b8:	da403e15 	stw	r9,248(sp)
   829bc:	da803d15 	stw	r10,244(sp)
   829c0:	008c31c0 	call	8c31c <__eqdf2>
   829c4:	da003f17 	ldw	r8,252(sp)
   829c8:	da403e17 	ldw	r9,248(sp)
   829cc:	da803d17 	ldw	r10,244(sp)
   829d0:	1001a126 	beq	r2,zero,83058 <___vfprintf_internal_r+0x1da0>
   829d4:	d8802117 	ldw	r2,132(sp)
   829d8:	1280062e 	bgeu	r2,r10,829f4 <___vfprintf_internal_r+0x173c>
   829dc:	01000c04 	movi	r4,48
   829e0:	10c00044 	addi	r3,r2,1
   829e4:	d8c02115 	stw	r3,132(sp)
   829e8:	11000005 	stb	r4,0(r2)
   829ec:	d8802117 	ldw	r2,132(sp)
   829f0:	12bffb36 	bltu	r2,r10,829e0 <__alt_data_end+0xfffb9600>
   829f4:	d8c03117 	ldw	r3,196(sp)
   829f8:	10c5c83a 	sub	r2,r2,r3
   829fc:	d8803315 	stw	r2,204(sp)
   82a00:	008011c4 	movi	r2,71
   82a04:	98817f26 	beq	r19,r2,83004 <___vfprintf_internal_r+0x1d4c>
   82a08:	00801944 	movi	r2,101
   82a0c:	14023e0e 	bge	r2,r16,83308 <___vfprintf_internal_r+0x2050>
   82a10:	d8c02617 	ldw	r3,152(sp)
   82a14:	00801984 	movi	r2,102
   82a18:	d8c03415 	stw	r3,208(sp)
   82a1c:	8081f326 	beq	r16,r2,831ec <___vfprintf_internal_r+0x1f34>
   82a20:	d8c03417 	ldw	r3,208(sp)
   82a24:	d9003317 	ldw	r4,204(sp)
   82a28:	1901e116 	blt	r3,r4,831b0 <___vfprintf_internal_r+0x1ef8>
   82a2c:	e080004c 	andi	r2,fp,1
   82a30:	1001ea26 	beq	r2,zero,831dc <___vfprintf_internal_r+0x1f24>
   82a34:	d8c03417 	ldw	r3,208(sp)
   82a38:	1c400044 	addi	r17,r3,1
   82a3c:	8839883a 	mov	fp,r17
   82a40:	8801e216 	blt	r17,zero,831cc <___vfprintf_internal_r+0x1f14>
   82a44:	dd402b07 	ldb	r21,172(sp)
   82a48:	a801661e 	bne	r21,zero,82fe4 <___vfprintf_internal_r+0x1d2c>
   82a4c:	df002b15 	stw	fp,172(sp)
   82a50:	dcc02783 	ldbu	r19,158(sp)
   82a54:	df002d17 	ldw	fp,180(sp)
   82a58:	d8003215 	stw	zero,200(sp)
   82a5c:	dc802d15 	stw	r18,180(sp)
   82a60:	003b7206 	br	8182c <__alt_data_end+0xfffb844c>
   82a64:	e4000007 	ldb	r16,0(fp)
   82a68:	e005883a 	mov	r2,fp
   82a6c:	003a7806 	br	81450 <__alt_data_end+0xfffb8070>
   82a70:	e0c0100c 	andi	r3,fp,64
   82a74:	1800b326 	beq	r3,zero,82d44 <___vfprintf_internal_r+0x1a8c>
   82a78:	d9002d17 	ldw	r4,180(sp)
   82a7c:	1480000b 	ldhu	r18,0(r2)
   82a80:	002b883a 	mov	r21,zero
   82a84:	21000104 	addi	r4,r4,4
   82a88:	d9002d15 	stw	r4,180(sp)
   82a8c:	003cd506 	br	81de4 <__alt_data_end+0xfffb8a04>
   82a90:	e080100c 	andi	r2,fp,64
   82a94:	1000a326 	beq	r2,zero,82d24 <___vfprintf_internal_r+0x1a6c>
   82a98:	d8802d17 	ldw	r2,180(sp)
   82a9c:	002b883a 	mov	r21,zero
   82aa0:	1480000b 	ldhu	r18,0(r2)
   82aa4:	10800104 	addi	r2,r2,4
   82aa8:	d8802d15 	stw	r2,180(sp)
   82aac:	9007883a 	mov	r3,r18
   82ab0:	00800044 	movi	r2,1
   82ab4:	003c6c06 	br	81c68 <__alt_data_end+0xfffb8888>
   82ab8:	e080100c 	andi	r2,fp,64
   82abc:	10009226 	beq	r2,zero,82d08 <___vfprintf_internal_r+0x1a50>
   82ac0:	1c80000f 	ldh	r18,0(r3)
   82ac4:	d8802d17 	ldw	r2,180(sp)
   82ac8:	902bd7fa 	srai	r21,r18,31
   82acc:	10800104 	addi	r2,r2,4
   82ad0:	d8802d15 	stw	r2,180(sp)
   82ad4:	a805883a 	mov	r2,r21
   82ad8:	003b3006 	br	8179c <__alt_data_end+0xfffb83bc>
   82adc:	e080100c 	andi	r2,fp,64
   82ae0:	10008126 	beq	r2,zero,82ce8 <___vfprintf_internal_r+0x1a30>
   82ae4:	d8c02d17 	ldw	r3,180(sp)
   82ae8:	002b883a 	mov	r21,zero
   82aec:	0005883a 	mov	r2,zero
   82af0:	1c80000b 	ldhu	r18,0(r3)
   82af4:	18c00104 	addi	r3,r3,4
   82af8:	d8c02d15 	stw	r3,180(sp)
   82afc:	9007883a 	mov	r3,r18
   82b00:	003c5906 	br	81c68 <__alt_data_end+0xfffb8888>
   82b04:	e080040c 	andi	r2,fp,16
   82b08:	1000701e 	bne	r2,zero,82ccc <___vfprintf_internal_r+0x1a14>
   82b0c:	e080100c 	andi	r2,fp,64
   82b10:	10014626 	beq	r2,zero,8302c <___vfprintf_internal_r+0x1d74>
   82b14:	d9002d17 	ldw	r4,180(sp)
   82b18:	d9402f17 	ldw	r5,188(sp)
   82b1c:	20800017 	ldw	r2,0(r4)
   82b20:	21000104 	addi	r4,r4,4
   82b24:	d9002d15 	stw	r4,180(sp)
   82b28:	1140000d 	sth	r5,0(r2)
   82b2c:	003a1d06 	br	813a4 <__alt_data_end+0xfffb7fc4>
   82b30:	00800084 	movi	r2,2
   82b34:	003c4c06 	br	81c68 <__alt_data_end+0xfffb8888>
   82b38:	01000274 	movhi	r4,9
   82b3c:	2103c884 	addi	r4,r4,3874
   82b40:	d9002c15 	stw	r4,176(sp)
   82b44:	d9002c17 	ldw	r4,176(sp)
   82b48:	1c47883a 	add	r3,r3,r17
   82b4c:	10800044 	addi	r2,r2,1
   82b50:	41000015 	stw	r4,0(r8)
   82b54:	44400115 	stw	r17,4(r8)
   82b58:	d8c02015 	stw	r3,128(sp)
   82b5c:	d8801f15 	stw	r2,124(sp)
   82b60:	010001c4 	movi	r4,7
   82b64:	20becc16 	blt	r4,r2,82698 <__alt_data_end+0xfffb92b8>
   82b68:	42000204 	addi	r8,r8,8
   82b6c:	003ed106 	br	826b4 <__alt_data_end+0xfffb92d4>
   82b70:	01000274 	movhi	r4,9
   82b74:	2103c884 	addi	r4,r4,3874
   82b78:	d9002c15 	stw	r4,176(sp)
   82b7c:	003ba706 	br	81a1c <__alt_data_end+0xfffb863c>
   82b80:	b809883a 	mov	r4,r23
   82b84:	b00b883a 	mov	r5,r22
   82b88:	d9801e04 	addi	r6,sp,120
   82b8c:	00887880 	call	88788 <__sprint_r>
   82b90:	103abe1e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82b94:	d8c02017 	ldw	r3,128(sp)
   82b98:	da000404 	addi	r8,sp,16
   82b9c:	003d6c06 	br	82150 <__alt_data_end+0xfffb8d70>
   82ba0:	d8801f17 	ldw	r2,124(sp)
   82ba4:	01400274 	movhi	r5,9
   82ba8:	01000044 	movi	r4,1
   82bac:	18c00044 	addi	r3,r3,1
   82bb0:	10800044 	addi	r2,r2,1
   82bb4:	2943c804 	addi	r5,r5,3872
   82bb8:	41000115 	stw	r4,4(r8)
   82bbc:	41400015 	stw	r5,0(r8)
   82bc0:	d8c02015 	stw	r3,128(sp)
   82bc4:	d8801f15 	stw	r2,124(sp)
   82bc8:	010001c4 	movi	r4,7
   82bcc:	20806716 	blt	r4,r2,82d6c <___vfprintf_internal_r+0x1ab4>
   82bd0:	42000204 	addi	r8,r8,8
   82bd4:	8000041e 	bne	r16,zero,82be8 <___vfprintf_internal_r+0x1930>
   82bd8:	d8803317 	ldw	r2,204(sp)
   82bdc:	1000021e 	bne	r2,zero,82be8 <___vfprintf_internal_r+0x1930>
   82be0:	e080004c 	andi	r2,fp,1
   82be4:	103ba426 	beq	r2,zero,81a78 <__alt_data_end+0xfffb8698>
   82be8:	d9003817 	ldw	r4,224(sp)
   82bec:	d8801f17 	ldw	r2,124(sp)
   82bf0:	d9403517 	ldw	r5,212(sp)
   82bf4:	1907883a 	add	r3,r3,r4
   82bf8:	10800044 	addi	r2,r2,1
   82bfc:	41000115 	stw	r4,4(r8)
   82c00:	41400015 	stw	r5,0(r8)
   82c04:	d8c02015 	stw	r3,128(sp)
   82c08:	d8801f15 	stw	r2,124(sp)
   82c0c:	010001c4 	movi	r4,7
   82c10:	20815716 	blt	r4,r2,83170 <___vfprintf_internal_r+0x1eb8>
   82c14:	42000204 	addi	r8,r8,8
   82c18:	0421c83a 	sub	r16,zero,r16
   82c1c:	0400810e 	bge	zero,r16,82e24 <___vfprintf_internal_r+0x1b6c>
   82c20:	04400404 	movi	r17,16
   82c24:	8c00bd0e 	bge	r17,r16,82f1c <___vfprintf_internal_r+0x1c64>
   82c28:	01400274 	movhi	r5,9
   82c2c:	2943c884 	addi	r5,r5,3874
   82c30:	d9402c15 	stw	r5,176(sp)
   82c34:	04c001c4 	movi	r19,7
   82c38:	00000306 	br	82c48 <___vfprintf_internal_r+0x1990>
   82c3c:	42000204 	addi	r8,r8,8
   82c40:	843ffc04 	addi	r16,r16,-16
   82c44:	8c00b80e 	bge	r17,r16,82f28 <___vfprintf_internal_r+0x1c70>
   82c48:	18c00404 	addi	r3,r3,16
   82c4c:	10800044 	addi	r2,r2,1
   82c50:	45000015 	stw	r20,0(r8)
   82c54:	44400115 	stw	r17,4(r8)
   82c58:	d8c02015 	stw	r3,128(sp)
   82c5c:	d8801f15 	stw	r2,124(sp)
   82c60:	98bff60e 	bge	r19,r2,82c3c <__alt_data_end+0xfffb985c>
   82c64:	b809883a 	mov	r4,r23
   82c68:	b00b883a 	mov	r5,r22
   82c6c:	d9801e04 	addi	r6,sp,120
   82c70:	00887880 	call	88788 <__sprint_r>
   82c74:	103a851e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82c78:	d8c02017 	ldw	r3,128(sp)
   82c7c:	d8801f17 	ldw	r2,124(sp)
   82c80:	da000404 	addi	r8,sp,16
   82c84:	003fee06 	br	82c40 <__alt_data_end+0xfffb9860>
   82c88:	008011c4 	movi	r2,71
   82c8c:	1400d116 	blt	r2,r16,82fd4 <___vfprintf_internal_r+0x1d1c>
   82c90:	01000274 	movhi	r4,9
   82c94:	2103ba04 	addi	r4,r4,3816
   82c98:	d9003115 	stw	r4,196(sp)
   82c9c:	00c000c4 	movi	r3,3
   82ca0:	00bfdfc4 	movi	r2,-129
   82ca4:	d8c02b15 	stw	r3,172(sp)
   82ca8:	e0b8703a 	and	fp,fp,r2
   82cac:	dcc02783 	ldbu	r19,158(sp)
   82cb0:	dc802d15 	stw	r18,180(sp)
   82cb4:	1823883a 	mov	r17,r3
   82cb8:	d8003215 	stw	zero,200(sp)
   82cbc:	d8003415 	stw	zero,208(sp)
   82cc0:	003ada06 	br	8182c <__alt_data_end+0xfffb844c>
   82cc4:	4823883a 	mov	r17,r9
   82cc8:	003c9406 	br	81f1c <__alt_data_end+0xfffb8b3c>
   82ccc:	d9402d17 	ldw	r5,180(sp)
   82cd0:	d8c02f17 	ldw	r3,188(sp)
   82cd4:	28800017 	ldw	r2,0(r5)
   82cd8:	29400104 	addi	r5,r5,4
   82cdc:	d9402d15 	stw	r5,180(sp)
   82ce0:	10c00015 	stw	r3,0(r2)
   82ce4:	0039af06 	br	813a4 <__alt_data_end+0xfffb7fc4>
   82ce8:	d9002d17 	ldw	r4,180(sp)
   82cec:	002b883a 	mov	r21,zero
   82cf0:	0005883a 	mov	r2,zero
   82cf4:	24800017 	ldw	r18,0(r4)
   82cf8:	21000104 	addi	r4,r4,4
   82cfc:	d9002d15 	stw	r4,180(sp)
   82d00:	9007883a 	mov	r3,r18
   82d04:	003bd806 	br	81c68 <__alt_data_end+0xfffb8888>
   82d08:	1c800017 	ldw	r18,0(r3)
   82d0c:	d8c02d17 	ldw	r3,180(sp)
   82d10:	902bd7fa 	srai	r21,r18,31
   82d14:	18c00104 	addi	r3,r3,4
   82d18:	d8c02d15 	stw	r3,180(sp)
   82d1c:	a805883a 	mov	r2,r21
   82d20:	003a9e06 	br	8179c <__alt_data_end+0xfffb83bc>
   82d24:	d8c02d17 	ldw	r3,180(sp)
   82d28:	002b883a 	mov	r21,zero
   82d2c:	00800044 	movi	r2,1
   82d30:	1c800017 	ldw	r18,0(r3)
   82d34:	18c00104 	addi	r3,r3,4
   82d38:	d8c02d15 	stw	r3,180(sp)
   82d3c:	9007883a 	mov	r3,r18
   82d40:	003bc906 	br	81c68 <__alt_data_end+0xfffb8888>
   82d44:	d9402d17 	ldw	r5,180(sp)
   82d48:	14800017 	ldw	r18,0(r2)
   82d4c:	002b883a 	mov	r21,zero
   82d50:	29400104 	addi	r5,r5,4
   82d54:	d9402d15 	stw	r5,180(sp)
   82d58:	003c2206 	br	81de4 <__alt_data_end+0xfffb8a04>
   82d5c:	01000274 	movhi	r4,9
   82d60:	2103b804 	addi	r4,r4,3808
   82d64:	d9003115 	stw	r4,196(sp)
   82d68:	003ba606 	br	81c04 <__alt_data_end+0xfffb8824>
   82d6c:	b809883a 	mov	r4,r23
   82d70:	b00b883a 	mov	r5,r22
   82d74:	d9801e04 	addi	r6,sp,120
   82d78:	00887880 	call	88788 <__sprint_r>
   82d7c:	103a431e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82d80:	dc002617 	ldw	r16,152(sp)
   82d84:	d8c02017 	ldw	r3,128(sp)
   82d88:	da000404 	addi	r8,sp,16
   82d8c:	003f9106 	br	82bd4 <__alt_data_end+0xfffb97f4>
   82d90:	d8802e17 	ldw	r2,184(sp)
   82d94:	d8c02d15 	stw	r3,180(sp)
   82d98:	0085c83a 	sub	r2,zero,r2
   82d9c:	d8802e15 	stw	r2,184(sp)
   82da0:	e005883a 	mov	r2,fp
   82da4:	003a4206 	br	816b0 <__alt_data_end+0xfffb82d0>
   82da8:	e0800044 	addi	r2,fp,1
   82dac:	9cc00814 	ori	r19,r19,32
   82db0:	e4000047 	ldb	r16,1(fp)
   82db4:	0039a606 	br	81450 <__alt_data_end+0xfffb8070>
   82db8:	b809883a 	mov	r4,r23
   82dbc:	b00b883a 	mov	r5,r22
   82dc0:	d9801e04 	addi	r6,sp,120
   82dc4:	00887880 	call	88788 <__sprint_r>
   82dc8:	103a301e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82dcc:	d8c02017 	ldw	r3,128(sp)
   82dd0:	da000404 	addi	r8,sp,16
   82dd4:	003cf006 	br	82198 <__alt_data_end+0xfffb8db8>
   82dd8:	d8c02817 	ldw	r3,160(sp)
   82ddc:	d9003117 	ldw	r4,196(sp)
   82de0:	1923c83a 	sub	r17,r3,r4
   82de4:	003a8c06 	br	81818 <__alt_data_end+0xfffb8438>
   82de8:	da003f15 	stw	r8,252(sp)
   82dec:	00812200 	call	81220 <strlen>
   82df0:	1023883a 	mov	r17,r2
   82df4:	da003f17 	ldw	r8,252(sp)
   82df8:	883c4a0e 	bge	r17,zero,81f24 <__alt_data_end+0xfffb8b44>
   82dfc:	0005883a 	mov	r2,zero
   82e00:	003c4806 	br	81f24 <__alt_data_end+0xfffb8b44>
   82e04:	b809883a 	mov	r4,r23
   82e08:	b00b883a 	mov	r5,r22
   82e0c:	d9801e04 	addi	r6,sp,120
   82e10:	00887880 	call	88788 <__sprint_r>
   82e14:	103a1d1e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82e18:	d8c02017 	ldw	r3,128(sp)
   82e1c:	d8801f17 	ldw	r2,124(sp)
   82e20:	da000404 	addi	r8,sp,16
   82e24:	d9403317 	ldw	r5,204(sp)
   82e28:	d9003117 	ldw	r4,196(sp)
   82e2c:	10800044 	addi	r2,r2,1
   82e30:	1947883a 	add	r3,r3,r5
   82e34:	41000015 	stw	r4,0(r8)
   82e38:	41400115 	stw	r5,4(r8)
   82e3c:	d8c02015 	stw	r3,128(sp)
   82e40:	d8801f15 	stw	r2,124(sp)
   82e44:	010001c4 	movi	r4,7
   82e48:	20bb0a0e 	bge	r4,r2,81a74 <__alt_data_end+0xfffb8694>
   82e4c:	003d6206 	br	823d8 <__alt_data_end+0xfffb8ff8>
   82e50:	01000274 	movhi	r4,9
   82e54:	2103cc84 	addi	r4,r4,3890
   82e58:	d9003615 	stw	r4,216(sp)
   82e5c:	003aa706 	br	818fc <__alt_data_end+0xfffb851c>
   82e60:	d8802604 	addi	r2,sp,152
   82e64:	d8800115 	stw	r2,4(sp)
   82e68:	d9403717 	ldw	r5,220(sp)
   82e6c:	d8802504 	addi	r2,sp,148
   82e70:	d8800215 	stw	r2,8(sp)
   82e74:	d8802104 	addi	r2,sp,132
   82e78:	da400015 	stw	r9,0(sp)
   82e7c:	d8800315 	stw	r2,12(sp)
   82e80:	b809883a 	mov	r4,r23
   82e84:	880d883a 	mov	r6,r17
   82e88:	01c000c4 	movi	r7,3
   82e8c:	da003f15 	stw	r8,252(sp)
   82e90:	da403e15 	stw	r9,248(sp)
   82e94:	008376c0 	call	8376c <_dtoa_r>
   82e98:	da403e17 	ldw	r9,248(sp)
   82e9c:	da003f17 	ldw	r8,252(sp)
   82ea0:	d8803115 	stw	r2,196(sp)
   82ea4:	482b883a 	mov	r21,r9
   82ea8:	d8c03117 	ldw	r3,196(sp)
   82eac:	00801184 	movi	r2,70
   82eb0:	1d55883a 	add	r10,r3,r21
   82eb4:	98bebb1e 	bne	r19,r2,829a4 <__alt_data_end+0xfffb95c4>
   82eb8:	19000007 	ldb	r4,0(r3)
   82ebc:	00800c04 	movi	r2,48
   82ec0:	2080df26 	beq	r4,r2,83240 <___vfprintf_internal_r+0x1f88>
   82ec4:	d8c02617 	ldw	r3,152(sp)
   82ec8:	50d5883a 	add	r10,r10,r3
   82ecc:	003eb506 	br	829a4 <__alt_data_end+0xfffb95c4>
   82ed0:	0023883a 	mov	r17,zero
   82ed4:	003d9b06 	br	82544 <__alt_data_end+0xfffb9164>
   82ed8:	b809883a 	mov	r4,r23
   82edc:	b00b883a 	mov	r5,r22
   82ee0:	d9801e04 	addi	r6,sp,120
   82ee4:	00887880 	call	88788 <__sprint_r>
   82ee8:	1039e81e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82eec:	d8c02017 	ldw	r3,128(sp)
   82ef0:	da000404 	addi	r8,sp,16
   82ef4:	003d9206 	br	82540 <__alt_data_end+0xfffb9160>
   82ef8:	b809883a 	mov	r4,r23
   82efc:	b00b883a 	mov	r5,r22
   82f00:	d9801e04 	addi	r6,sp,120
   82f04:	00887880 	call	88788 <__sprint_r>
   82f08:	1039e01e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82f0c:	d8802617 	ldw	r2,152(sp)
   82f10:	d8c02017 	ldw	r3,128(sp)
   82f14:	da000404 	addi	r8,sp,16
   82f18:	003dfb06 	br	82708 <__alt_data_end+0xfffb9328>
   82f1c:	01000274 	movhi	r4,9
   82f20:	2103c884 	addi	r4,r4,3874
   82f24:	d9002c15 	stw	r4,176(sp)
   82f28:	d9002c17 	ldw	r4,176(sp)
   82f2c:	1c07883a 	add	r3,r3,r16
   82f30:	10800044 	addi	r2,r2,1
   82f34:	41000015 	stw	r4,0(r8)
   82f38:	44000115 	stw	r16,4(r8)
   82f3c:	d8c02015 	stw	r3,128(sp)
   82f40:	d8801f15 	stw	r2,124(sp)
   82f44:	010001c4 	movi	r4,7
   82f48:	20bfae16 	blt	r4,r2,82e04 <__alt_data_end+0xfffb9a24>
   82f4c:	42000204 	addi	r8,r8,8
   82f50:	003fb406 	br	82e24 <__alt_data_end+0xfffb9a44>
   82f54:	00800184 	movi	r2,6
   82f58:	1240012e 	bgeu	r2,r9,82f60 <___vfprintf_internal_r+0x1ca8>
   82f5c:	1013883a 	mov	r9,r2
   82f60:	4823883a 	mov	r17,r9
   82f64:	4805883a 	mov	r2,r9
   82f68:	4800ac16 	blt	r9,zero,8321c <___vfprintf_internal_r+0x1f64>
   82f6c:	01400274 	movhi	r5,9
   82f70:	2943c604 	addi	r5,r5,3864
   82f74:	d8802b15 	stw	r2,172(sp)
   82f78:	dc802d15 	stw	r18,180(sp)
   82f7c:	d8003215 	stw	zero,200(sp)
   82f80:	d8003415 	stw	zero,208(sp)
   82f84:	d9403115 	stw	r5,196(sp)
   82f88:	0005883a 	mov	r2,zero
   82f8c:	003a2e06 	br	81848 <__alt_data_end+0xfffb8468>
   82f90:	0021883a 	mov	r16,zero
   82f94:	003dee06 	br	82750 <__alt_data_end+0xfffb9370>
   82f98:	01400274 	movhi	r5,9
   82f9c:	2943cc84 	addi	r5,r5,3890
   82fa0:	d9403615 	stw	r5,216(sp)
   82fa4:	003ad806 	br	81b08 <__alt_data_end+0xfffb8728>
   82fa8:	b809883a 	mov	r4,r23
   82fac:	b00b883a 	mov	r5,r22
   82fb0:	d9801e04 	addi	r6,sp,120
   82fb4:	00887880 	call	88788 <__sprint_r>
   82fb8:	1039b41e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   82fbc:	d8802617 	ldw	r2,152(sp)
   82fc0:	d9403317 	ldw	r5,204(sp)
   82fc4:	d8c02017 	ldw	r3,128(sp)
   82fc8:	da000404 	addi	r8,sp,16
   82fcc:	2885c83a 	sub	r2,r5,r2
   82fd0:	003dde06 	br	8274c <__alt_data_end+0xfffb936c>
   82fd4:	01400274 	movhi	r5,9
   82fd8:	2943bb04 	addi	r5,r5,3820
   82fdc:	d9403115 	stw	r5,196(sp)
   82fe0:	003f2e06 	br	82c9c <__alt_data_end+0xfffb98bc>
   82fe4:	00800b44 	movi	r2,45
   82fe8:	d8802785 	stb	r2,158(sp)
   82fec:	df002b15 	stw	fp,172(sp)
   82ff0:	d8003215 	stw	zero,200(sp)
   82ff4:	df002d17 	ldw	fp,180(sp)
   82ff8:	00800b44 	movi	r2,45
   82ffc:	dc802d15 	stw	r18,180(sp)
   83000:	003a0e06 	br	8183c <__alt_data_end+0xfffb845c>
   83004:	d8c02617 	ldw	r3,152(sp)
   83008:	00bfff44 	movi	r2,-3
   8300c:	18801b16 	blt	r3,r2,8307c <___vfprintf_internal_r+0x1dc4>
   83010:	48c01a16 	blt	r9,r3,8307c <___vfprintf_internal_r+0x1dc4>
   83014:	d8c03415 	stw	r3,208(sp)
   83018:	040019c4 	movi	r16,103
   8301c:	003e8006 	br	82a20 <__alt_data_end+0xfffb9640>
   83020:	04c00b44 	movi	r19,45
   83024:	dcc02785 	stb	r19,158(sp)
   83028:	003af106 	br	81bf0 <__alt_data_end+0xfffb8810>
   8302c:	d8c02d17 	ldw	r3,180(sp)
   83030:	d9002f17 	ldw	r4,188(sp)
   83034:	18800017 	ldw	r2,0(r3)
   83038:	18c00104 	addi	r3,r3,4
   8303c:	d8c02d15 	stw	r3,180(sp)
   83040:	11000015 	stw	r4,0(r2)
   83044:	0038d706 	br	813a4 <__alt_data_end+0xfffb7fc4>
   83048:	01000274 	movhi	r4,9
   8304c:	2103c884 	addi	r4,r4,3874
   83050:	d9002c15 	stw	r4,176(sp)
   83054:	003c8e06 	br	82290 <__alt_data_end+0xfffb8eb0>
   83058:	5005883a 	mov	r2,r10
   8305c:	003e6506 	br	829f4 <__alt_data_end+0xfffb9614>
   83060:	da402b15 	stw	r9,172(sp)
   83064:	dcc02783 	ldbu	r19,158(sp)
   83068:	4823883a 	mov	r17,r9
   8306c:	dc802d15 	stw	r18,180(sp)
   83070:	d8003215 	stw	zero,200(sp)
   83074:	d8003415 	stw	zero,208(sp)
   83078:	0039ec06 	br	8182c <__alt_data_end+0xfffb844c>
   8307c:	843fff84 	addi	r16,r16,-2
   83080:	1d7fffc4 	addi	r21,r3,-1
   83084:	dd402615 	stw	r21,152(sp)
   83088:	dc0022c5 	stb	r16,139(sp)
   8308c:	a8009616 	blt	r21,zero,832e8 <___vfprintf_internal_r+0x2030>
   83090:	00800ac4 	movi	r2,43
   83094:	d8802305 	stb	r2,140(sp)
   83098:	00800244 	movi	r2,9
   8309c:	1540610e 	bge	r2,r21,83224 <___vfprintf_internal_r+0x1f6c>
   830a0:	dcc022c4 	addi	r19,sp,139
   830a4:	dc002c15 	stw	r16,176(sp)
   830a8:	4023883a 	mov	r17,r8
   830ac:	9821883a 	mov	r16,r19
   830b0:	a809883a 	mov	r4,r21
   830b4:	01400284 	movi	r5,10
   830b8:	00810900 	call	81090 <__modsi3>
   830bc:	10800c04 	addi	r2,r2,48
   830c0:	843fffc4 	addi	r16,r16,-1
   830c4:	a809883a 	mov	r4,r21
   830c8:	01400284 	movi	r5,10
   830cc:	80800005 	stb	r2,0(r16)
   830d0:	008103c0 	call	8103c <__divsi3>
   830d4:	01000244 	movi	r4,9
   830d8:	102b883a 	mov	r21,r2
   830dc:	20bff416 	blt	r4,r2,830b0 <__alt_data_end+0xfffb9cd0>
   830e0:	8811883a 	mov	r8,r17
   830e4:	10800c04 	addi	r2,r2,48
   830e8:	8023883a 	mov	r17,r16
   830ec:	897fffc4 	addi	r5,r17,-1
   830f0:	88bfffc5 	stb	r2,-1(r17)
   830f4:	dc002c17 	ldw	r16,176(sp)
   830f8:	2cc07f2e 	bgeu	r5,r19,832f8 <___vfprintf_internal_r+0x2040>
   830fc:	d9802384 	addi	r6,sp,142
   83100:	344dc83a 	sub	r6,r6,r17
   83104:	d9002344 	addi	r4,sp,141
   83108:	998d883a 	add	r6,r19,r6
   8310c:	00000106 	br	83114 <___vfprintf_internal_r+0x1e5c>
   83110:	28800003 	ldbu	r2,0(r5)
   83114:	20800005 	stb	r2,0(r4)
   83118:	21000044 	addi	r4,r4,1
   8311c:	29400044 	addi	r5,r5,1
   83120:	21bffb1e 	bne	r4,r6,83110 <__alt_data_end+0xfffb9d30>
   83124:	d8802304 	addi	r2,sp,140
   83128:	1445c83a 	sub	r2,r2,r17
   8312c:	d9402344 	addi	r5,sp,141
   83130:	2885883a 	add	r2,r5,r2
   83134:	14e7c83a 	sub	r19,r2,r19
   83138:	d8803317 	ldw	r2,204(sp)
   8313c:	d8c03317 	ldw	r3,204(sp)
   83140:	dcc03a15 	stw	r19,232(sp)
   83144:	14e3883a 	add	r17,r2,r19
   83148:	00800044 	movi	r2,1
   8314c:	10c04e0e 	bge	r2,r3,83288 <___vfprintf_internal_r+0x1fd0>
   83150:	8c400044 	addi	r17,r17,1
   83154:	8839883a 	mov	fp,r17
   83158:	88004916 	blt	r17,zero,83280 <___vfprintf_internal_r+0x1fc8>
   8315c:	d8003415 	stw	zero,208(sp)
   83160:	003e3806 	br	82a44 <__alt_data_end+0xfffb9664>
   83164:	483de91e 	bne	r9,zero,8290c <__alt_data_end+0xfffb952c>
   83168:	8813883a 	mov	r9,r17
   8316c:	003de706 	br	8290c <__alt_data_end+0xfffb952c>
   83170:	b809883a 	mov	r4,r23
   83174:	b00b883a 	mov	r5,r22
   83178:	d9801e04 	addi	r6,sp,120
   8317c:	00887880 	call	88788 <__sprint_r>
   83180:	1039421e 	bne	r2,zero,8168c <__alt_data_end+0xfffb82ac>
   83184:	dc002617 	ldw	r16,152(sp)
   83188:	d8c02017 	ldw	r3,128(sp)
   8318c:	d8801f17 	ldw	r2,124(sp)
   83190:	da000404 	addi	r8,sp,16
   83194:	003ea006 	br	82c18 <__alt_data_end+0xfffb9838>
   83198:	02400184 	movi	r9,6
   8319c:	003ddb06 	br	8290c <__alt_data_end+0xfffb952c>
   831a0:	00c00b44 	movi	r3,45
   831a4:	2460003c 	xorhi	r17,r4,32768
   831a8:	d8c02b05 	stb	r3,172(sp)
   831ac:	003ddd06 	br	82924 <__alt_data_end+0xfffb9544>
   831b0:	d8c03417 	ldw	r3,208(sp)
   831b4:	00c03d0e 	bge	zero,r3,832ac <___vfprintf_internal_r+0x1ff4>
   831b8:	04400044 	movi	r17,1
   831bc:	d9003317 	ldw	r4,204(sp)
   831c0:	8923883a 	add	r17,r17,r4
   831c4:	8839883a 	mov	fp,r17
   831c8:	883e1e0e 	bge	r17,zero,82a44 <__alt_data_end+0xfffb9664>
   831cc:	0039883a 	mov	fp,zero
   831d0:	003e1c06 	br	82a44 <__alt_data_end+0xfffb9664>
   831d4:	4d400044 	addi	r21,r9,1
   831d8:	003dd906 	br	82940 <__alt_data_end+0xfffb9560>
   831dc:	1839883a 	mov	fp,r3
   831e0:	18004716 	blt	r3,zero,83300 <___vfprintf_internal_r+0x2048>
   831e4:	dc403417 	ldw	r17,208(sp)
   831e8:	003e1606 	br	82a44 <__alt_data_end+0xfffb9664>
   831ec:	00c0290e 	bge	zero,r3,83294 <___vfprintf_internal_r+0x1fdc>
   831f0:	4800021e 	bne	r9,zero,831fc <___vfprintf_internal_r+0x1f44>
   831f4:	e080004c 	andi	r2,fp,1
   831f8:	103ff826 	beq	r2,zero,831dc <__alt_data_end+0xfffb9dfc>
   831fc:	d8c03417 	ldw	r3,208(sp)
   83200:	4a400044 	addi	r9,r9,1
   83204:	1a63883a 	add	r17,r3,r9
   83208:	8839883a 	mov	fp,r17
   8320c:	883e0d0e 	bge	r17,zero,82a44 <__alt_data_end+0xfffb9664>
   83210:	003fee06 	br	831cc <__alt_data_end+0xfffb9dec>
   83214:	d8802117 	ldw	r2,132(sp)
   83218:	003df606 	br	829f4 <__alt_data_end+0xfffb9614>
   8321c:	0005883a 	mov	r2,zero
   83220:	003f5206 	br	82f6c <__alt_data_end+0xfffb9b8c>
   83224:	00800c04 	movi	r2,48
   83228:	a8c00c04 	addi	r3,r21,48
   8322c:	d8802345 	stb	r2,141(sp)
   83230:	d8c02385 	stb	r3,142(sp)
   83234:	d88023c4 	addi	r2,sp,143
   83238:	dcc022c4 	addi	r19,sp,139
   8323c:	003fbd06 	br	83134 <__alt_data_end+0xfffb9d54>
   83240:	d9003717 	ldw	r4,220(sp)
   83244:	880b883a 	mov	r5,r17
   83248:	000d883a 	mov	r6,zero
   8324c:	000f883a 	mov	r7,zero
   83250:	da003f15 	stw	r8,252(sp)
   83254:	da403e15 	stw	r9,248(sp)
   83258:	da803d15 	stw	r10,244(sp)
   8325c:	008c31c0 	call	8c31c <__eqdf2>
   83260:	da003f17 	ldw	r8,252(sp)
   83264:	da403e17 	ldw	r9,248(sp)
   83268:	da803d17 	ldw	r10,244(sp)
   8326c:	103f1526 	beq	r2,zero,82ec4 <__alt_data_end+0xfffb9ae4>
   83270:	00800044 	movi	r2,1
   83274:	1547c83a 	sub	r3,r2,r21
   83278:	d8c02615 	stw	r3,152(sp)
   8327c:	003f1206 	br	82ec8 <__alt_data_end+0xfffb9ae8>
   83280:	0039883a 	mov	fp,zero
   83284:	003fb506 	br	8315c <__alt_data_end+0xfffb9d7c>
   83288:	e084703a 	and	r2,fp,r2
   8328c:	103fb126 	beq	r2,zero,83154 <__alt_data_end+0xfffb9d74>
   83290:	003faf06 	br	83150 <__alt_data_end+0xfffb9d70>
   83294:	4800081e 	bne	r9,zero,832b8 <___vfprintf_internal_r+0x2000>
   83298:	e080004c 	andi	r2,fp,1
   8329c:	1000061e 	bne	r2,zero,832b8 <___vfprintf_internal_r+0x2000>
   832a0:	07000044 	movi	fp,1
   832a4:	e023883a 	mov	r17,fp
   832a8:	003de606 	br	82a44 <__alt_data_end+0xfffb9664>
   832ac:	04400084 	movi	r17,2
   832b0:	88e3c83a 	sub	r17,r17,r3
   832b4:	003fc106 	br	831bc <__alt_data_end+0xfffb9ddc>
   832b8:	4c400084 	addi	r17,r9,2
   832bc:	8839883a 	mov	fp,r17
   832c0:	883de00e 	bge	r17,zero,82a44 <__alt_data_end+0xfffb9664>
   832c4:	003fc106 	br	831cc <__alt_data_end+0xfffb9dec>
   832c8:	d9402d17 	ldw	r5,180(sp)
   832cc:	2a400017 	ldw	r9,0(r5)
   832d0:	28c00104 	addi	r3,r5,4
   832d4:	d8c02d15 	stw	r3,180(sp)
   832d8:	483eb50e 	bge	r9,zero,82db0 <__alt_data_end+0xfffb99d0>
   832dc:	027fffc4 	movi	r9,-1
   832e0:	e4000047 	ldb	r16,1(fp)
   832e4:	00385a06 	br	81450 <__alt_data_end+0xfffb8070>
   832e8:	00800b44 	movi	r2,45
   832ec:	056bc83a 	sub	r21,zero,r21
   832f0:	d8802305 	stb	r2,140(sp)
   832f4:	003f6806 	br	83098 <__alt_data_end+0xfffb9cb8>
   832f8:	d8802344 	addi	r2,sp,141
   832fc:	003f8d06 	br	83134 <__alt_data_end+0xfffb9d54>
   83300:	0039883a 	mov	fp,zero
   83304:	003fb706 	br	831e4 <__alt_data_end+0xfffb9e04>
   83308:	d8c02617 	ldw	r3,152(sp)
   8330c:	003f5c06 	br	83080 <__alt_data_end+0xfffb9ca0>

00083310 <__vfprintf_internal>:
   83310:	2007883a 	mov	r3,r4
   83314:	01000274 	movhi	r4,9
   83318:	210b4704 	addi	r4,r4,11548
   8331c:	21000017 	ldw	r4,0(r4)
   83320:	2805883a 	mov	r2,r5
   83324:	300f883a 	mov	r7,r6
   83328:	180b883a 	mov	r5,r3
   8332c:	100d883a 	mov	r6,r2
   83330:	00812b81 	jmpi	812b8 <___vfprintf_internal_r>

00083334 <__sbprintf>:
   83334:	2880030b 	ldhu	r2,12(r5)
   83338:	2ac01917 	ldw	r11,100(r5)
   8333c:	2a80038b 	ldhu	r10,14(r5)
   83340:	2a400717 	ldw	r9,28(r5)
   83344:	2a000917 	ldw	r8,36(r5)
   83348:	defee204 	addi	sp,sp,-1144
   8334c:	00c10004 	movi	r3,1024
   83350:	dc011a15 	stw	r16,1128(sp)
   83354:	10bfff4c 	andi	r2,r2,65533
   83358:	2821883a 	mov	r16,r5
   8335c:	d8cb883a 	add	r5,sp,r3
   83360:	dc811c15 	stw	r18,1136(sp)
   83364:	dc411b15 	stw	r17,1132(sp)
   83368:	dfc11d15 	stw	ra,1140(sp)
   8336c:	2025883a 	mov	r18,r4
   83370:	d881030d 	sth	r2,1036(sp)
   83374:	dac11915 	stw	r11,1124(sp)
   83378:	da81038d 	sth	r10,1038(sp)
   8337c:	da410715 	stw	r9,1052(sp)
   83380:	da010915 	stw	r8,1060(sp)
   83384:	dec10015 	stw	sp,1024(sp)
   83388:	dec10415 	stw	sp,1040(sp)
   8338c:	d8c10215 	stw	r3,1032(sp)
   83390:	d8c10515 	stw	r3,1044(sp)
   83394:	d8010615 	stw	zero,1048(sp)
   83398:	00812b80 	call	812b8 <___vfprintf_internal_r>
   8339c:	1023883a 	mov	r17,r2
   833a0:	10000416 	blt	r2,zero,833b4 <__sbprintf+0x80>
   833a4:	9009883a 	mov	r4,r18
   833a8:	d9410004 	addi	r5,sp,1024
   833ac:	008509c0 	call	8509c <_fflush_r>
   833b0:	10000d1e 	bne	r2,zero,833e8 <__sbprintf+0xb4>
   833b4:	d8c1030b 	ldhu	r3,1036(sp)
   833b8:	18c0100c 	andi	r3,r3,64
   833bc:	18000326 	beq	r3,zero,833cc <__sbprintf+0x98>
   833c0:	8080030b 	ldhu	r2,12(r16)
   833c4:	10801014 	ori	r2,r2,64
   833c8:	8080030d 	sth	r2,12(r16)
   833cc:	8805883a 	mov	r2,r17
   833d0:	dfc11d17 	ldw	ra,1140(sp)
   833d4:	dc811c17 	ldw	r18,1136(sp)
   833d8:	dc411b17 	ldw	r17,1132(sp)
   833dc:	dc011a17 	ldw	r16,1128(sp)
   833e0:	dec11e04 	addi	sp,sp,1144
   833e4:	f800283a 	ret
   833e8:	047fffc4 	movi	r17,-1
   833ec:	003ff106 	br	833b4 <__alt_data_end+0xfffb9fd4>

000833f0 <__swsetup_r>:
   833f0:	00800274 	movhi	r2,9
   833f4:	defffd04 	addi	sp,sp,-12
   833f8:	108b4704 	addi	r2,r2,11548
   833fc:	dc400115 	stw	r17,4(sp)
   83400:	2023883a 	mov	r17,r4
   83404:	11000017 	ldw	r4,0(r2)
   83408:	dc000015 	stw	r16,0(sp)
   8340c:	dfc00215 	stw	ra,8(sp)
   83410:	2821883a 	mov	r16,r5
   83414:	20000226 	beq	r4,zero,83420 <__swsetup_r+0x30>
   83418:	20c00e17 	ldw	r3,56(r4)
   8341c:	18003126 	beq	r3,zero,834e4 <__swsetup_r+0xf4>
   83420:	8080030b 	ldhu	r2,12(r16)
   83424:	10c0020c 	andi	r3,r2,8
   83428:	100d883a 	mov	r6,r2
   8342c:	18000f26 	beq	r3,zero,8346c <__swsetup_r+0x7c>
   83430:	80c00417 	ldw	r3,16(r16)
   83434:	18001526 	beq	r3,zero,8348c <__swsetup_r+0x9c>
   83438:	1100004c 	andi	r4,r2,1
   8343c:	20001c1e 	bne	r4,zero,834b0 <__swsetup_r+0xc0>
   83440:	1080008c 	andi	r2,r2,2
   83444:	1000291e 	bne	r2,zero,834ec <__swsetup_r+0xfc>
   83448:	80800517 	ldw	r2,20(r16)
   8344c:	80800215 	stw	r2,8(r16)
   83450:	18001c26 	beq	r3,zero,834c4 <__swsetup_r+0xd4>
   83454:	0005883a 	mov	r2,zero
   83458:	dfc00217 	ldw	ra,8(sp)
   8345c:	dc400117 	ldw	r17,4(sp)
   83460:	dc000017 	ldw	r16,0(sp)
   83464:	dec00304 	addi	sp,sp,12
   83468:	f800283a 	ret
   8346c:	3080040c 	andi	r2,r6,16
   83470:	10002e26 	beq	r2,zero,8352c <__swsetup_r+0x13c>
   83474:	3080010c 	andi	r2,r6,4
   83478:	10001e1e 	bne	r2,zero,834f4 <__swsetup_r+0x104>
   8347c:	80c00417 	ldw	r3,16(r16)
   83480:	30800214 	ori	r2,r6,8
   83484:	8080030d 	sth	r2,12(r16)
   83488:	183feb1e 	bne	r3,zero,83438 <__alt_data_end+0xfffba058>
   8348c:	1140a00c 	andi	r5,r2,640
   83490:	01008004 	movi	r4,512
   83494:	293fe826 	beq	r5,r4,83438 <__alt_data_end+0xfffba058>
   83498:	8809883a 	mov	r4,r17
   8349c:	800b883a 	mov	r5,r16
   834a0:	00860200 	call	86020 <__smakebuf_r>
   834a4:	8080030b 	ldhu	r2,12(r16)
   834a8:	80c00417 	ldw	r3,16(r16)
   834ac:	003fe206 	br	83438 <__alt_data_end+0xfffba058>
   834b0:	80800517 	ldw	r2,20(r16)
   834b4:	80000215 	stw	zero,8(r16)
   834b8:	0085c83a 	sub	r2,zero,r2
   834bc:	80800615 	stw	r2,24(r16)
   834c0:	183fe41e 	bne	r3,zero,83454 <__alt_data_end+0xfffba074>
   834c4:	80c0030b 	ldhu	r3,12(r16)
   834c8:	0005883a 	mov	r2,zero
   834cc:	1900200c 	andi	r4,r3,128
   834d0:	203fe126 	beq	r4,zero,83458 <__alt_data_end+0xfffba078>
   834d4:	18c01014 	ori	r3,r3,64
   834d8:	80c0030d 	sth	r3,12(r16)
   834dc:	00bfffc4 	movi	r2,-1
   834e0:	003fdd06 	br	83458 <__alt_data_end+0xfffba078>
   834e4:	00854880 	call	85488 <__sinit>
   834e8:	003fcd06 	br	83420 <__alt_data_end+0xfffba040>
   834ec:	0005883a 	mov	r2,zero
   834f0:	003fd606 	br	8344c <__alt_data_end+0xfffba06c>
   834f4:	81400c17 	ldw	r5,48(r16)
   834f8:	28000626 	beq	r5,zero,83514 <__swsetup_r+0x124>
   834fc:	80801004 	addi	r2,r16,64
   83500:	28800326 	beq	r5,r2,83510 <__swsetup_r+0x120>
   83504:	8809883a 	mov	r4,r17
   83508:	00855fc0 	call	855fc <_free_r>
   8350c:	8180030b 	ldhu	r6,12(r16)
   83510:	80000c15 	stw	zero,48(r16)
   83514:	80c00417 	ldw	r3,16(r16)
   83518:	00bff6c4 	movi	r2,-37
   8351c:	118c703a 	and	r6,r2,r6
   83520:	80000115 	stw	zero,4(r16)
   83524:	80c00015 	stw	r3,0(r16)
   83528:	003fd506 	br	83480 <__alt_data_end+0xfffba0a0>
   8352c:	00800244 	movi	r2,9
   83530:	88800015 	stw	r2,0(r17)
   83534:	30801014 	ori	r2,r6,64
   83538:	8080030d 	sth	r2,12(r16)
   8353c:	00bfffc4 	movi	r2,-1
   83540:	003fc506 	br	83458 <__alt_data_end+0xfffba078>

00083544 <quorem>:
   83544:	defff204 	addi	sp,sp,-56
   83548:	ddc00b15 	stw	r23,44(sp)
   8354c:	20800417 	ldw	r2,16(r4)
   83550:	2dc00417 	ldw	r23,16(r5)
   83554:	dfc00d15 	stw	ra,52(sp)
   83558:	df000c15 	stw	fp,48(sp)
   8355c:	dd800a15 	stw	r22,40(sp)
   83560:	dd400915 	stw	r21,36(sp)
   83564:	dd000815 	stw	r20,32(sp)
   83568:	dcc00715 	stw	r19,28(sp)
   8356c:	dc800615 	stw	r18,24(sp)
   83570:	dc400515 	stw	r17,20(sp)
   83574:	dc000415 	stw	r16,16(sp)
   83578:	15c07a16 	blt	r2,r23,83764 <quorem+0x220>
   8357c:	bdffffc4 	addi	r23,r23,-1
   83580:	bde9883a 	add	r20,r23,r23
   83584:	28c00504 	addi	r3,r5,20
   83588:	a529883a 	add	r20,r20,r20
   8358c:	1d39883a 	add	fp,r3,r20
   83590:	24c00504 	addi	r19,r4,20
   83594:	d9400215 	stw	r5,8(sp)
   83598:	9d29883a 	add	r20,r19,r20
   8359c:	e1400017 	ldw	r5,0(fp)
   835a0:	d9000015 	stw	r4,0(sp)
   835a4:	a1000017 	ldw	r4,0(r20)
   835a8:	29400044 	addi	r5,r5,1
   835ac:	d8c00115 	stw	r3,4(sp)
   835b0:	dd000315 	stw	r20,12(sp)
   835b4:	00810ec0 	call	810ec <__udivsi3>
   835b8:	1025883a 	mov	r18,r2
   835bc:	10003026 	beq	r2,zero,83680 <quorem+0x13c>
   835c0:	dc400117 	ldw	r17,4(sp)
   835c4:	9829883a 	mov	r20,r19
   835c8:	002d883a 	mov	r22,zero
   835cc:	0021883a 	mov	r16,zero
   835d0:	8d400017 	ldw	r21,0(r17)
   835d4:	900b883a 	mov	r5,r18
   835d8:	8c400104 	addi	r17,r17,4
   835dc:	a93fffcc 	andi	r4,r21,65535
   835e0:	008b0d80 	call	8b0d8 <__mulsi3>
   835e4:	a808d43a 	srli	r4,r21,16
   835e8:	900b883a 	mov	r5,r18
   835ec:	b0ad883a 	add	r22,r22,r2
   835f0:	008b0d80 	call	8b0d8 <__mulsi3>
   835f4:	a1000017 	ldw	r4,0(r20)
   835f8:	b00cd43a 	srli	r6,r22,16
   835fc:	b0ffffcc 	andi	r3,r22,65535
   83600:	217fffcc 	andi	r5,r4,65535
   83604:	2c21883a 	add	r16,r5,r16
   83608:	80c7c83a 	sub	r3,r16,r3
   8360c:	2008d43a 	srli	r4,r4,16
   83610:	3085883a 	add	r2,r6,r2
   83614:	1821d43a 	srai	r16,r3,16
   83618:	117fffcc 	andi	r5,r2,65535
   8361c:	2149c83a 	sub	r4,r4,r5
   83620:	2421883a 	add	r16,r4,r16
   83624:	8008943a 	slli	r4,r16,16
   83628:	18ffffcc 	andi	r3,r3,65535
   8362c:	102cd43a 	srli	r22,r2,16
   83630:	20c8b03a 	or	r4,r4,r3
   83634:	a1000015 	stw	r4,0(r20)
   83638:	8021d43a 	srai	r16,r16,16
   8363c:	a5000104 	addi	r20,r20,4
   83640:	e47fe32e 	bgeu	fp,r17,835d0 <__alt_data_end+0xfffba1f0>
   83644:	d8c00317 	ldw	r3,12(sp)
   83648:	18800017 	ldw	r2,0(r3)
   8364c:	10000c1e 	bne	r2,zero,83680 <quorem+0x13c>
   83650:	18bfff04 	addi	r2,r3,-4
   83654:	9880082e 	bgeu	r19,r2,83678 <quorem+0x134>
   83658:	18ffff17 	ldw	r3,-4(r3)
   8365c:	18000326 	beq	r3,zero,8366c <quorem+0x128>
   83660:	00000506 	br	83678 <quorem+0x134>
   83664:	10c00017 	ldw	r3,0(r2)
   83668:	1800031e 	bne	r3,zero,83678 <quorem+0x134>
   8366c:	10bfff04 	addi	r2,r2,-4
   83670:	bdffffc4 	addi	r23,r23,-1
   83674:	98bffb36 	bltu	r19,r2,83664 <__alt_data_end+0xfffba284>
   83678:	d8c00017 	ldw	r3,0(sp)
   8367c:	1dc00415 	stw	r23,16(r3)
   83680:	d9000017 	ldw	r4,0(sp)
   83684:	d9400217 	ldw	r5,8(sp)
   83688:	00877b00 	call	877b0 <__mcmp>
   8368c:	10002816 	blt	r2,zero,83730 <quorem+0x1ec>
   83690:	dc400117 	ldw	r17,4(sp)
   83694:	94800044 	addi	r18,r18,1
   83698:	980d883a 	mov	r6,r19
   8369c:	0007883a 	mov	r3,zero
   836a0:	31000017 	ldw	r4,0(r6)
   836a4:	89400017 	ldw	r5,0(r17)
   836a8:	31800104 	addi	r6,r6,4
   836ac:	20bfffcc 	andi	r2,r4,65535
   836b0:	10c7883a 	add	r3,r2,r3
   836b4:	28bfffcc 	andi	r2,r5,65535
   836b8:	1885c83a 	sub	r2,r3,r2
   836bc:	280ad43a 	srli	r5,r5,16
   836c0:	2008d43a 	srli	r4,r4,16
   836c4:	1007d43a 	srai	r3,r2,16
   836c8:	10bfffcc 	andi	r2,r2,65535
   836cc:	2149c83a 	sub	r4,r4,r5
   836d0:	20c9883a 	add	r4,r4,r3
   836d4:	200a943a 	slli	r5,r4,16
   836d8:	8c400104 	addi	r17,r17,4
   836dc:	2007d43a 	srai	r3,r4,16
   836e0:	2884b03a 	or	r2,r5,r2
   836e4:	30bfff15 	stw	r2,-4(r6)
   836e8:	e47fed2e 	bgeu	fp,r17,836a0 <__alt_data_end+0xfffba2c0>
   836ec:	bdc5883a 	add	r2,r23,r23
   836f0:	1085883a 	add	r2,r2,r2
   836f4:	9887883a 	add	r3,r19,r2
   836f8:	18800017 	ldw	r2,0(r3)
   836fc:	10000c1e 	bne	r2,zero,83730 <quorem+0x1ec>
   83700:	18bfff04 	addi	r2,r3,-4
   83704:	9880082e 	bgeu	r19,r2,83728 <quorem+0x1e4>
   83708:	18ffff17 	ldw	r3,-4(r3)
   8370c:	18000326 	beq	r3,zero,8371c <quorem+0x1d8>
   83710:	00000506 	br	83728 <quorem+0x1e4>
   83714:	10c00017 	ldw	r3,0(r2)
   83718:	1800031e 	bne	r3,zero,83728 <quorem+0x1e4>
   8371c:	10bfff04 	addi	r2,r2,-4
   83720:	bdffffc4 	addi	r23,r23,-1
   83724:	98bffb36 	bltu	r19,r2,83714 <__alt_data_end+0xfffba334>
   83728:	d8c00017 	ldw	r3,0(sp)
   8372c:	1dc00415 	stw	r23,16(r3)
   83730:	9005883a 	mov	r2,r18
   83734:	dfc00d17 	ldw	ra,52(sp)
   83738:	df000c17 	ldw	fp,48(sp)
   8373c:	ddc00b17 	ldw	r23,44(sp)
   83740:	dd800a17 	ldw	r22,40(sp)
   83744:	dd400917 	ldw	r21,36(sp)
   83748:	dd000817 	ldw	r20,32(sp)
   8374c:	dcc00717 	ldw	r19,28(sp)
   83750:	dc800617 	ldw	r18,24(sp)
   83754:	dc400517 	ldw	r17,20(sp)
   83758:	dc000417 	ldw	r16,16(sp)
   8375c:	dec00e04 	addi	sp,sp,56
   83760:	f800283a 	ret
   83764:	0005883a 	mov	r2,zero
   83768:	003ff206 	br	83734 <__alt_data_end+0xfffba354>

0008376c <_dtoa_r>:
   8376c:	20801017 	ldw	r2,64(r4)
   83770:	deffde04 	addi	sp,sp,-136
   83774:	dd401d15 	stw	r21,116(sp)
   83778:	dcc01b15 	stw	r19,108(sp)
   8377c:	dc801a15 	stw	r18,104(sp)
   83780:	dc401915 	stw	r17,100(sp)
   83784:	dc001815 	stw	r16,96(sp)
   83788:	dfc02115 	stw	ra,132(sp)
   8378c:	df002015 	stw	fp,128(sp)
   83790:	ddc01f15 	stw	r23,124(sp)
   83794:	dd801e15 	stw	r22,120(sp)
   83798:	dd001c15 	stw	r20,112(sp)
   8379c:	d9c00315 	stw	r7,12(sp)
   837a0:	2021883a 	mov	r16,r4
   837a4:	302b883a 	mov	r21,r6
   837a8:	2825883a 	mov	r18,r5
   837ac:	dc402417 	ldw	r17,144(sp)
   837b0:	3027883a 	mov	r19,r6
   837b4:	10000826 	beq	r2,zero,837d8 <_dtoa_r+0x6c>
   837b8:	21801117 	ldw	r6,68(r4)
   837bc:	00c00044 	movi	r3,1
   837c0:	100b883a 	mov	r5,r2
   837c4:	1986983a 	sll	r3,r3,r6
   837c8:	11800115 	stw	r6,4(r2)
   837cc:	10c00215 	stw	r3,8(r2)
   837d0:	0086ec80 	call	86ec8 <_Bfree>
   837d4:	80001015 	stw	zero,64(r16)
   837d8:	a8002d16 	blt	r21,zero,83890 <_dtoa_r+0x124>
   837dc:	88000015 	stw	zero,0(r17)
   837e0:	a8dffc2c 	andhi	r3,r21,32752
   837e4:	009ffc34 	movhi	r2,32752
   837e8:	18801b26 	beq	r3,r2,83858 <_dtoa_r+0xec>
   837ec:	9009883a 	mov	r4,r18
   837f0:	980b883a 	mov	r5,r19
   837f4:	000d883a 	mov	r6,zero
   837f8:	000f883a 	mov	r7,zero
   837fc:	008c31c0 	call	8c31c <__eqdf2>
   83800:	10002a1e 	bne	r2,zero,838ac <_dtoa_r+0x140>
   83804:	d8c02317 	ldw	r3,140(sp)
   83808:	d9002517 	ldw	r4,148(sp)
   8380c:	00800044 	movi	r2,1
   83810:	18800015 	stw	r2,0(r3)
   83814:	2001a226 	beq	r4,zero,83ea0 <_dtoa_r+0x734>
   83818:	00800274 	movhi	r2,9
   8381c:	1083c844 	addi	r2,r2,3873
   83820:	20800015 	stw	r2,0(r4)
   83824:	10bfffc4 	addi	r2,r2,-1
   83828:	dfc02117 	ldw	ra,132(sp)
   8382c:	df002017 	ldw	fp,128(sp)
   83830:	ddc01f17 	ldw	r23,124(sp)
   83834:	dd801e17 	ldw	r22,120(sp)
   83838:	dd401d17 	ldw	r21,116(sp)
   8383c:	dd001c17 	ldw	r20,112(sp)
   83840:	dcc01b17 	ldw	r19,108(sp)
   83844:	dc801a17 	ldw	r18,104(sp)
   83848:	dc401917 	ldw	r17,100(sp)
   8384c:	dc001817 	ldw	r16,96(sp)
   83850:	dec02204 	addi	sp,sp,136
   83854:	f800283a 	ret
   83858:	d8c02317 	ldw	r3,140(sp)
   8385c:	0089c3c4 	movi	r2,9999
   83860:	18800015 	stw	r2,0(r3)
   83864:	90017c26 	beq	r18,zero,83e58 <_dtoa_r+0x6ec>
   83868:	00800274 	movhi	r2,9
   8386c:	1083d404 	addi	r2,r2,3920
   83870:	d9002517 	ldw	r4,148(sp)
   83874:	203fec26 	beq	r4,zero,83828 <__alt_data_end+0xfffba448>
   83878:	10c000c7 	ldb	r3,3(r2)
   8387c:	18017d1e 	bne	r3,zero,83e74 <_dtoa_r+0x708>
   83880:	10c000c4 	addi	r3,r2,3
   83884:	d9802517 	ldw	r6,148(sp)
   83888:	30c00015 	stw	r3,0(r6)
   8388c:	003fe606 	br	83828 <__alt_data_end+0xfffba448>
   83890:	04e00034 	movhi	r19,32768
   83894:	9cffffc4 	addi	r19,r19,-1
   83898:	00800044 	movi	r2,1
   8389c:	ace6703a 	and	r19,r21,r19
   838a0:	88800015 	stw	r2,0(r17)
   838a4:	982b883a 	mov	r21,r19
   838a8:	003fcd06 	br	837e0 <__alt_data_end+0xfffba400>
   838ac:	d8800204 	addi	r2,sp,8
   838b0:	a822d53a 	srli	r17,r21,20
   838b4:	d8800015 	stw	r2,0(sp)
   838b8:	8009883a 	mov	r4,r16
   838bc:	900b883a 	mov	r5,r18
   838c0:	980d883a 	mov	r6,r19
   838c4:	d9c00104 	addi	r7,sp,4
   838c8:	0087b240 	call	87b24 <__d2b>
   838cc:	1039883a 	mov	fp,r2
   838d0:	88016a1e 	bne	r17,zero,83e7c <_dtoa_r+0x710>
   838d4:	dd000217 	ldw	r20,8(sp)
   838d8:	dc400117 	ldw	r17,4(sp)
   838dc:	00befbc4 	movi	r2,-1041
   838e0:	a463883a 	add	r17,r20,r17
   838e4:	8882ea16 	blt	r17,r2,84490 <_dtoa_r+0xd24>
   838e8:	00bf0384 	movi	r2,-1010
   838ec:	1445c83a 	sub	r2,r2,r17
   838f0:	89010484 	addi	r4,r17,1042
   838f4:	a8aa983a 	sll	r21,r21,r2
   838f8:	9108d83a 	srl	r4,r18,r4
   838fc:	a908b03a 	or	r4,r21,r4
   83900:	008d7f40 	call	8d7f4 <__floatunsidf>
   83904:	017f8434 	movhi	r5,65040
   83908:	01800044 	movi	r6,1
   8390c:	1009883a 	mov	r4,r2
   83910:	194b883a 	add	r5,r3,r5
   83914:	8c7fffc4 	addi	r17,r17,-1
   83918:	d9800f15 	stw	r6,60(sp)
   8391c:	000d883a 	mov	r6,zero
   83920:	01cffe34 	movhi	r7,16376
   83924:	008cdcc0 	call	8cdcc <__subdf3>
   83928:	0198dbf4 	movhi	r6,25455
   8392c:	01cff4f4 	movhi	r7,16339
   83930:	1009883a 	mov	r4,r2
   83934:	180b883a 	mov	r5,r3
   83938:	3190d844 	addi	r6,r6,17249
   8393c:	39e1e9c4 	addi	r7,r7,-30809
   83940:	008c5600 	call	8c560 <__muldf3>
   83944:	01a2d874 	movhi	r6,35681
   83948:	01cff1f4 	movhi	r7,16327
   8394c:	180b883a 	mov	r5,r3
   83950:	31b22cc4 	addi	r6,r6,-14157
   83954:	39e28a04 	addi	r7,r7,-30168
   83958:	1009883a 	mov	r4,r2
   8395c:	008b1000 	call	8b100 <__adddf3>
   83960:	8809883a 	mov	r4,r17
   83964:	102d883a 	mov	r22,r2
   83968:	182b883a 	mov	r21,r3
   8396c:	008d7240 	call	8d724 <__floatsidf>
   83970:	019427f4 	movhi	r6,20639
   83974:	01cff4f4 	movhi	r7,16339
   83978:	1009883a 	mov	r4,r2
   8397c:	180b883a 	mov	r5,r3
   83980:	319e7ec4 	addi	r6,r6,31227
   83984:	39d104c4 	addi	r7,r7,17427
   83988:	008c5600 	call	8c560 <__muldf3>
   8398c:	b009883a 	mov	r4,r22
   83990:	a80b883a 	mov	r5,r21
   83994:	100d883a 	mov	r6,r2
   83998:	180f883a 	mov	r7,r3
   8399c:	008b1000 	call	8b100 <__adddf3>
   839a0:	1009883a 	mov	r4,r2
   839a4:	180b883a 	mov	r5,r3
   839a8:	102d883a 	mov	r22,r2
   839ac:	182b883a 	mov	r21,r3
   839b0:	008d69c0 	call	8d69c <__fixdfsi>
   839b4:	b009883a 	mov	r4,r22
   839b8:	a80b883a 	mov	r5,r21
   839bc:	000d883a 	mov	r6,zero
   839c0:	000f883a 	mov	r7,zero
   839c4:	d8800515 	stw	r2,20(sp)
   839c8:	008c4800 	call	8c480 <__ledf2>
   839cc:	10023116 	blt	r2,zero,84294 <_dtoa_r+0xb28>
   839d0:	d8c00517 	ldw	r3,20(sp)
   839d4:	00800584 	movi	r2,22
   839d8:	10c21f36 	bltu	r2,r3,84258 <_dtoa_r+0xaec>
   839dc:	180490fa 	slli	r2,r3,3
   839e0:	00c00274 	movhi	r3,9
   839e4:	18c3f004 	addi	r3,r3,4032
   839e8:	1885883a 	add	r2,r3,r2
   839ec:	11000017 	ldw	r4,0(r2)
   839f0:	11400117 	ldw	r5,4(r2)
   839f4:	900d883a 	mov	r6,r18
   839f8:	980f883a 	mov	r7,r19
   839fc:	008c3a00 	call	8c3a0 <__gedf2>
   83a00:	0082a70e 	bge	zero,r2,844a0 <_dtoa_r+0xd34>
   83a04:	d9000517 	ldw	r4,20(sp)
   83a08:	d8000d15 	stw	zero,52(sp)
   83a0c:	213fffc4 	addi	r4,r4,-1
   83a10:	d9000515 	stw	r4,20(sp)
   83a14:	a463c83a 	sub	r17,r20,r17
   83a18:	8dbfffc4 	addi	r22,r17,-1
   83a1c:	b0021916 	blt	r22,zero,84284 <_dtoa_r+0xb18>
   83a20:	d8000815 	stw	zero,32(sp)
   83a24:	d8800517 	ldw	r2,20(sp)
   83a28:	10020e16 	blt	r2,zero,84264 <_dtoa_r+0xaf8>
   83a2c:	b0ad883a 	add	r22,r22,r2
   83a30:	d8800a15 	stw	r2,40(sp)
   83a34:	d8000915 	stw	zero,36(sp)
   83a38:	d8c00317 	ldw	r3,12(sp)
   83a3c:	00800244 	movi	r2,9
   83a40:	10c11a36 	bltu	r2,r3,83eac <_dtoa_r+0x740>
   83a44:	00800144 	movi	r2,5
   83a48:	10c4fc0e 	bge	r2,r3,84e3c <_dtoa_r+0x16d0>
   83a4c:	18ffff04 	addi	r3,r3,-4
   83a50:	d8c00315 	stw	r3,12(sp)
   83a54:	0029883a 	mov	r20,zero
   83a58:	d9800317 	ldw	r6,12(sp)
   83a5c:	008000c4 	movi	r2,3
   83a60:	3083bd26 	beq	r6,r2,84958 <_dtoa_r+0x11ec>
   83a64:	1183670e 	bge	r2,r6,84804 <_dtoa_r+0x1098>
   83a68:	d8c00317 	ldw	r3,12(sp)
   83a6c:	00800104 	movi	r2,4
   83a70:	1882e726 	beq	r3,r2,84610 <_dtoa_r+0xea4>
   83a74:	00800144 	movi	r2,5
   83a78:	1884f21e 	bne	r3,r2,84e44 <_dtoa_r+0x16d8>
   83a7c:	00800044 	movi	r2,1
   83a80:	d8800b15 	stw	r2,44(sp)
   83a84:	d8c02217 	ldw	r3,136(sp)
   83a88:	d9000517 	ldw	r4,20(sp)
   83a8c:	1907883a 	add	r3,r3,r4
   83a90:	19800044 	addi	r6,r3,1
   83a94:	d8c00c15 	stw	r3,48(sp)
   83a98:	d9800615 	stw	r6,24(sp)
   83a9c:	0183c30e 	bge	zero,r6,849ac <_dtoa_r+0x1240>
   83aa0:	d9800617 	ldw	r6,24(sp)
   83aa4:	3023883a 	mov	r17,r6
   83aa8:	80001115 	stw	zero,68(r16)
   83aac:	008005c4 	movi	r2,23
   83ab0:	1184f62e 	bgeu	r2,r6,84e8c <_dtoa_r+0x1720>
   83ab4:	00c00044 	movi	r3,1
   83ab8:	00800104 	movi	r2,4
   83abc:	1085883a 	add	r2,r2,r2
   83ac0:	11000504 	addi	r4,r2,20
   83ac4:	180b883a 	mov	r5,r3
   83ac8:	18c00044 	addi	r3,r3,1
   83acc:	313ffb2e 	bgeu	r6,r4,83abc <__alt_data_end+0xfffba6dc>
   83ad0:	81401115 	stw	r5,68(r16)
   83ad4:	8009883a 	mov	r4,r16
   83ad8:	0086e200 	call	86e20 <_Balloc>
   83adc:	d8800715 	stw	r2,28(sp)
   83ae0:	80801015 	stw	r2,64(r16)
   83ae4:	00800384 	movi	r2,14
   83ae8:	1440fd36 	bltu	r2,r17,83ee0 <_dtoa_r+0x774>
   83aec:	a000fc26 	beq	r20,zero,83ee0 <_dtoa_r+0x774>
   83af0:	d8800517 	ldw	r2,20(sp)
   83af4:	0083b90e 	bge	zero,r2,849dc <_dtoa_r+0x1270>
   83af8:	d8c00517 	ldw	r3,20(sp)
   83afc:	108003cc 	andi	r2,r2,15
   83b00:	100490fa 	slli	r2,r2,3
   83b04:	182fd13a 	srai	r23,r3,4
   83b08:	00c00274 	movhi	r3,9
   83b0c:	18c3f004 	addi	r3,r3,4032
   83b10:	1885883a 	add	r2,r3,r2
   83b14:	b8c0040c 	andi	r3,r23,16
   83b18:	12c00017 	ldw	r11,0(r2)
   83b1c:	12800117 	ldw	r10,4(r2)
   83b20:	18039726 	beq	r3,zero,84980 <_dtoa_r+0x1214>
   83b24:	00800274 	movhi	r2,9
   83b28:	1083e604 	addi	r2,r2,3992
   83b2c:	11800817 	ldw	r6,32(r2)
   83b30:	11c00917 	ldw	r7,36(r2)
   83b34:	9009883a 	mov	r4,r18
   83b38:	980b883a 	mov	r5,r19
   83b3c:	da801615 	stw	r10,88(sp)
   83b40:	dac01515 	stw	r11,84(sp)
   83b44:	008b99c0 	call	8b99c <__divdf3>
   83b48:	da801617 	ldw	r10,88(sp)
   83b4c:	dac01517 	ldw	r11,84(sp)
   83b50:	bdc003cc 	andi	r23,r23,15
   83b54:	044000c4 	movi	r17,3
   83b58:	d8800e15 	stw	r2,56(sp)
   83b5c:	182b883a 	mov	r21,r3
   83b60:	b8001126 	beq	r23,zero,83ba8 <_dtoa_r+0x43c>
   83b64:	05000274 	movhi	r20,9
   83b68:	a503e604 	addi	r20,r20,3992
   83b6c:	5805883a 	mov	r2,r11
   83b70:	5007883a 	mov	r3,r10
   83b74:	b980004c 	andi	r6,r23,1
   83b78:	1009883a 	mov	r4,r2
   83b7c:	b82fd07a 	srai	r23,r23,1
   83b80:	180b883a 	mov	r5,r3
   83b84:	30000426 	beq	r6,zero,83b98 <_dtoa_r+0x42c>
   83b88:	a1800017 	ldw	r6,0(r20)
   83b8c:	a1c00117 	ldw	r7,4(r20)
   83b90:	8c400044 	addi	r17,r17,1
   83b94:	008c5600 	call	8c560 <__muldf3>
   83b98:	a5000204 	addi	r20,r20,8
   83b9c:	b83ff51e 	bne	r23,zero,83b74 <__alt_data_end+0xfffba794>
   83ba0:	1017883a 	mov	r11,r2
   83ba4:	1815883a 	mov	r10,r3
   83ba8:	d9000e17 	ldw	r4,56(sp)
   83bac:	a80b883a 	mov	r5,r21
   83bb0:	580d883a 	mov	r6,r11
   83bb4:	500f883a 	mov	r7,r10
   83bb8:	008b99c0 	call	8b99c <__divdf3>
   83bbc:	1029883a 	mov	r20,r2
   83bc0:	182b883a 	mov	r21,r3
   83bc4:	d9800d17 	ldw	r6,52(sp)
   83bc8:	30000626 	beq	r6,zero,83be4 <_dtoa_r+0x478>
   83bcc:	a009883a 	mov	r4,r20
   83bd0:	a80b883a 	mov	r5,r21
   83bd4:	000d883a 	mov	r6,zero
   83bd8:	01cffc34 	movhi	r7,16368
   83bdc:	008c4800 	call	8c480 <__ledf2>
   83be0:	10043216 	blt	r2,zero,84cac <_dtoa_r+0x1540>
   83be4:	8809883a 	mov	r4,r17
   83be8:	008d7240 	call	8d724 <__floatsidf>
   83bec:	1009883a 	mov	r4,r2
   83bf0:	180b883a 	mov	r5,r3
   83bf4:	a00d883a 	mov	r6,r20
   83bf8:	a80f883a 	mov	r7,r21
   83bfc:	008c5600 	call	8c560 <__muldf3>
   83c00:	000d883a 	mov	r6,zero
   83c04:	1009883a 	mov	r4,r2
   83c08:	180b883a 	mov	r5,r3
   83c0c:	01d00734 	movhi	r7,16412
   83c10:	008b1000 	call	8b100 <__adddf3>
   83c14:	1023883a 	mov	r17,r2
   83c18:	d9800617 	ldw	r6,24(sp)
   83c1c:	00bf3034 	movhi	r2,64704
   83c20:	1885883a 	add	r2,r3,r2
   83c24:	d8800e15 	stw	r2,56(sp)
   83c28:	30032e26 	beq	r6,zero,848e4 <_dtoa_r+0x1178>
   83c2c:	d8c00517 	ldw	r3,20(sp)
   83c30:	da800617 	ldw	r10,24(sp)
   83c34:	d8c01215 	stw	r3,72(sp)
   83c38:	d9000b17 	ldw	r4,44(sp)
   83c3c:	2003b026 	beq	r4,zero,84b00 <_dtoa_r+0x1394>
   83c40:	50bfffc4 	addi	r2,r10,-1
   83c44:	100490fa 	slli	r2,r2,3
   83c48:	00c00274 	movhi	r3,9
   83c4c:	18c3f004 	addi	r3,r3,4032
   83c50:	1885883a 	add	r2,r3,r2
   83c54:	11800017 	ldw	r6,0(r2)
   83c58:	11c00117 	ldw	r7,4(r2)
   83c5c:	d8800717 	ldw	r2,28(sp)
   83c60:	0009883a 	mov	r4,zero
   83c64:	014ff834 	movhi	r5,16352
   83c68:	da801615 	stw	r10,88(sp)
   83c6c:	15c00044 	addi	r23,r2,1
   83c70:	008b99c0 	call	8b99c <__divdf3>
   83c74:	d9c00e17 	ldw	r7,56(sp)
   83c78:	880d883a 	mov	r6,r17
   83c7c:	1009883a 	mov	r4,r2
   83c80:	180b883a 	mov	r5,r3
   83c84:	008cdcc0 	call	8cdcc <__subdf3>
   83c88:	a80b883a 	mov	r5,r21
   83c8c:	a009883a 	mov	r4,r20
   83c90:	d8c01015 	stw	r3,64(sp)
   83c94:	d8800e15 	stw	r2,56(sp)
   83c98:	008d69c0 	call	8d69c <__fixdfsi>
   83c9c:	1009883a 	mov	r4,r2
   83ca0:	d8801715 	stw	r2,92(sp)
   83ca4:	008d7240 	call	8d724 <__floatsidf>
   83ca8:	a009883a 	mov	r4,r20
   83cac:	a80b883a 	mov	r5,r21
   83cb0:	100d883a 	mov	r6,r2
   83cb4:	180f883a 	mov	r7,r3
   83cb8:	008cdcc0 	call	8cdcc <__subdf3>
   83cbc:	da001717 	ldw	r8,92(sp)
   83cc0:	1829883a 	mov	r20,r3
   83cc4:	d8c00717 	ldw	r3,28(sp)
   83cc8:	d9000e17 	ldw	r4,56(sp)
   83ccc:	d9401017 	ldw	r5,64(sp)
   83cd0:	42000c04 	addi	r8,r8,48
   83cd4:	1023883a 	mov	r17,r2
   83cd8:	1a000005 	stb	r8,0(r3)
   83cdc:	880d883a 	mov	r6,r17
   83ce0:	a00f883a 	mov	r7,r20
   83ce4:	402b883a 	mov	r21,r8
   83ce8:	008c3a00 	call	8c3a0 <__gedf2>
   83cec:	00844516 	blt	zero,r2,84e04 <_dtoa_r+0x1698>
   83cf0:	0009883a 	mov	r4,zero
   83cf4:	014ffc34 	movhi	r5,16368
   83cf8:	880d883a 	mov	r6,r17
   83cfc:	a00f883a 	mov	r7,r20
   83d00:	008cdcc0 	call	8cdcc <__subdf3>
   83d04:	d9000e17 	ldw	r4,56(sp)
   83d08:	d9401017 	ldw	r5,64(sp)
   83d0c:	100d883a 	mov	r6,r2
   83d10:	180f883a 	mov	r7,r3
   83d14:	008c3a00 	call	8c3a0 <__gedf2>
   83d18:	da801617 	ldw	r10,88(sp)
   83d1c:	00843616 	blt	zero,r2,84df8 <_dtoa_r+0x168c>
   83d20:	00800044 	movi	r2,1
   83d24:	12806e0e 	bge	r2,r10,83ee0 <_dtoa_r+0x774>
   83d28:	d9000717 	ldw	r4,28(sp)
   83d2c:	dd801315 	stw	r22,76(sp)
   83d30:	dc001115 	stw	r16,68(sp)
   83d34:	2295883a 	add	r10,r4,r10
   83d38:	dcc01415 	stw	r19,80(sp)
   83d3c:	502d883a 	mov	r22,r10
   83d40:	dcc01017 	ldw	r19,64(sp)
   83d44:	b821883a 	mov	r16,r23
   83d48:	dc801015 	stw	r18,64(sp)
   83d4c:	dc800e17 	ldw	r18,56(sp)
   83d50:	00000906 	br	83d78 <_dtoa_r+0x60c>
   83d54:	008cdcc0 	call	8cdcc <__subdf3>
   83d58:	1009883a 	mov	r4,r2
   83d5c:	180b883a 	mov	r5,r3
   83d60:	900d883a 	mov	r6,r18
   83d64:	980f883a 	mov	r7,r19
   83d68:	008c4800 	call	8c480 <__ledf2>
   83d6c:	10040e16 	blt	r2,zero,84da8 <_dtoa_r+0x163c>
   83d70:	b821883a 	mov	r16,r23
   83d74:	bd841026 	beq	r23,r22,84db8 <_dtoa_r+0x164c>
   83d78:	9009883a 	mov	r4,r18
   83d7c:	980b883a 	mov	r5,r19
   83d80:	000d883a 	mov	r6,zero
   83d84:	01d00934 	movhi	r7,16420
   83d88:	008c5600 	call	8c560 <__muldf3>
   83d8c:	000d883a 	mov	r6,zero
   83d90:	01d00934 	movhi	r7,16420
   83d94:	8809883a 	mov	r4,r17
   83d98:	a00b883a 	mov	r5,r20
   83d9c:	1025883a 	mov	r18,r2
   83da0:	1827883a 	mov	r19,r3
   83da4:	008c5600 	call	8c560 <__muldf3>
   83da8:	180b883a 	mov	r5,r3
   83dac:	1009883a 	mov	r4,r2
   83db0:	1823883a 	mov	r17,r3
   83db4:	1029883a 	mov	r20,r2
   83db8:	008d69c0 	call	8d69c <__fixdfsi>
   83dbc:	1009883a 	mov	r4,r2
   83dc0:	102b883a 	mov	r21,r2
   83dc4:	008d7240 	call	8d724 <__floatsidf>
   83dc8:	a009883a 	mov	r4,r20
   83dcc:	880b883a 	mov	r5,r17
   83dd0:	100d883a 	mov	r6,r2
   83dd4:	180f883a 	mov	r7,r3
   83dd8:	008cdcc0 	call	8cdcc <__subdf3>
   83ddc:	ad400c04 	addi	r21,r21,48
   83de0:	1009883a 	mov	r4,r2
   83de4:	180b883a 	mov	r5,r3
   83de8:	900d883a 	mov	r6,r18
   83dec:	980f883a 	mov	r7,r19
   83df0:	85400005 	stb	r21,0(r16)
   83df4:	1023883a 	mov	r17,r2
   83df8:	1829883a 	mov	r20,r3
   83dfc:	008c4800 	call	8c480 <__ledf2>
   83e00:	bdc00044 	addi	r23,r23,1
   83e04:	0009883a 	mov	r4,zero
   83e08:	014ffc34 	movhi	r5,16368
   83e0c:	880d883a 	mov	r6,r17
   83e10:	a00f883a 	mov	r7,r20
   83e14:	103fcf0e 	bge	r2,zero,83d54 <__alt_data_end+0xfffba974>
   83e18:	d9801217 	ldw	r6,72(sp)
   83e1c:	dc001117 	ldw	r16,68(sp)
   83e20:	d9800515 	stw	r6,20(sp)
   83e24:	8009883a 	mov	r4,r16
   83e28:	e00b883a 	mov	r5,fp
   83e2c:	0086ec80 	call	86ec8 <_Bfree>
   83e30:	d8c00517 	ldw	r3,20(sp)
   83e34:	d9002317 	ldw	r4,140(sp)
   83e38:	d9802517 	ldw	r6,148(sp)
   83e3c:	b8000005 	stb	zero,0(r23)
   83e40:	18800044 	addi	r2,r3,1
   83e44:	20800015 	stw	r2,0(r4)
   83e48:	30027226 	beq	r6,zero,84814 <_dtoa_r+0x10a8>
   83e4c:	35c00015 	stw	r23,0(r6)
   83e50:	d8800717 	ldw	r2,28(sp)
   83e54:	003e7406 	br	83828 <__alt_data_end+0xfffba448>
   83e58:	00800434 	movhi	r2,16
   83e5c:	10bfffc4 	addi	r2,r2,-1
   83e60:	a8aa703a 	and	r21,r21,r2
   83e64:	a83e801e 	bne	r21,zero,83868 <__alt_data_end+0xfffba488>
   83e68:	00800274 	movhi	r2,9
   83e6c:	1083d104 	addi	r2,r2,3908
   83e70:	003e7f06 	br	83870 <__alt_data_end+0xfffba490>
   83e74:	10c00204 	addi	r3,r2,8
   83e78:	003e8206 	br	83884 <__alt_data_end+0xfffba4a4>
   83e7c:	01400434 	movhi	r5,16
   83e80:	297fffc4 	addi	r5,r5,-1
   83e84:	994a703a 	and	r5,r19,r5
   83e88:	9009883a 	mov	r4,r18
   83e8c:	8c7f0044 	addi	r17,r17,-1023
   83e90:	294ffc34 	orhi	r5,r5,16368
   83e94:	dd000217 	ldw	r20,8(sp)
   83e98:	d8000f15 	stw	zero,60(sp)
   83e9c:	003e9f06 	br	8391c <__alt_data_end+0xfffba53c>
   83ea0:	00800274 	movhi	r2,9
   83ea4:	1083c804 	addi	r2,r2,3872
   83ea8:	003e5f06 	br	83828 <__alt_data_end+0xfffba448>
   83eac:	80001115 	stw	zero,68(r16)
   83eb0:	8009883a 	mov	r4,r16
   83eb4:	000b883a 	mov	r5,zero
   83eb8:	0086e200 	call	86e20 <_Balloc>
   83ebc:	01bfffc4 	movi	r6,-1
   83ec0:	d8800715 	stw	r2,28(sp)
   83ec4:	80801015 	stw	r2,64(r16)
   83ec8:	00800044 	movi	r2,1
   83ecc:	d9800c15 	stw	r6,48(sp)
   83ed0:	d8800b15 	stw	r2,44(sp)
   83ed4:	d9800615 	stw	r6,24(sp)
   83ed8:	d8002215 	stw	zero,136(sp)
   83edc:	d8000315 	stw	zero,12(sp)
   83ee0:	d8800117 	ldw	r2,4(sp)
   83ee4:	10008e16 	blt	r2,zero,84120 <_dtoa_r+0x9b4>
   83ee8:	d9000517 	ldw	r4,20(sp)
   83eec:	00c00384 	movi	r3,14
   83ef0:	19008b16 	blt	r3,r4,84120 <_dtoa_r+0x9b4>
   83ef4:	200490fa 	slli	r2,r4,3
   83ef8:	00c00274 	movhi	r3,9
   83efc:	d9802217 	ldw	r6,136(sp)
   83f00:	18c3f004 	addi	r3,r3,4032
   83f04:	1885883a 	add	r2,r3,r2
   83f08:	14400017 	ldw	r17,0(r2)
   83f0c:	15000117 	ldw	r20,4(r2)
   83f10:	3001c716 	blt	r6,zero,84630 <_dtoa_r+0xec4>
   83f14:	880d883a 	mov	r6,r17
   83f18:	a00f883a 	mov	r7,r20
   83f1c:	9009883a 	mov	r4,r18
   83f20:	980b883a 	mov	r5,r19
   83f24:	008b99c0 	call	8b99c <__divdf3>
   83f28:	180b883a 	mov	r5,r3
   83f2c:	1009883a 	mov	r4,r2
   83f30:	008d69c0 	call	8d69c <__fixdfsi>
   83f34:	1009883a 	mov	r4,r2
   83f38:	102d883a 	mov	r22,r2
   83f3c:	008d7240 	call	8d724 <__floatsidf>
   83f40:	1009883a 	mov	r4,r2
   83f44:	180b883a 	mov	r5,r3
   83f48:	880d883a 	mov	r6,r17
   83f4c:	a00f883a 	mov	r7,r20
   83f50:	008c5600 	call	8c560 <__muldf3>
   83f54:	9009883a 	mov	r4,r18
   83f58:	980b883a 	mov	r5,r19
   83f5c:	100d883a 	mov	r6,r2
   83f60:	180f883a 	mov	r7,r3
   83f64:	008cdcc0 	call	8cdcc <__subdf3>
   83f68:	d9000717 	ldw	r4,28(sp)
   83f6c:	d9800617 	ldw	r6,24(sp)
   83f70:	180b883a 	mov	r5,r3
   83f74:	b0c00c04 	addi	r3,r22,48
   83f78:	20c00005 	stb	r3,0(r4)
   83f7c:	25c00044 	addi	r23,r4,1
   83f80:	01000044 	movi	r4,1
   83f84:	1011883a 	mov	r8,r2
   83f88:	2807883a 	mov	r3,r5
   83f8c:	31003d26 	beq	r6,r4,84084 <_dtoa_r+0x918>
   83f90:	000d883a 	mov	r6,zero
   83f94:	01d00934 	movhi	r7,16420
   83f98:	1009883a 	mov	r4,r2
   83f9c:	008c5600 	call	8c560 <__muldf3>
   83fa0:	1009883a 	mov	r4,r2
   83fa4:	180b883a 	mov	r5,r3
   83fa8:	000d883a 	mov	r6,zero
   83fac:	000f883a 	mov	r7,zero
   83fb0:	1027883a 	mov	r19,r2
   83fb4:	182b883a 	mov	r21,r3
   83fb8:	008c31c0 	call	8c31c <__eqdf2>
   83fbc:	103f9926 	beq	r2,zero,83e24 <__alt_data_end+0xfffbaa44>
   83fc0:	d8c00617 	ldw	r3,24(sp)
   83fc4:	d9000717 	ldw	r4,28(sp)
   83fc8:	b825883a 	mov	r18,r23
   83fcc:	18bfffc4 	addi	r2,r3,-1
   83fd0:	20ad883a 	add	r22,r4,r2
   83fd4:	dc000315 	stw	r16,12(sp)
   83fd8:	00000a06 	br	84004 <_dtoa_r+0x898>
   83fdc:	008c5600 	call	8c560 <__muldf3>
   83fe0:	1009883a 	mov	r4,r2
   83fe4:	180b883a 	mov	r5,r3
   83fe8:	000d883a 	mov	r6,zero
   83fec:	000f883a 	mov	r7,zero
   83ff0:	1027883a 	mov	r19,r2
   83ff4:	182b883a 	mov	r21,r3
   83ff8:	b825883a 	mov	r18,r23
   83ffc:	008c31c0 	call	8c31c <__eqdf2>
   84000:	10022626 	beq	r2,zero,8489c <_dtoa_r+0x1130>
   84004:	880d883a 	mov	r6,r17
   84008:	a00f883a 	mov	r7,r20
   8400c:	9809883a 	mov	r4,r19
   84010:	a80b883a 	mov	r5,r21
   84014:	008b99c0 	call	8b99c <__divdf3>
   84018:	180b883a 	mov	r5,r3
   8401c:	1009883a 	mov	r4,r2
   84020:	008d69c0 	call	8d69c <__fixdfsi>
   84024:	1009883a 	mov	r4,r2
   84028:	1021883a 	mov	r16,r2
   8402c:	008d7240 	call	8d724 <__floatsidf>
   84030:	1009883a 	mov	r4,r2
   84034:	180b883a 	mov	r5,r3
   84038:	880d883a 	mov	r6,r17
   8403c:	a00f883a 	mov	r7,r20
   84040:	008c5600 	call	8c560 <__muldf3>
   84044:	9809883a 	mov	r4,r19
   84048:	a80b883a 	mov	r5,r21
   8404c:	100d883a 	mov	r6,r2
   84050:	180f883a 	mov	r7,r3
   84054:	008cdcc0 	call	8cdcc <__subdf3>
   84058:	82000c04 	addi	r8,r16,48
   8405c:	92000005 	stb	r8,0(r18)
   84060:	1009883a 	mov	r4,r2
   84064:	180b883a 	mov	r5,r3
   84068:	000d883a 	mov	r6,zero
   8406c:	01d00934 	movhi	r7,16420
   84070:	1011883a 	mov	r8,r2
   84074:	bdc00044 	addi	r23,r23,1
   84078:	95bfd81e 	bne	r18,r22,83fdc <__alt_data_end+0xfffbabfc>
   8407c:	802d883a 	mov	r22,r16
   84080:	dc000317 	ldw	r16,12(sp)
   84084:	4009883a 	mov	r4,r8
   84088:	180b883a 	mov	r5,r3
   8408c:	400d883a 	mov	r6,r8
   84090:	180f883a 	mov	r7,r3
   84094:	008b1000 	call	8b100 <__adddf3>
   84098:	8809883a 	mov	r4,r17
   8409c:	a00b883a 	mov	r5,r20
   840a0:	100d883a 	mov	r6,r2
   840a4:	180f883a 	mov	r7,r3
   840a8:	1027883a 	mov	r19,r2
   840ac:	1825883a 	mov	r18,r3
   840b0:	008c4800 	call	8c480 <__ledf2>
   840b4:	10000816 	blt	r2,zero,840d8 <_dtoa_r+0x96c>
   840b8:	8809883a 	mov	r4,r17
   840bc:	a00b883a 	mov	r5,r20
   840c0:	980d883a 	mov	r6,r19
   840c4:	900f883a 	mov	r7,r18
   840c8:	008c31c0 	call	8c31c <__eqdf2>
   840cc:	103f551e 	bne	r2,zero,83e24 <__alt_data_end+0xfffbaa44>
   840d0:	b580004c 	andi	r22,r22,1
   840d4:	b03f5326 	beq	r22,zero,83e24 <__alt_data_end+0xfffbaa44>
   840d8:	bd7fffc3 	ldbu	r21,-1(r23)
   840dc:	b8bfffc4 	addi	r2,r23,-1
   840e0:	1007883a 	mov	r3,r2
   840e4:	01400e44 	movi	r5,57
   840e8:	d9800717 	ldw	r6,28(sp)
   840ec:	00000506 	br	84104 <_dtoa_r+0x998>
   840f0:	18ffffc4 	addi	r3,r3,-1
   840f4:	30825e26 	beq	r6,r2,84a70 <_dtoa_r+0x1304>
   840f8:	1d400003 	ldbu	r21,0(r3)
   840fc:	102f883a 	mov	r23,r2
   84100:	10bfffc4 	addi	r2,r2,-1
   84104:	a9003fcc 	andi	r4,r21,255
   84108:	2100201c 	xori	r4,r4,128
   8410c:	213fe004 	addi	r4,r4,-128
   84110:	217ff726 	beq	r4,r5,840f0 <__alt_data_end+0xfffbad10>
   84114:	aa000044 	addi	r8,r21,1
   84118:	12000005 	stb	r8,0(r2)
   8411c:	003f4106 	br	83e24 <__alt_data_end+0xfffbaa44>
   84120:	d8c00b17 	ldw	r3,44(sp)
   84124:	18006726 	beq	r3,zero,842c4 <_dtoa_r+0xb58>
   84128:	d9000317 	ldw	r4,12(sp)
   8412c:	00c00044 	movi	r3,1
   84130:	19016a0e 	bge	r3,r4,846dc <_dtoa_r+0xf70>
   84134:	d8800617 	ldw	r2,24(sp)
   84138:	d8c00917 	ldw	r3,36(sp)
   8413c:	157fffc4 	addi	r21,r2,-1
   84140:	1d420716 	blt	r3,r21,84960 <_dtoa_r+0x11f4>
   84144:	1d6bc83a 	sub	r21,r3,r21
   84148:	d8800617 	ldw	r2,24(sp)
   8414c:	1002c716 	blt	r2,zero,84c6c <_dtoa_r+0x1500>
   84150:	dd000817 	ldw	r20,32(sp)
   84154:	d8800617 	ldw	r2,24(sp)
   84158:	d9800817 	ldw	r6,32(sp)
   8415c:	8009883a 	mov	r4,r16
   84160:	01400044 	movi	r5,1
   84164:	308d883a 	add	r6,r6,r2
   84168:	d9800815 	stw	r6,32(sp)
   8416c:	b0ad883a 	add	r22,r22,r2
   84170:	00872540 	call	87254 <__i2b>
   84174:	1023883a 	mov	r17,r2
   84178:	a0000826 	beq	r20,zero,8419c <_dtoa_r+0xa30>
   8417c:	0580070e 	bge	zero,r22,8419c <_dtoa_r+0xa30>
   84180:	b005883a 	mov	r2,r22
   84184:	a5812016 	blt	r20,r22,84608 <_dtoa_r+0xe9c>
   84188:	d8c00817 	ldw	r3,32(sp)
   8418c:	a0a9c83a 	sub	r20,r20,r2
   84190:	b0adc83a 	sub	r22,r22,r2
   84194:	1887c83a 	sub	r3,r3,r2
   84198:	d8c00815 	stw	r3,32(sp)
   8419c:	d9000917 	ldw	r4,36(sp)
   841a0:	0100140e 	bge	zero,r4,841f4 <_dtoa_r+0xa88>
   841a4:	d9800b17 	ldw	r6,44(sp)
   841a8:	3001e526 	beq	r6,zero,84940 <_dtoa_r+0x11d4>
   841ac:	05400e0e 	bge	zero,r21,841e8 <_dtoa_r+0xa7c>
   841b0:	880b883a 	mov	r5,r17
   841b4:	8009883a 	mov	r4,r16
   841b8:	a80d883a 	mov	r6,r21
   841bc:	00875200 	call	87520 <__pow5mult>
   841c0:	e00d883a 	mov	r6,fp
   841c4:	8009883a 	mov	r4,r16
   841c8:	100b883a 	mov	r5,r2
   841cc:	1023883a 	mov	r17,r2
   841d0:	00872900 	call	87290 <__multiply>
   841d4:	102f883a 	mov	r23,r2
   841d8:	e00b883a 	mov	r5,fp
   841dc:	8009883a 	mov	r4,r16
   841e0:	0086ec80 	call	86ec8 <_Bfree>
   841e4:	b839883a 	mov	fp,r23
   841e8:	d8800917 	ldw	r2,36(sp)
   841ec:	154dc83a 	sub	r6,r2,r21
   841f0:	3001281e 	bne	r6,zero,84694 <_dtoa_r+0xf28>
   841f4:	05c00044 	movi	r23,1
   841f8:	8009883a 	mov	r4,r16
   841fc:	b80b883a 	mov	r5,r23
   84200:	00872540 	call	87254 <__i2b>
   84204:	d8c00a17 	ldw	r3,40(sp)
   84208:	102b883a 	mov	r21,r2
   8420c:	00c0310e 	bge	zero,r3,842d4 <_dtoa_r+0xb68>
   84210:	8009883a 	mov	r4,r16
   84214:	100b883a 	mov	r5,r2
   84218:	180d883a 	mov	r6,r3
   8421c:	00875200 	call	87520 <__pow5mult>
   84220:	d9000317 	ldw	r4,12(sp)
   84224:	102b883a 	mov	r21,r2
   84228:	b9011f0e 	bge	r23,r4,846a8 <_dtoa_r+0xf3c>
   8422c:	0027883a 	mov	r19,zero
   84230:	a8800417 	ldw	r2,16(r21)
   84234:	10800104 	addi	r2,r2,4
   84238:	1085883a 	add	r2,r2,r2
   8423c:	1085883a 	add	r2,r2,r2
   84240:	a885883a 	add	r2,r21,r2
   84244:	11000017 	ldw	r4,0(r2)
   84248:	008713c0 	call	8713c <__hi0bits>
   8424c:	00c00804 	movi	r3,32
   84250:	1885c83a 	sub	r2,r3,r2
   84254:	00002506 	br	842ec <_dtoa_r+0xb80>
   84258:	01800044 	movi	r6,1
   8425c:	d9800d15 	stw	r6,52(sp)
   84260:	003dec06 	br	83a14 <__alt_data_end+0xfffba634>
   84264:	d8c00817 	ldw	r3,32(sp)
   84268:	d9000517 	ldw	r4,20(sp)
   8426c:	d8000a15 	stw	zero,40(sp)
   84270:	1907c83a 	sub	r3,r3,r4
   84274:	010dc83a 	sub	r6,zero,r4
   84278:	d8c00815 	stw	r3,32(sp)
   8427c:	d9800915 	stw	r6,36(sp)
   84280:	003ded06 	br	83a38 <__alt_data_end+0xfffba658>
   84284:	05adc83a 	sub	r22,zero,r22
   84288:	dd800815 	stw	r22,32(sp)
   8428c:	002d883a 	mov	r22,zero
   84290:	003de406 	br	83a24 <__alt_data_end+0xfffba644>
   84294:	d9000517 	ldw	r4,20(sp)
   84298:	008d7240 	call	8d724 <__floatsidf>
   8429c:	1009883a 	mov	r4,r2
   842a0:	180b883a 	mov	r5,r3
   842a4:	b00d883a 	mov	r6,r22
   842a8:	a80f883a 	mov	r7,r21
   842ac:	008c31c0 	call	8c31c <__eqdf2>
   842b0:	103dc726 	beq	r2,zero,839d0 <__alt_data_end+0xfffba5f0>
   842b4:	d8800517 	ldw	r2,20(sp)
   842b8:	10bfffc4 	addi	r2,r2,-1
   842bc:	d8800515 	stw	r2,20(sp)
   842c0:	003dc306 	br	839d0 <__alt_data_end+0xfffba5f0>
   842c4:	dd400917 	ldw	r21,36(sp)
   842c8:	dd000817 	ldw	r20,32(sp)
   842cc:	0023883a 	mov	r17,zero
   842d0:	003fa906 	br	84178 <__alt_data_end+0xfffbad98>
   842d4:	d9800317 	ldw	r6,12(sp)
   842d8:	b981670e 	bge	r23,r6,84878 <_dtoa_r+0x110c>
   842dc:	0027883a 	mov	r19,zero
   842e0:	d8c00a17 	ldw	r3,40(sp)
   842e4:	183fd21e 	bne	r3,zero,84230 <__alt_data_end+0xfffbae50>
   842e8:	00800044 	movi	r2,1
   842ec:	1585883a 	add	r2,r2,r22
   842f0:	108007cc 	andi	r2,r2,31
   842f4:	10005f26 	beq	r2,zero,84474 <_dtoa_r+0xd08>
   842f8:	00c00804 	movi	r3,32
   842fc:	1887c83a 	sub	r3,r3,r2
   84300:	01000104 	movi	r4,4
   84304:	20c2dd0e 	bge	r4,r3,84e7c <_dtoa_r+0x1710>
   84308:	d9000817 	ldw	r4,32(sp)
   8430c:	00c00704 	movi	r3,28
   84310:	1885c83a 	sub	r2,r3,r2
   84314:	2089883a 	add	r4,r4,r2
   84318:	d9000815 	stw	r4,32(sp)
   8431c:	a0a9883a 	add	r20,r20,r2
   84320:	b0ad883a 	add	r22,r22,r2
   84324:	d8800817 	ldw	r2,32(sp)
   84328:	0080050e 	bge	zero,r2,84340 <_dtoa_r+0xbd4>
   8432c:	e00b883a 	mov	r5,fp
   84330:	8009883a 	mov	r4,r16
   84334:	100d883a 	mov	r6,r2
   84338:	00876600 	call	87660 <__lshift>
   8433c:	1039883a 	mov	fp,r2
   84340:	0580050e 	bge	zero,r22,84358 <_dtoa_r+0xbec>
   84344:	a80b883a 	mov	r5,r21
   84348:	8009883a 	mov	r4,r16
   8434c:	b00d883a 	mov	r6,r22
   84350:	00876600 	call	87660 <__lshift>
   84354:	102b883a 	mov	r21,r2
   84358:	d8c00d17 	ldw	r3,52(sp)
   8435c:	1801161e 	bne	r3,zero,847b8 <_dtoa_r+0x104c>
   84360:	d8c00617 	ldw	r3,24(sp)
   84364:	00c12d0e 	bge	zero,r3,8481c <_dtoa_r+0x10b0>
   84368:	d8c00b17 	ldw	r3,44(sp)
   8436c:	1800571e 	bne	r3,zero,844cc <_dtoa_r+0xd60>
   84370:	dc800717 	ldw	r18,28(sp)
   84374:	dcc00617 	ldw	r19,24(sp)
   84378:	9029883a 	mov	r20,r18
   8437c:	00000206 	br	84388 <_dtoa_r+0xc1c>
   84380:	0086ef00 	call	86ef0 <__multadd>
   84384:	1039883a 	mov	fp,r2
   84388:	e009883a 	mov	r4,fp
   8438c:	a80b883a 	mov	r5,r21
   84390:	00835440 	call	83544 <quorem>
   84394:	10800c04 	addi	r2,r2,48
   84398:	90800005 	stb	r2,0(r18)
   8439c:	94800044 	addi	r18,r18,1
   843a0:	9507c83a 	sub	r3,r18,r20
   843a4:	8009883a 	mov	r4,r16
   843a8:	e00b883a 	mov	r5,fp
   843ac:	01800284 	movi	r6,10
   843b0:	000f883a 	mov	r7,zero
   843b4:	1cfff216 	blt	r3,r19,84380 <__alt_data_end+0xfffbafa0>
   843b8:	1011883a 	mov	r8,r2
   843bc:	d8800617 	ldw	r2,24(sp)
   843c0:	00822e0e 	bge	zero,r2,84c7c <_dtoa_r+0x1510>
   843c4:	d9000717 	ldw	r4,28(sp)
   843c8:	0025883a 	mov	r18,zero
   843cc:	20af883a 	add	r23,r4,r2
   843d0:	e00b883a 	mov	r5,fp
   843d4:	01800044 	movi	r6,1
   843d8:	8009883a 	mov	r4,r16
   843dc:	da001715 	stw	r8,92(sp)
   843e0:	00876600 	call	87660 <__lshift>
   843e4:	1009883a 	mov	r4,r2
   843e8:	a80b883a 	mov	r5,r21
   843ec:	1039883a 	mov	fp,r2
   843f0:	00877b00 	call	877b0 <__mcmp>
   843f4:	da001717 	ldw	r8,92(sp)
   843f8:	00816e0e 	bge	zero,r2,849b4 <_dtoa_r+0x1248>
   843fc:	b93fffc3 	ldbu	r4,-1(r23)
   84400:	b8bfffc4 	addi	r2,r23,-1
   84404:	1007883a 	mov	r3,r2
   84408:	01800e44 	movi	r6,57
   8440c:	d9c00717 	ldw	r7,28(sp)
   84410:	00000506 	br	84428 <_dtoa_r+0xcbc>
   84414:	18ffffc4 	addi	r3,r3,-1
   84418:	38811926 	beq	r7,r2,84880 <_dtoa_r+0x1114>
   8441c:	19000003 	ldbu	r4,0(r3)
   84420:	102f883a 	mov	r23,r2
   84424:	10bfffc4 	addi	r2,r2,-1
   84428:	21403fcc 	andi	r5,r4,255
   8442c:	2940201c 	xori	r5,r5,128
   84430:	297fe004 	addi	r5,r5,-128
   84434:	29bff726 	beq	r5,r6,84414 <__alt_data_end+0xfffbb034>
   84438:	21000044 	addi	r4,r4,1
   8443c:	11000005 	stb	r4,0(r2)
   84440:	8009883a 	mov	r4,r16
   84444:	a80b883a 	mov	r5,r21
   84448:	0086ec80 	call	86ec8 <_Bfree>
   8444c:	883e7526 	beq	r17,zero,83e24 <__alt_data_end+0xfffbaa44>
   84450:	90000426 	beq	r18,zero,84464 <_dtoa_r+0xcf8>
   84454:	94400326 	beq	r18,r17,84464 <_dtoa_r+0xcf8>
   84458:	8009883a 	mov	r4,r16
   8445c:	900b883a 	mov	r5,r18
   84460:	0086ec80 	call	86ec8 <_Bfree>
   84464:	8009883a 	mov	r4,r16
   84468:	880b883a 	mov	r5,r17
   8446c:	0086ec80 	call	86ec8 <_Bfree>
   84470:	003e6c06 	br	83e24 <__alt_data_end+0xfffbaa44>
   84474:	00800704 	movi	r2,28
   84478:	d9800817 	ldw	r6,32(sp)
   8447c:	a0a9883a 	add	r20,r20,r2
   84480:	b0ad883a 	add	r22,r22,r2
   84484:	308d883a 	add	r6,r6,r2
   84488:	d9800815 	stw	r6,32(sp)
   8448c:	003fa506 	br	84324 <__alt_data_end+0xfffbaf44>
   84490:	013efb84 	movi	r4,-1042
   84494:	246bc83a 	sub	r21,r4,r17
   84498:	9548983a 	sll	r4,r18,r21
   8449c:	003d1806 	br	83900 <__alt_data_end+0xfffba520>
   844a0:	d8000d15 	stw	zero,52(sp)
   844a4:	003d5b06 	br	83a14 <__alt_data_end+0xfffba634>
   844a8:	880b883a 	mov	r5,r17
   844ac:	8009883a 	mov	r4,r16
   844b0:	01800284 	movi	r6,10
   844b4:	000f883a 	mov	r7,zero
   844b8:	0086ef00 	call	86ef0 <__multadd>
   844bc:	1023883a 	mov	r17,r2
   844c0:	d8800c17 	ldw	r2,48(sp)
   844c4:	0082550e 	bge	zero,r2,84e1c <_dtoa_r+0x16b0>
   844c8:	d8800615 	stw	r2,24(sp)
   844cc:	0500050e 	bge	zero,r20,844e4 <_dtoa_r+0xd78>
   844d0:	880b883a 	mov	r5,r17
   844d4:	8009883a 	mov	r4,r16
   844d8:	a00d883a 	mov	r6,r20
   844dc:	00876600 	call	87660 <__lshift>
   844e0:	1023883a 	mov	r17,r2
   844e4:	98016a1e 	bne	r19,zero,84a90 <_dtoa_r+0x1324>
   844e8:	8829883a 	mov	r20,r17
   844ec:	d9000617 	ldw	r4,24(sp)
   844f0:	dcc00717 	ldw	r19,28(sp)
   844f4:	9480004c 	andi	r18,r18,1
   844f8:	20bfffc4 	addi	r2,r4,-1
   844fc:	9885883a 	add	r2,r19,r2
   84500:	d8800415 	stw	r2,16(sp)
   84504:	dc800615 	stw	r18,24(sp)
   84508:	e009883a 	mov	r4,fp
   8450c:	a80b883a 	mov	r5,r21
   84510:	00835440 	call	83544 <quorem>
   84514:	e009883a 	mov	r4,fp
   84518:	880b883a 	mov	r5,r17
   8451c:	102f883a 	mov	r23,r2
   84520:	00877b00 	call	877b0 <__mcmp>
   84524:	8009883a 	mov	r4,r16
   84528:	a80b883a 	mov	r5,r21
   8452c:	a00d883a 	mov	r6,r20
   84530:	102d883a 	mov	r22,r2
   84534:	00878100 	call	87810 <__mdiff>
   84538:	1007883a 	mov	r3,r2
   8453c:	10800317 	ldw	r2,12(r2)
   84540:	bc800c04 	addi	r18,r23,48
   84544:	1000971e 	bne	r2,zero,847a4 <_dtoa_r+0x1038>
   84548:	180b883a 	mov	r5,r3
   8454c:	e009883a 	mov	r4,fp
   84550:	d8c01515 	stw	r3,84(sp)
   84554:	00877b00 	call	877b0 <__mcmp>
   84558:	d8c01517 	ldw	r3,84(sp)
   8455c:	8009883a 	mov	r4,r16
   84560:	d8801515 	stw	r2,84(sp)
   84564:	180b883a 	mov	r5,r3
   84568:	0086ec80 	call	86ec8 <_Bfree>
   8456c:	d8801517 	ldw	r2,84(sp)
   84570:	1000041e 	bne	r2,zero,84584 <_dtoa_r+0xe18>
   84574:	d9800317 	ldw	r6,12(sp)
   84578:	3000021e 	bne	r6,zero,84584 <_dtoa_r+0xe18>
   8457c:	d8c00617 	ldw	r3,24(sp)
   84580:	18007626 	beq	r3,zero,8475c <_dtoa_r+0xff0>
   84584:	b0005b16 	blt	r22,zero,846f4 <_dtoa_r+0xf88>
   84588:	b000041e 	bne	r22,zero,8459c <_dtoa_r+0xe30>
   8458c:	d9000317 	ldw	r4,12(sp)
   84590:	2000021e 	bne	r4,zero,8459c <_dtoa_r+0xe30>
   84594:	d8c00617 	ldw	r3,24(sp)
   84598:	18005626 	beq	r3,zero,846f4 <_dtoa_r+0xf88>
   8459c:	00814d16 	blt	zero,r2,84ad4 <_dtoa_r+0x1368>
   845a0:	d8c00417 	ldw	r3,16(sp)
   845a4:	9d800044 	addi	r22,r19,1
   845a8:	9c800005 	stb	r18,0(r19)
   845ac:	b02f883a 	mov	r23,r22
   845b0:	98c14c26 	beq	r19,r3,84ae4 <_dtoa_r+0x1378>
   845b4:	e00b883a 	mov	r5,fp
   845b8:	8009883a 	mov	r4,r16
   845bc:	01800284 	movi	r6,10
   845c0:	000f883a 	mov	r7,zero
   845c4:	0086ef00 	call	86ef0 <__multadd>
   845c8:	1039883a 	mov	fp,r2
   845cc:	8d006d26 	beq	r17,r20,84784 <_dtoa_r+0x1018>
   845d0:	880b883a 	mov	r5,r17
   845d4:	01800284 	movi	r6,10
   845d8:	000f883a 	mov	r7,zero
   845dc:	8009883a 	mov	r4,r16
   845e0:	0086ef00 	call	86ef0 <__multadd>
   845e4:	a00b883a 	mov	r5,r20
   845e8:	8009883a 	mov	r4,r16
   845ec:	01800284 	movi	r6,10
   845f0:	000f883a 	mov	r7,zero
   845f4:	1023883a 	mov	r17,r2
   845f8:	0086ef00 	call	86ef0 <__multadd>
   845fc:	1029883a 	mov	r20,r2
   84600:	b027883a 	mov	r19,r22
   84604:	003fc006 	br	84508 <__alt_data_end+0xfffbb128>
   84608:	a005883a 	mov	r2,r20
   8460c:	003ede06 	br	84188 <__alt_data_end+0xfffbada8>
   84610:	01000044 	movi	r4,1
   84614:	d9000b15 	stw	r4,44(sp)
   84618:	d9802217 	ldw	r6,136(sp)
   8461c:	0180dc0e 	bge	zero,r6,84990 <_dtoa_r+0x1224>
   84620:	3023883a 	mov	r17,r6
   84624:	d9800c15 	stw	r6,48(sp)
   84628:	d9800615 	stw	r6,24(sp)
   8462c:	003d1e06 	br	83aa8 <__alt_data_end+0xfffba6c8>
   84630:	d8800617 	ldw	r2,24(sp)
   84634:	00be3716 	blt	zero,r2,83f14 <__alt_data_end+0xfffbab34>
   84638:	1000be1e 	bne	r2,zero,84934 <_dtoa_r+0x11c8>
   8463c:	8809883a 	mov	r4,r17
   84640:	a00b883a 	mov	r5,r20
   84644:	000d883a 	mov	r6,zero
   84648:	01d00534 	movhi	r7,16404
   8464c:	008c5600 	call	8c560 <__muldf3>
   84650:	1009883a 	mov	r4,r2
   84654:	180b883a 	mov	r5,r3
   84658:	900d883a 	mov	r6,r18
   8465c:	980f883a 	mov	r7,r19
   84660:	008c3a00 	call	8c3a0 <__gedf2>
   84664:	002b883a 	mov	r21,zero
   84668:	0023883a 	mov	r17,zero
   8466c:	10007a16 	blt	r2,zero,84858 <_dtoa_r+0x10ec>
   84670:	d9002217 	ldw	r4,136(sp)
   84674:	ddc00717 	ldw	r23,28(sp)
   84678:	0108303a 	nor	r4,zero,r4
   8467c:	d9000515 	stw	r4,20(sp)
   84680:	8009883a 	mov	r4,r16
   84684:	a80b883a 	mov	r5,r21
   84688:	0086ec80 	call	86ec8 <_Bfree>
   8468c:	883f751e 	bne	r17,zero,84464 <__alt_data_end+0xfffbb084>
   84690:	003de406 	br	83e24 <__alt_data_end+0xfffbaa44>
   84694:	e00b883a 	mov	r5,fp
   84698:	8009883a 	mov	r4,r16
   8469c:	00875200 	call	87520 <__pow5mult>
   846a0:	1039883a 	mov	fp,r2
   846a4:	003ed306 	br	841f4 <__alt_data_end+0xfffbae14>
   846a8:	903ee01e 	bne	r18,zero,8422c <__alt_data_end+0xfffbae4c>
   846ac:	00800434 	movhi	r2,16
   846b0:	10bfffc4 	addi	r2,r2,-1
   846b4:	9884703a 	and	r2,r19,r2
   846b8:	103f081e 	bne	r2,zero,842dc <__alt_data_end+0xfffbaefc>
   846bc:	9cdffc2c 	andhi	r19,r19,32752
   846c0:	983f0626 	beq	r19,zero,842dc <__alt_data_end+0xfffbaefc>
   846c4:	d8800817 	ldw	r2,32(sp)
   846c8:	b5800044 	addi	r22,r22,1
   846cc:	04c00044 	movi	r19,1
   846d0:	10800044 	addi	r2,r2,1
   846d4:	d8800815 	stw	r2,32(sp)
   846d8:	003f0106 	br	842e0 <__alt_data_end+0xfffbaf00>
   846dc:	d9800f17 	ldw	r6,60(sp)
   846e0:	30016826 	beq	r6,zero,84c84 <_dtoa_r+0x1518>
   846e4:	10810cc4 	addi	r2,r2,1075
   846e8:	dd400917 	ldw	r21,36(sp)
   846ec:	dd000817 	ldw	r20,32(sp)
   846f0:	003e9906 	br	84158 <__alt_data_end+0xfffbad78>
   846f4:	9011883a 	mov	r8,r18
   846f8:	4007883a 	mov	r3,r8
   846fc:	e02d883a 	mov	r22,fp
   84700:	0080100e 	bge	zero,r2,84744 <_dtoa_r+0xfd8>
   84704:	01800044 	movi	r6,1
   84708:	8009883a 	mov	r4,r16
   8470c:	e00b883a 	mov	r5,fp
   84710:	da001515 	stw	r8,84(sp)
   84714:	da001715 	stw	r8,92(sp)
   84718:	00876600 	call	87660 <__lshift>
   8471c:	1009883a 	mov	r4,r2
   84720:	a80b883a 	mov	r5,r21
   84724:	102d883a 	mov	r22,r2
   84728:	00877b00 	call	877b0 <__mcmp>
   8472c:	d8c01517 	ldw	r3,84(sp)
   84730:	da001717 	ldw	r8,92(sp)
   84734:	0081a50e 	bge	zero,r2,84dcc <_dtoa_r+0x1660>
   84738:	00800e44 	movi	r2,57
   8473c:	40817b26 	beq	r8,r2,84d2c <_dtoa_r+0x15c0>
   84740:	40c00044 	addi	r3,r8,1
   84744:	8825883a 	mov	r18,r17
   84748:	9dc00044 	addi	r23,r19,1
   8474c:	98c00005 	stb	r3,0(r19)
   84750:	a023883a 	mov	r17,r20
   84754:	b039883a 	mov	fp,r22
   84758:	003f3906 	br	84440 <__alt_data_end+0xfffbb060>
   8475c:	00800e44 	movi	r2,57
   84760:	9011883a 	mov	r8,r18
   84764:	90817226 	beq	r18,r2,84d30 <_dtoa_r+0x15c4>
   84768:	0580010e 	bge	zero,r22,84770 <_dtoa_r+0x1004>
   8476c:	ba000c44 	addi	r8,r23,49
   84770:	8825883a 	mov	r18,r17
   84774:	9dc00044 	addi	r23,r19,1
   84778:	9a000005 	stb	r8,0(r19)
   8477c:	a023883a 	mov	r17,r20
   84780:	003f2f06 	br	84440 <__alt_data_end+0xfffbb060>
   84784:	880b883a 	mov	r5,r17
   84788:	8009883a 	mov	r4,r16
   8478c:	01800284 	movi	r6,10
   84790:	000f883a 	mov	r7,zero
   84794:	0086ef00 	call	86ef0 <__multadd>
   84798:	1023883a 	mov	r17,r2
   8479c:	1029883a 	mov	r20,r2
   847a0:	003f9706 	br	84600 <__alt_data_end+0xfffbb220>
   847a4:	8009883a 	mov	r4,r16
   847a8:	180b883a 	mov	r5,r3
   847ac:	0086ec80 	call	86ec8 <_Bfree>
   847b0:	00800044 	movi	r2,1
   847b4:	003f7306 	br	84584 <__alt_data_end+0xfffbb1a4>
   847b8:	e009883a 	mov	r4,fp
   847bc:	a80b883a 	mov	r5,r21
   847c0:	00877b00 	call	877b0 <__mcmp>
   847c4:	103ee60e 	bge	r2,zero,84360 <__alt_data_end+0xfffbaf80>
   847c8:	8009883a 	mov	r4,r16
   847cc:	e00b883a 	mov	r5,fp
   847d0:	01800284 	movi	r6,10
   847d4:	000f883a 	mov	r7,zero
   847d8:	0086ef00 	call	86ef0 <__multadd>
   847dc:	d9000517 	ldw	r4,20(sp)
   847e0:	d9800b17 	ldw	r6,44(sp)
   847e4:	1039883a 	mov	fp,r2
   847e8:	213fffc4 	addi	r4,r4,-1
   847ec:	d9000515 	stw	r4,20(sp)
   847f0:	303f2d1e 	bne	r6,zero,844a8 <__alt_data_end+0xfffbb0c8>
   847f4:	d9000c17 	ldw	r4,48(sp)
   847f8:	0101780e 	bge	zero,r4,84ddc <_dtoa_r+0x1670>
   847fc:	d9000615 	stw	r4,24(sp)
   84800:	003edb06 	br	84370 <__alt_data_end+0xfffbaf90>
   84804:	00800084 	movi	r2,2
   84808:	30818e1e 	bne	r6,r2,84e44 <_dtoa_r+0x16d8>
   8480c:	d8000b15 	stw	zero,44(sp)
   84810:	003f8106 	br	84618 <__alt_data_end+0xfffbb238>
   84814:	d8800717 	ldw	r2,28(sp)
   84818:	003c0306 	br	83828 <__alt_data_end+0xfffba448>
   8481c:	d9000317 	ldw	r4,12(sp)
   84820:	00800084 	movi	r2,2
   84824:	113ed00e 	bge	r2,r4,84368 <__alt_data_end+0xfffbaf88>
   84828:	d8c00617 	ldw	r3,24(sp)
   8482c:	183f901e 	bne	r3,zero,84670 <__alt_data_end+0xfffbb290>
   84830:	a80b883a 	mov	r5,r21
   84834:	8009883a 	mov	r4,r16
   84838:	01800144 	movi	r6,5
   8483c:	000f883a 	mov	r7,zero
   84840:	0086ef00 	call	86ef0 <__multadd>
   84844:	e009883a 	mov	r4,fp
   84848:	100b883a 	mov	r5,r2
   8484c:	102b883a 	mov	r21,r2
   84850:	00877b00 	call	877b0 <__mcmp>
   84854:	00bf860e 	bge	zero,r2,84670 <__alt_data_end+0xfffbb290>
   84858:	d9800717 	ldw	r6,28(sp)
   8485c:	00800c44 	movi	r2,49
   84860:	30800005 	stb	r2,0(r6)
   84864:	d8800517 	ldw	r2,20(sp)
   84868:	35c00044 	addi	r23,r6,1
   8486c:	10800044 	addi	r2,r2,1
   84870:	d8800515 	stw	r2,20(sp)
   84874:	003f8206 	br	84680 <__alt_data_end+0xfffbb2a0>
   84878:	903e981e 	bne	r18,zero,842dc <__alt_data_end+0xfffbaefc>
   8487c:	003f8b06 	br	846ac <__alt_data_end+0xfffbb2cc>
   84880:	d9800517 	ldw	r6,20(sp)
   84884:	d8c00717 	ldw	r3,28(sp)
   84888:	00800c44 	movi	r2,49
   8488c:	31800044 	addi	r6,r6,1
   84890:	d9800515 	stw	r6,20(sp)
   84894:	18800005 	stb	r2,0(r3)
   84898:	003ee906 	br	84440 <__alt_data_end+0xfffbb060>
   8489c:	dc000317 	ldw	r16,12(sp)
   848a0:	003d6006 	br	83e24 <__alt_data_end+0xfffbaa44>
   848a4:	8809883a 	mov	r4,r17
   848a8:	008d7240 	call	8d724 <__floatsidf>
   848ac:	a009883a 	mov	r4,r20
   848b0:	a80b883a 	mov	r5,r21
   848b4:	100d883a 	mov	r6,r2
   848b8:	180f883a 	mov	r7,r3
   848bc:	008c5600 	call	8c560 <__muldf3>
   848c0:	1009883a 	mov	r4,r2
   848c4:	180b883a 	mov	r5,r3
   848c8:	000d883a 	mov	r6,zero
   848cc:	01d00734 	movhi	r7,16412
   848d0:	008b1000 	call	8b100 <__adddf3>
   848d4:	1023883a 	mov	r17,r2
   848d8:	00bf3034 	movhi	r2,64704
   848dc:	1885883a 	add	r2,r3,r2
   848e0:	d8800e15 	stw	r2,56(sp)
   848e4:	a009883a 	mov	r4,r20
   848e8:	a80b883a 	mov	r5,r21
   848ec:	000d883a 	mov	r6,zero
   848f0:	01d00534 	movhi	r7,16404
   848f4:	008cdcc0 	call	8cdcc <__subdf3>
   848f8:	d9c00e17 	ldw	r7,56(sp)
   848fc:	1009883a 	mov	r4,r2
   84900:	180b883a 	mov	r5,r3
   84904:	880d883a 	mov	r6,r17
   84908:	102b883a 	mov	r21,r2
   8490c:	1829883a 	mov	r20,r3
   84910:	008c3a00 	call	8c3a0 <__gedf2>
   84914:	00807716 	blt	zero,r2,84af4 <_dtoa_r+0x1388>
   84918:	d8800e17 	ldw	r2,56(sp)
   8491c:	a809883a 	mov	r4,r21
   84920:	a00b883a 	mov	r5,r20
   84924:	11e0003c 	xorhi	r7,r2,32768
   84928:	880d883a 	mov	r6,r17
   8492c:	008c4800 	call	8c480 <__ledf2>
   84930:	103d6b0e 	bge	r2,zero,83ee0 <__alt_data_end+0xfffbab00>
   84934:	002b883a 	mov	r21,zero
   84938:	0023883a 	mov	r17,zero
   8493c:	003f4c06 	br	84670 <__alt_data_end+0xfffbb290>
   84940:	d9800917 	ldw	r6,36(sp)
   84944:	e00b883a 	mov	r5,fp
   84948:	8009883a 	mov	r4,r16
   8494c:	00875200 	call	87520 <__pow5mult>
   84950:	1039883a 	mov	fp,r2
   84954:	003e2706 	br	841f4 <__alt_data_end+0xfffbae14>
   84958:	d8000b15 	stw	zero,44(sp)
   8495c:	003c4906 	br	83a84 <__alt_data_end+0xfffba6a4>
   84960:	d9000917 	ldw	r4,36(sp)
   84964:	d9800a17 	ldw	r6,40(sp)
   84968:	dd400915 	stw	r21,36(sp)
   8496c:	a905c83a 	sub	r2,r21,r4
   84970:	308d883a 	add	r6,r6,r2
   84974:	d9800a15 	stw	r6,40(sp)
   84978:	002b883a 	mov	r21,zero
   8497c:	003df206 	br	84148 <__alt_data_end+0xfffbad68>
   84980:	dc800e15 	stw	r18,56(sp)
   84984:	982b883a 	mov	r21,r19
   84988:	04400084 	movi	r17,2
   8498c:	003c7406 	br	83b60 <__alt_data_end+0xfffba780>
   84990:	04400044 	movi	r17,1
   84994:	dc400c15 	stw	r17,48(sp)
   84998:	dc400615 	stw	r17,24(sp)
   8499c:	dc402215 	stw	r17,136(sp)
   849a0:	80001115 	stw	zero,68(r16)
   849a4:	000b883a 	mov	r5,zero
   849a8:	003c4a06 	br	83ad4 <__alt_data_end+0xfffba6f4>
   849ac:	3023883a 	mov	r17,r6
   849b0:	003ffb06 	br	849a0 <__alt_data_end+0xfffbb5c0>
   849b4:	1000021e 	bne	r2,zero,849c0 <_dtoa_r+0x1254>
   849b8:	4200004c 	andi	r8,r8,1
   849bc:	403e8f1e 	bne	r8,zero,843fc <__alt_data_end+0xfffbb01c>
   849c0:	01000c04 	movi	r4,48
   849c4:	00000106 	br	849cc <_dtoa_r+0x1260>
   849c8:	102f883a 	mov	r23,r2
   849cc:	b8bfffc4 	addi	r2,r23,-1
   849d0:	10c00007 	ldb	r3,0(r2)
   849d4:	193ffc26 	beq	r3,r4,849c8 <__alt_data_end+0xfffbb5e8>
   849d8:	003e9906 	br	84440 <__alt_data_end+0xfffbb060>
   849dc:	d9000517 	ldw	r4,20(sp)
   849e0:	012fc83a 	sub	r23,zero,r4
   849e4:	b800ad26 	beq	r23,zero,84c9c <_dtoa_r+0x1530>
   849e8:	b88003cc 	andi	r2,r23,15
   849ec:	100490fa 	slli	r2,r2,3
   849f0:	00c00274 	movhi	r3,9
   849f4:	18c3f004 	addi	r3,r3,4032
   849f8:	1885883a 	add	r2,r3,r2
   849fc:	11800017 	ldw	r6,0(r2)
   84a00:	11c00117 	ldw	r7,4(r2)
   84a04:	b82fd13a 	srai	r23,r23,4
   84a08:	9009883a 	mov	r4,r18
   84a0c:	980b883a 	mov	r5,r19
   84a10:	008c5600 	call	8c560 <__muldf3>
   84a14:	1029883a 	mov	r20,r2
   84a18:	182b883a 	mov	r21,r3
   84a1c:	b800f426 	beq	r23,zero,84df0 <_dtoa_r+0x1684>
   84a20:	02000274 	movhi	r8,9
   84a24:	4203e604 	addi	r8,r8,3992
   84a28:	8029883a 	mov	r20,r16
   84a2c:	04400084 	movi	r17,2
   84a30:	4021883a 	mov	r16,r8
   84a34:	b980004c 	andi	r6,r23,1
   84a38:	1009883a 	mov	r4,r2
   84a3c:	b82fd07a 	srai	r23,r23,1
   84a40:	180b883a 	mov	r5,r3
   84a44:	30000426 	beq	r6,zero,84a58 <_dtoa_r+0x12ec>
   84a48:	81800017 	ldw	r6,0(r16)
   84a4c:	81c00117 	ldw	r7,4(r16)
   84a50:	8c400044 	addi	r17,r17,1
   84a54:	008c5600 	call	8c560 <__muldf3>
   84a58:	84000204 	addi	r16,r16,8
   84a5c:	b83ff51e 	bne	r23,zero,84a34 <__alt_data_end+0xfffbb654>
   84a60:	a021883a 	mov	r16,r20
   84a64:	182b883a 	mov	r21,r3
   84a68:	1029883a 	mov	r20,r2
   84a6c:	003c5506 	br	83bc4 <__alt_data_end+0xfffba7e4>
   84a70:	d9800517 	ldw	r6,20(sp)
   84a74:	d9000717 	ldw	r4,28(sp)
   84a78:	00c00c04 	movi	r3,48
   84a7c:	31800044 	addi	r6,r6,1
   84a80:	d9800515 	stw	r6,20(sp)
   84a84:	20c00005 	stb	r3,0(r4)
   84a88:	02000c44 	movi	r8,49
   84a8c:	003da206 	br	84118 <__alt_data_end+0xfffbad38>
   84a90:	89400117 	ldw	r5,4(r17)
   84a94:	8009883a 	mov	r4,r16
   84a98:	0086e200 	call	86e20 <_Balloc>
   84a9c:	89800417 	ldw	r6,16(r17)
   84aa0:	11000304 	addi	r4,r2,12
   84aa4:	89400304 	addi	r5,r17,12
   84aa8:	31800084 	addi	r6,r6,2
   84aac:	318d883a 	add	r6,r6,r6
   84ab0:	318d883a 	add	r6,r6,r6
   84ab4:	1027883a 	mov	r19,r2
   84ab8:	0086a680 	call	86a68 <memcpy>
   84abc:	8009883a 	mov	r4,r16
   84ac0:	980b883a 	mov	r5,r19
   84ac4:	01800044 	movi	r6,1
   84ac8:	00876600 	call	87660 <__lshift>
   84acc:	1029883a 	mov	r20,r2
   84ad0:	003e8606 	br	844ec <__alt_data_end+0xfffbb10c>
   84ad4:	00800e44 	movi	r2,57
   84ad8:	90809526 	beq	r18,r2,84d30 <_dtoa_r+0x15c4>
   84adc:	92000044 	addi	r8,r18,1
   84ae0:	003f2306 	br	84770 <__alt_data_end+0xfffbb390>
   84ae4:	9011883a 	mov	r8,r18
   84ae8:	8825883a 	mov	r18,r17
   84aec:	a023883a 	mov	r17,r20
   84af0:	003e3706 	br	843d0 <__alt_data_end+0xfffbaff0>
   84af4:	002b883a 	mov	r21,zero
   84af8:	0023883a 	mov	r17,zero
   84afc:	003f5606 	br	84858 <__alt_data_end+0xfffbb478>
   84b00:	51bfffc4 	addi	r6,r10,-1
   84b04:	300490fa 	slli	r2,r6,3
   84b08:	00c00274 	movhi	r3,9
   84b0c:	18c3f004 	addi	r3,r3,4032
   84b10:	1885883a 	add	r2,r3,r2
   84b14:	d9c00e17 	ldw	r7,56(sp)
   84b18:	11000017 	ldw	r4,0(r2)
   84b1c:	11400117 	ldw	r5,4(r2)
   84b20:	d8800717 	ldw	r2,28(sp)
   84b24:	d9801015 	stw	r6,64(sp)
   84b28:	880d883a 	mov	r6,r17
   84b2c:	da801615 	stw	r10,88(sp)
   84b30:	15c00044 	addi	r23,r2,1
   84b34:	008c5600 	call	8c560 <__muldf3>
   84b38:	a80b883a 	mov	r5,r21
   84b3c:	a009883a 	mov	r4,r20
   84b40:	d8c01115 	stw	r3,68(sp)
   84b44:	d8800e15 	stw	r2,56(sp)
   84b48:	008d69c0 	call	8d69c <__fixdfsi>
   84b4c:	1009883a 	mov	r4,r2
   84b50:	1023883a 	mov	r17,r2
   84b54:	008d7240 	call	8d724 <__floatsidf>
   84b58:	a009883a 	mov	r4,r20
   84b5c:	a80b883a 	mov	r5,r21
   84b60:	100d883a 	mov	r6,r2
   84b64:	180f883a 	mov	r7,r3
   84b68:	008cdcc0 	call	8cdcc <__subdf3>
   84b6c:	1813883a 	mov	r9,r3
   84b70:	d8c00717 	ldw	r3,28(sp)
   84b74:	8c400c04 	addi	r17,r17,48
   84b78:	1011883a 	mov	r8,r2
   84b7c:	1c400005 	stb	r17,0(r3)
   84b80:	da801617 	ldw	r10,88(sp)
   84b84:	00800044 	movi	r2,1
   84b88:	50802326 	beq	r10,r2,84c18 <_dtoa_r+0x14ac>
   84b8c:	d8800717 	ldw	r2,28(sp)
   84b90:	b82b883a 	mov	r21,r23
   84b94:	dc001315 	stw	r16,76(sp)
   84b98:	12a9883a 	add	r20,r2,r10
   84b9c:	4807883a 	mov	r3,r9
   84ba0:	4005883a 	mov	r2,r8
   84ba4:	dc801415 	stw	r18,80(sp)
   84ba8:	000d883a 	mov	r6,zero
   84bac:	01d00934 	movhi	r7,16420
   84bb0:	1009883a 	mov	r4,r2
   84bb4:	180b883a 	mov	r5,r3
   84bb8:	008c5600 	call	8c560 <__muldf3>
   84bbc:	180b883a 	mov	r5,r3
   84bc0:	1009883a 	mov	r4,r2
   84bc4:	1821883a 	mov	r16,r3
   84bc8:	1025883a 	mov	r18,r2
   84bcc:	008d69c0 	call	8d69c <__fixdfsi>
   84bd0:	1009883a 	mov	r4,r2
   84bd4:	1023883a 	mov	r17,r2
   84bd8:	008d7240 	call	8d724 <__floatsidf>
   84bdc:	9009883a 	mov	r4,r18
   84be0:	800b883a 	mov	r5,r16
   84be4:	100d883a 	mov	r6,r2
   84be8:	180f883a 	mov	r7,r3
   84bec:	8c400c04 	addi	r17,r17,48
   84bf0:	008cdcc0 	call	8cdcc <__subdf3>
   84bf4:	ad400044 	addi	r21,r21,1
   84bf8:	ac7fffc5 	stb	r17,-1(r21)
   84bfc:	ad3fea1e 	bne	r21,r20,84ba8 <__alt_data_end+0xfffbb7c8>
   84c00:	1813883a 	mov	r9,r3
   84c04:	d8c01017 	ldw	r3,64(sp)
   84c08:	dc001317 	ldw	r16,76(sp)
   84c0c:	dc801417 	ldw	r18,80(sp)
   84c10:	1011883a 	mov	r8,r2
   84c14:	b8ef883a 	add	r23,r23,r3
   84c18:	d9000e17 	ldw	r4,56(sp)
   84c1c:	d9401117 	ldw	r5,68(sp)
   84c20:	000d883a 	mov	r6,zero
   84c24:	01cff834 	movhi	r7,16352
   84c28:	da001715 	stw	r8,92(sp)
   84c2c:	da401515 	stw	r9,84(sp)
   84c30:	008b1000 	call	8b100 <__adddf3>
   84c34:	da001717 	ldw	r8,92(sp)
   84c38:	da401517 	ldw	r9,84(sp)
   84c3c:	1009883a 	mov	r4,r2
   84c40:	400d883a 	mov	r6,r8
   84c44:	480f883a 	mov	r7,r9
   84c48:	180b883a 	mov	r5,r3
   84c4c:	008c4800 	call	8c480 <__ledf2>
   84c50:	da001717 	ldw	r8,92(sp)
   84c54:	da401517 	ldw	r9,84(sp)
   84c58:	10003b0e 	bge	r2,zero,84d48 <_dtoa_r+0x15dc>
   84c5c:	d9001217 	ldw	r4,72(sp)
   84c60:	bd7fffc3 	ldbu	r21,-1(r23)
   84c64:	d9000515 	stw	r4,20(sp)
   84c68:	003d1c06 	br	840dc <__alt_data_end+0xfffbacfc>
   84c6c:	d8c00817 	ldw	r3,32(sp)
   84c70:	18a9c83a 	sub	r20,r3,r2
   84c74:	0005883a 	mov	r2,zero
   84c78:	003d3706 	br	84158 <__alt_data_end+0xfffbad78>
   84c7c:	00800044 	movi	r2,1
   84c80:	003dd006 	br	843c4 <__alt_data_end+0xfffbafe4>
   84c84:	d8c00217 	ldw	r3,8(sp)
   84c88:	00800d84 	movi	r2,54
   84c8c:	dd400917 	ldw	r21,36(sp)
   84c90:	10c5c83a 	sub	r2,r2,r3
   84c94:	dd000817 	ldw	r20,32(sp)
   84c98:	003d2f06 	br	84158 <__alt_data_end+0xfffbad78>
   84c9c:	9029883a 	mov	r20,r18
   84ca0:	982b883a 	mov	r21,r19
   84ca4:	04400084 	movi	r17,2
   84ca8:	003bc606 	br	83bc4 <__alt_data_end+0xfffba7e4>
   84cac:	d8800617 	ldw	r2,24(sp)
   84cb0:	103efc26 	beq	r2,zero,848a4 <__alt_data_end+0xfffbb4c4>
   84cb4:	d8c00c17 	ldw	r3,48(sp)
   84cb8:	00fc890e 	bge	zero,r3,83ee0 <__alt_data_end+0xfffbab00>
   84cbc:	a80b883a 	mov	r5,r21
   84cc0:	a009883a 	mov	r4,r20
   84cc4:	000d883a 	mov	r6,zero
   84cc8:	01d00934 	movhi	r7,16420
   84ccc:	008c5600 	call	8c560 <__muldf3>
   84cd0:	89000044 	addi	r4,r17,1
   84cd4:	1029883a 	mov	r20,r2
   84cd8:	182b883a 	mov	r21,r3
   84cdc:	008d7240 	call	8d724 <__floatsidf>
   84ce0:	a009883a 	mov	r4,r20
   84ce4:	a80b883a 	mov	r5,r21
   84ce8:	100d883a 	mov	r6,r2
   84cec:	180f883a 	mov	r7,r3
   84cf0:	008c5600 	call	8c560 <__muldf3>
   84cf4:	1009883a 	mov	r4,r2
   84cf8:	180b883a 	mov	r5,r3
   84cfc:	000d883a 	mov	r6,zero
   84d00:	01d00734 	movhi	r7,16412
   84d04:	008b1000 	call	8b100 <__adddf3>
   84d08:	d9000517 	ldw	r4,20(sp)
   84d0c:	1023883a 	mov	r17,r2
   84d10:	00bf3034 	movhi	r2,64704
   84d14:	213fffc4 	addi	r4,r4,-1
   84d18:	1885883a 	add	r2,r3,r2
   84d1c:	d9001215 	stw	r4,72(sp)
   84d20:	d8800e15 	stw	r2,56(sp)
   84d24:	da800c17 	ldw	r10,48(sp)
   84d28:	003bc306 	br	83c38 <__alt_data_end+0xfffba858>
   84d2c:	b039883a 	mov	fp,r22
   84d30:	01000e44 	movi	r4,57
   84d34:	8825883a 	mov	r18,r17
   84d38:	9dc00044 	addi	r23,r19,1
   84d3c:	99000005 	stb	r4,0(r19)
   84d40:	a023883a 	mov	r17,r20
   84d44:	003dae06 	br	84400 <__alt_data_end+0xfffbb020>
   84d48:	d9800e17 	ldw	r6,56(sp)
   84d4c:	d9c01117 	ldw	r7,68(sp)
   84d50:	0009883a 	mov	r4,zero
   84d54:	014ff834 	movhi	r5,16352
   84d58:	da001715 	stw	r8,92(sp)
   84d5c:	da401515 	stw	r9,84(sp)
   84d60:	008cdcc0 	call	8cdcc <__subdf3>
   84d64:	da001717 	ldw	r8,92(sp)
   84d68:	da401517 	ldw	r9,84(sp)
   84d6c:	1009883a 	mov	r4,r2
   84d70:	180b883a 	mov	r5,r3
   84d74:	400d883a 	mov	r6,r8
   84d78:	480f883a 	mov	r7,r9
   84d7c:	008c3a00 	call	8c3a0 <__gedf2>
   84d80:	00bc570e 	bge	zero,r2,83ee0 <__alt_data_end+0xfffbab00>
   84d84:	01000c04 	movi	r4,48
   84d88:	00000106 	br	84d90 <_dtoa_r+0x1624>
   84d8c:	102f883a 	mov	r23,r2
   84d90:	b8bfffc4 	addi	r2,r23,-1
   84d94:	10c00007 	ldb	r3,0(r2)
   84d98:	193ffc26 	beq	r3,r4,84d8c <__alt_data_end+0xfffbb9ac>
   84d9c:	d9801217 	ldw	r6,72(sp)
   84da0:	d9800515 	stw	r6,20(sp)
   84da4:	003c1f06 	br	83e24 <__alt_data_end+0xfffbaa44>
   84da8:	d8801217 	ldw	r2,72(sp)
   84dac:	dc001117 	ldw	r16,68(sp)
   84db0:	d8800515 	stw	r2,20(sp)
   84db4:	003cc906 	br	840dc <__alt_data_end+0xfffbacfc>
   84db8:	dd801317 	ldw	r22,76(sp)
   84dbc:	dc001117 	ldw	r16,68(sp)
   84dc0:	dcc01417 	ldw	r19,80(sp)
   84dc4:	dc801017 	ldw	r18,64(sp)
   84dc8:	003c4506 	br	83ee0 <__alt_data_end+0xfffbab00>
   84dcc:	103e5d1e 	bne	r2,zero,84744 <__alt_data_end+0xfffbb364>
   84dd0:	4080004c 	andi	r2,r8,1
   84dd4:	103e5b26 	beq	r2,zero,84744 <__alt_data_end+0xfffbb364>
   84dd8:	003e5706 	br	84738 <__alt_data_end+0xfffbb358>
   84ddc:	d8c00317 	ldw	r3,12(sp)
   84de0:	00800084 	movi	r2,2
   84de4:	10c00a16 	blt	r2,r3,84e10 <_dtoa_r+0x16a4>
   84de8:	d9000c17 	ldw	r4,48(sp)
   84dec:	003e8306 	br	847fc <__alt_data_end+0xfffbb41c>
   84df0:	04400084 	movi	r17,2
   84df4:	003b7306 	br	83bc4 <__alt_data_end+0xfffba7e4>
   84df8:	d9801217 	ldw	r6,72(sp)
   84dfc:	d9800515 	stw	r6,20(sp)
   84e00:	003cb606 	br	840dc <__alt_data_end+0xfffbacfc>
   84e04:	d9001217 	ldw	r4,72(sp)
   84e08:	d9000515 	stw	r4,20(sp)
   84e0c:	003c0506 	br	83e24 <__alt_data_end+0xfffbaa44>
   84e10:	d9800c17 	ldw	r6,48(sp)
   84e14:	d9800615 	stw	r6,24(sp)
   84e18:	003e8306 	br	84828 <__alt_data_end+0xfffbb448>
   84e1c:	d9800317 	ldw	r6,12(sp)
   84e20:	00800084 	movi	r2,2
   84e24:	11800216 	blt	r2,r6,84e30 <_dtoa_r+0x16c4>
   84e28:	d8800c17 	ldw	r2,48(sp)
   84e2c:	003da606 	br	844c8 <__alt_data_end+0xfffbb0e8>
   84e30:	d8800c17 	ldw	r2,48(sp)
   84e34:	d8800615 	stw	r2,24(sp)
   84e38:	003e7b06 	br	84828 <__alt_data_end+0xfffbb448>
   84e3c:	05000044 	movi	r20,1
   84e40:	003b0506 	br	83a58 <__alt_data_end+0xfffba678>
   84e44:	8009883a 	mov	r4,r16
   84e48:	80001115 	stw	zero,68(r16)
   84e4c:	000b883a 	mov	r5,zero
   84e50:	0086e200 	call	86e20 <_Balloc>
   84e54:	d8800715 	stw	r2,28(sp)
   84e58:	d8c00717 	ldw	r3,28(sp)
   84e5c:	00bfffc4 	movi	r2,-1
   84e60:	01000044 	movi	r4,1
   84e64:	d8800c15 	stw	r2,48(sp)
   84e68:	80c01015 	stw	r3,64(r16)
   84e6c:	d9000b15 	stw	r4,44(sp)
   84e70:	d8800615 	stw	r2,24(sp)
   84e74:	d8002215 	stw	zero,136(sp)
   84e78:	003c1906 	br	83ee0 <__alt_data_end+0xfffbab00>
   84e7c:	193d2926 	beq	r3,r4,84324 <__alt_data_end+0xfffbaf44>
   84e80:	00c00f04 	movi	r3,60
   84e84:	1885c83a 	sub	r2,r3,r2
   84e88:	003d7b06 	br	84478 <__alt_data_end+0xfffbb098>
   84e8c:	000b883a 	mov	r5,zero
   84e90:	003b1006 	br	83ad4 <__alt_data_end+0xfffba6f4>

00084e94 <__sflush_r>:
   84e94:	2880030b 	ldhu	r2,12(r5)
   84e98:	defffb04 	addi	sp,sp,-20
   84e9c:	dcc00315 	stw	r19,12(sp)
   84ea0:	dc400115 	stw	r17,4(sp)
   84ea4:	dfc00415 	stw	ra,16(sp)
   84ea8:	dc800215 	stw	r18,8(sp)
   84eac:	dc000015 	stw	r16,0(sp)
   84eb0:	10c0020c 	andi	r3,r2,8
   84eb4:	2823883a 	mov	r17,r5
   84eb8:	2027883a 	mov	r19,r4
   84ebc:	1800311e 	bne	r3,zero,84f84 <__sflush_r+0xf0>
   84ec0:	28c00117 	ldw	r3,4(r5)
   84ec4:	10820014 	ori	r2,r2,2048
   84ec8:	2880030d 	sth	r2,12(r5)
   84ecc:	00c04b0e 	bge	zero,r3,84ffc <__sflush_r+0x168>
   84ed0:	8a000a17 	ldw	r8,40(r17)
   84ed4:	40002326 	beq	r8,zero,84f64 <__sflush_r+0xd0>
   84ed8:	9c000017 	ldw	r16,0(r19)
   84edc:	10c4000c 	andi	r3,r2,4096
   84ee0:	98000015 	stw	zero,0(r19)
   84ee4:	18004826 	beq	r3,zero,85008 <__sflush_r+0x174>
   84ee8:	89801417 	ldw	r6,80(r17)
   84eec:	10c0010c 	andi	r3,r2,4
   84ef0:	18000626 	beq	r3,zero,84f0c <__sflush_r+0x78>
   84ef4:	88c00117 	ldw	r3,4(r17)
   84ef8:	88800c17 	ldw	r2,48(r17)
   84efc:	30cdc83a 	sub	r6,r6,r3
   84f00:	10000226 	beq	r2,zero,84f0c <__sflush_r+0x78>
   84f04:	88800f17 	ldw	r2,60(r17)
   84f08:	308dc83a 	sub	r6,r6,r2
   84f0c:	89400717 	ldw	r5,28(r17)
   84f10:	9809883a 	mov	r4,r19
   84f14:	000f883a 	mov	r7,zero
   84f18:	403ee83a 	callr	r8
   84f1c:	00ffffc4 	movi	r3,-1
   84f20:	10c04426 	beq	r2,r3,85034 <__sflush_r+0x1a0>
   84f24:	88c0030b 	ldhu	r3,12(r17)
   84f28:	89000417 	ldw	r4,16(r17)
   84f2c:	88000115 	stw	zero,4(r17)
   84f30:	197dffcc 	andi	r5,r3,63487
   84f34:	8940030d 	sth	r5,12(r17)
   84f38:	89000015 	stw	r4,0(r17)
   84f3c:	18c4000c 	andi	r3,r3,4096
   84f40:	18002c1e 	bne	r3,zero,84ff4 <__sflush_r+0x160>
   84f44:	89400c17 	ldw	r5,48(r17)
   84f48:	9c000015 	stw	r16,0(r19)
   84f4c:	28000526 	beq	r5,zero,84f64 <__sflush_r+0xd0>
   84f50:	88801004 	addi	r2,r17,64
   84f54:	28800226 	beq	r5,r2,84f60 <__sflush_r+0xcc>
   84f58:	9809883a 	mov	r4,r19
   84f5c:	00855fc0 	call	855fc <_free_r>
   84f60:	88000c15 	stw	zero,48(r17)
   84f64:	0005883a 	mov	r2,zero
   84f68:	dfc00417 	ldw	ra,16(sp)
   84f6c:	dcc00317 	ldw	r19,12(sp)
   84f70:	dc800217 	ldw	r18,8(sp)
   84f74:	dc400117 	ldw	r17,4(sp)
   84f78:	dc000017 	ldw	r16,0(sp)
   84f7c:	dec00504 	addi	sp,sp,20
   84f80:	f800283a 	ret
   84f84:	2c800417 	ldw	r18,16(r5)
   84f88:	903ff626 	beq	r18,zero,84f64 <__alt_data_end+0xfffbbb84>
   84f8c:	2c000017 	ldw	r16,0(r5)
   84f90:	108000cc 	andi	r2,r2,3
   84f94:	2c800015 	stw	r18,0(r5)
   84f98:	84a1c83a 	sub	r16,r16,r18
   84f9c:	1000131e 	bne	r2,zero,84fec <__sflush_r+0x158>
   84fa0:	28800517 	ldw	r2,20(r5)
   84fa4:	88800215 	stw	r2,8(r17)
   84fa8:	04000316 	blt	zero,r16,84fb8 <__sflush_r+0x124>
   84fac:	003fed06 	br	84f64 <__alt_data_end+0xfffbbb84>
   84fb0:	90a5883a 	add	r18,r18,r2
   84fb4:	043feb0e 	bge	zero,r16,84f64 <__alt_data_end+0xfffbbb84>
   84fb8:	88800917 	ldw	r2,36(r17)
   84fbc:	89400717 	ldw	r5,28(r17)
   84fc0:	800f883a 	mov	r7,r16
   84fc4:	900d883a 	mov	r6,r18
   84fc8:	9809883a 	mov	r4,r19
   84fcc:	103ee83a 	callr	r2
   84fd0:	80a1c83a 	sub	r16,r16,r2
   84fd4:	00bff616 	blt	zero,r2,84fb0 <__alt_data_end+0xfffbbbd0>
   84fd8:	88c0030b 	ldhu	r3,12(r17)
   84fdc:	00bfffc4 	movi	r2,-1
   84fe0:	18c01014 	ori	r3,r3,64
   84fe4:	88c0030d 	sth	r3,12(r17)
   84fe8:	003fdf06 	br	84f68 <__alt_data_end+0xfffbbb88>
   84fec:	0005883a 	mov	r2,zero
   84ff0:	003fec06 	br	84fa4 <__alt_data_end+0xfffbbbc4>
   84ff4:	88801415 	stw	r2,80(r17)
   84ff8:	003fd206 	br	84f44 <__alt_data_end+0xfffbbb64>
   84ffc:	28c00f17 	ldw	r3,60(r5)
   85000:	00ffb316 	blt	zero,r3,84ed0 <__alt_data_end+0xfffbbaf0>
   85004:	003fd706 	br	84f64 <__alt_data_end+0xfffbbb84>
   85008:	89400717 	ldw	r5,28(r17)
   8500c:	000d883a 	mov	r6,zero
   85010:	9809883a 	mov	r4,r19
   85014:	01c00044 	movi	r7,1
   85018:	403ee83a 	callr	r8
   8501c:	100d883a 	mov	r6,r2
   85020:	00bfffc4 	movi	r2,-1
   85024:	30801426 	beq	r6,r2,85078 <__sflush_r+0x1e4>
   85028:	8880030b 	ldhu	r2,12(r17)
   8502c:	8a000a17 	ldw	r8,40(r17)
   85030:	003fae06 	br	84eec <__alt_data_end+0xfffbbb0c>
   85034:	98c00017 	ldw	r3,0(r19)
   85038:	183fba26 	beq	r3,zero,84f24 <__alt_data_end+0xfffbbb44>
   8503c:	01000744 	movi	r4,29
   85040:	19000626 	beq	r3,r4,8505c <__sflush_r+0x1c8>
   85044:	01000584 	movi	r4,22
   85048:	19000426 	beq	r3,r4,8505c <__sflush_r+0x1c8>
   8504c:	88c0030b 	ldhu	r3,12(r17)
   85050:	18c01014 	ori	r3,r3,64
   85054:	88c0030d 	sth	r3,12(r17)
   85058:	003fc306 	br	84f68 <__alt_data_end+0xfffbbb88>
   8505c:	8880030b 	ldhu	r2,12(r17)
   85060:	88c00417 	ldw	r3,16(r17)
   85064:	88000115 	stw	zero,4(r17)
   85068:	10bdffcc 	andi	r2,r2,63487
   8506c:	8880030d 	sth	r2,12(r17)
   85070:	88c00015 	stw	r3,0(r17)
   85074:	003fb306 	br	84f44 <__alt_data_end+0xfffbbb64>
   85078:	98800017 	ldw	r2,0(r19)
   8507c:	103fea26 	beq	r2,zero,85028 <__alt_data_end+0xfffbbc48>
   85080:	00c00744 	movi	r3,29
   85084:	10c00226 	beq	r2,r3,85090 <__sflush_r+0x1fc>
   85088:	00c00584 	movi	r3,22
   8508c:	10ffd21e 	bne	r2,r3,84fd8 <__alt_data_end+0xfffbbbf8>
   85090:	9c000015 	stw	r16,0(r19)
   85094:	0005883a 	mov	r2,zero
   85098:	003fb306 	br	84f68 <__alt_data_end+0xfffbbb88>

0008509c <_fflush_r>:
   8509c:	defffd04 	addi	sp,sp,-12
   850a0:	dc000115 	stw	r16,4(sp)
   850a4:	dfc00215 	stw	ra,8(sp)
   850a8:	2021883a 	mov	r16,r4
   850ac:	20000226 	beq	r4,zero,850b8 <_fflush_r+0x1c>
   850b0:	20800e17 	ldw	r2,56(r4)
   850b4:	10000c26 	beq	r2,zero,850e8 <_fflush_r+0x4c>
   850b8:	2880030f 	ldh	r2,12(r5)
   850bc:	1000051e 	bne	r2,zero,850d4 <_fflush_r+0x38>
   850c0:	0005883a 	mov	r2,zero
   850c4:	dfc00217 	ldw	ra,8(sp)
   850c8:	dc000117 	ldw	r16,4(sp)
   850cc:	dec00304 	addi	sp,sp,12
   850d0:	f800283a 	ret
   850d4:	8009883a 	mov	r4,r16
   850d8:	dfc00217 	ldw	ra,8(sp)
   850dc:	dc000117 	ldw	r16,4(sp)
   850e0:	dec00304 	addi	sp,sp,12
   850e4:	0084e941 	jmpi	84e94 <__sflush_r>
   850e8:	d9400015 	stw	r5,0(sp)
   850ec:	00854880 	call	85488 <__sinit>
   850f0:	d9400017 	ldw	r5,0(sp)
   850f4:	003ff006 	br	850b8 <__alt_data_end+0xfffbbcd8>

000850f8 <fflush>:
   850f8:	20000526 	beq	r4,zero,85110 <fflush+0x18>
   850fc:	00800274 	movhi	r2,9
   85100:	108b4704 	addi	r2,r2,11548
   85104:	200b883a 	mov	r5,r4
   85108:	11000017 	ldw	r4,0(r2)
   8510c:	008509c1 	jmpi	8509c <_fflush_r>
   85110:	00800274 	movhi	r2,9
   85114:	108b4604 	addi	r2,r2,11544
   85118:	11000017 	ldw	r4,0(r2)
   8511c:	01400234 	movhi	r5,8
   85120:	29542704 	addi	r5,r5,20636
   85124:	0085e7c1 	jmpi	85e7c <_fwalk_reent>

00085128 <__fp_lock>:
   85128:	0005883a 	mov	r2,zero
   8512c:	f800283a 	ret

00085130 <__fp_unlock>:
   85130:	0005883a 	mov	r2,zero
   85134:	f800283a 	ret

00085138 <_cleanup_r>:
   85138:	01400274 	movhi	r5,9
   8513c:	29673e04 	addi	r5,r5,-25352
   85140:	0085e7c1 	jmpi	85e7c <_fwalk_reent>

00085144 <__sinit.part.1>:
   85144:	defff704 	addi	sp,sp,-36
   85148:	00c00234 	movhi	r3,8
   8514c:	dfc00815 	stw	ra,32(sp)
   85150:	ddc00715 	stw	r23,28(sp)
   85154:	dd800615 	stw	r22,24(sp)
   85158:	dd400515 	stw	r21,20(sp)
   8515c:	dd000415 	stw	r20,16(sp)
   85160:	dcc00315 	stw	r19,12(sp)
   85164:	dc800215 	stw	r18,8(sp)
   85168:	dc400115 	stw	r17,4(sp)
   8516c:	dc000015 	stw	r16,0(sp)
   85170:	18d44e04 	addi	r3,r3,20792
   85174:	24000117 	ldw	r16,4(r4)
   85178:	20c00f15 	stw	r3,60(r4)
   8517c:	2080bb04 	addi	r2,r4,748
   85180:	00c000c4 	movi	r3,3
   85184:	20c0b915 	stw	r3,740(r4)
   85188:	2080ba15 	stw	r2,744(r4)
   8518c:	2000b815 	stw	zero,736(r4)
   85190:	05c00204 	movi	r23,8
   85194:	00800104 	movi	r2,4
   85198:	2025883a 	mov	r18,r4
   8519c:	b80d883a 	mov	r6,r23
   851a0:	81001704 	addi	r4,r16,92
   851a4:	000b883a 	mov	r5,zero
   851a8:	80000015 	stw	zero,0(r16)
   851ac:	80000115 	stw	zero,4(r16)
   851b0:	80000215 	stw	zero,8(r16)
   851b4:	8080030d 	sth	r2,12(r16)
   851b8:	80001915 	stw	zero,100(r16)
   851bc:	8000038d 	sth	zero,14(r16)
   851c0:	80000415 	stw	zero,16(r16)
   851c4:	80000515 	stw	zero,20(r16)
   851c8:	80000615 	stw	zero,24(r16)
   851cc:	0086cfc0 	call	86cfc <memset>
   851d0:	05800274 	movhi	r22,9
   851d4:	94400217 	ldw	r17,8(r18)
   851d8:	05400274 	movhi	r21,9
   851dc:	05000274 	movhi	r20,9
   851e0:	04c00274 	movhi	r19,9
   851e4:	b5a12b04 	addi	r22,r22,-31572
   851e8:	ad614204 	addi	r21,r21,-31480
   851ec:	a5216104 	addi	r20,r20,-31356
   851f0:	9ce17804 	addi	r19,r19,-31264
   851f4:	85800815 	stw	r22,32(r16)
   851f8:	85400915 	stw	r21,36(r16)
   851fc:	85000a15 	stw	r20,40(r16)
   85200:	84c00b15 	stw	r19,44(r16)
   85204:	84000715 	stw	r16,28(r16)
   85208:	00800284 	movi	r2,10
   8520c:	8880030d 	sth	r2,12(r17)
   85210:	00800044 	movi	r2,1
   85214:	89001704 	addi	r4,r17,92
   85218:	b80d883a 	mov	r6,r23
   8521c:	000b883a 	mov	r5,zero
   85220:	88000015 	stw	zero,0(r17)
   85224:	88000115 	stw	zero,4(r17)
   85228:	88000215 	stw	zero,8(r17)
   8522c:	88001915 	stw	zero,100(r17)
   85230:	8880038d 	sth	r2,14(r17)
   85234:	88000415 	stw	zero,16(r17)
   85238:	88000515 	stw	zero,20(r17)
   8523c:	88000615 	stw	zero,24(r17)
   85240:	0086cfc0 	call	86cfc <memset>
   85244:	94000317 	ldw	r16,12(r18)
   85248:	00800484 	movi	r2,18
   8524c:	8c400715 	stw	r17,28(r17)
   85250:	8d800815 	stw	r22,32(r17)
   85254:	8d400915 	stw	r21,36(r17)
   85258:	8d000a15 	stw	r20,40(r17)
   8525c:	8cc00b15 	stw	r19,44(r17)
   85260:	8080030d 	sth	r2,12(r16)
   85264:	00800084 	movi	r2,2
   85268:	80000015 	stw	zero,0(r16)
   8526c:	80000115 	stw	zero,4(r16)
   85270:	80000215 	stw	zero,8(r16)
   85274:	80001915 	stw	zero,100(r16)
   85278:	8080038d 	sth	r2,14(r16)
   8527c:	80000415 	stw	zero,16(r16)
   85280:	80000515 	stw	zero,20(r16)
   85284:	80000615 	stw	zero,24(r16)
   85288:	81001704 	addi	r4,r16,92
   8528c:	000b883a 	mov	r5,zero
   85290:	b80d883a 	mov	r6,r23
   85294:	0086cfc0 	call	86cfc <memset>
   85298:	00800044 	movi	r2,1
   8529c:	84000715 	stw	r16,28(r16)
   852a0:	85800815 	stw	r22,32(r16)
   852a4:	85400915 	stw	r21,36(r16)
   852a8:	85000a15 	stw	r20,40(r16)
   852ac:	84c00b15 	stw	r19,44(r16)
   852b0:	90800e15 	stw	r2,56(r18)
   852b4:	dfc00817 	ldw	ra,32(sp)
   852b8:	ddc00717 	ldw	r23,28(sp)
   852bc:	dd800617 	ldw	r22,24(sp)
   852c0:	dd400517 	ldw	r21,20(sp)
   852c4:	dd000417 	ldw	r20,16(sp)
   852c8:	dcc00317 	ldw	r19,12(sp)
   852cc:	dc800217 	ldw	r18,8(sp)
   852d0:	dc400117 	ldw	r17,4(sp)
   852d4:	dc000017 	ldw	r16,0(sp)
   852d8:	dec00904 	addi	sp,sp,36
   852dc:	f800283a 	ret

000852e0 <__sfmoreglue>:
   852e0:	defffc04 	addi	sp,sp,-16
   852e4:	dc800215 	stw	r18,8(sp)
   852e8:	2825883a 	mov	r18,r5
   852ec:	dc000015 	stw	r16,0(sp)
   852f0:	01401a04 	movi	r5,104
   852f4:	2021883a 	mov	r16,r4
   852f8:	913fffc4 	addi	r4,r18,-1
   852fc:	dfc00315 	stw	ra,12(sp)
   85300:	dc400115 	stw	r17,4(sp)
   85304:	008b0d80 	call	8b0d8 <__mulsi3>
   85308:	8009883a 	mov	r4,r16
   8530c:	11401d04 	addi	r5,r2,116
   85310:	1023883a 	mov	r17,r2
   85314:	00861d80 	call	861d8 <_malloc_r>
   85318:	1021883a 	mov	r16,r2
   8531c:	10000726 	beq	r2,zero,8533c <__sfmoreglue+0x5c>
   85320:	11000304 	addi	r4,r2,12
   85324:	10000015 	stw	zero,0(r2)
   85328:	14800115 	stw	r18,4(r2)
   8532c:	11000215 	stw	r4,8(r2)
   85330:	000b883a 	mov	r5,zero
   85334:	89801a04 	addi	r6,r17,104
   85338:	0086cfc0 	call	86cfc <memset>
   8533c:	8005883a 	mov	r2,r16
   85340:	dfc00317 	ldw	ra,12(sp)
   85344:	dc800217 	ldw	r18,8(sp)
   85348:	dc400117 	ldw	r17,4(sp)
   8534c:	dc000017 	ldw	r16,0(sp)
   85350:	dec00404 	addi	sp,sp,16
   85354:	f800283a 	ret

00085358 <__sfp>:
   85358:	00800274 	movhi	r2,9
   8535c:	defffb04 	addi	sp,sp,-20
   85360:	108b4604 	addi	r2,r2,11544
   85364:	dc800215 	stw	r18,8(sp)
   85368:	14800017 	ldw	r18,0(r2)
   8536c:	dcc00315 	stw	r19,12(sp)
   85370:	dfc00415 	stw	ra,16(sp)
   85374:	90800e17 	ldw	r2,56(r18)
   85378:	dc400115 	stw	r17,4(sp)
   8537c:	dc000015 	stw	r16,0(sp)
   85380:	2027883a 	mov	r19,r4
   85384:	1000021e 	bne	r2,zero,85390 <__sfp+0x38>
   85388:	9009883a 	mov	r4,r18
   8538c:	00851440 	call	85144 <__sinit.part.1>
   85390:	9480b804 	addi	r18,r18,736
   85394:	047fffc4 	movi	r17,-1
   85398:	91400117 	ldw	r5,4(r18)
   8539c:	94000217 	ldw	r16,8(r18)
   853a0:	297fffc4 	addi	r5,r5,-1
   853a4:	28000a16 	blt	r5,zero,853d0 <__sfp+0x78>
   853a8:	8080030f 	ldh	r2,12(r16)
   853ac:	10000c26 	beq	r2,zero,853e0 <__sfp+0x88>
   853b0:	80c01d04 	addi	r3,r16,116
   853b4:	00000206 	br	853c0 <__sfp+0x68>
   853b8:	18bfe60f 	ldh	r2,-104(r3)
   853bc:	10000826 	beq	r2,zero,853e0 <__sfp+0x88>
   853c0:	297fffc4 	addi	r5,r5,-1
   853c4:	1c3ffd04 	addi	r16,r3,-12
   853c8:	18c01a04 	addi	r3,r3,104
   853cc:	2c7ffa1e 	bne	r5,r17,853b8 <__alt_data_end+0xfffbbfd8>
   853d0:	90800017 	ldw	r2,0(r18)
   853d4:	10001d26 	beq	r2,zero,8544c <__sfp+0xf4>
   853d8:	1025883a 	mov	r18,r2
   853dc:	003fee06 	br	85398 <__alt_data_end+0xfffbbfb8>
   853e0:	00bfffc4 	movi	r2,-1
   853e4:	8080038d 	sth	r2,14(r16)
   853e8:	00800044 	movi	r2,1
   853ec:	8080030d 	sth	r2,12(r16)
   853f0:	80001915 	stw	zero,100(r16)
   853f4:	80000015 	stw	zero,0(r16)
   853f8:	80000215 	stw	zero,8(r16)
   853fc:	80000115 	stw	zero,4(r16)
   85400:	80000415 	stw	zero,16(r16)
   85404:	80000515 	stw	zero,20(r16)
   85408:	80000615 	stw	zero,24(r16)
   8540c:	81001704 	addi	r4,r16,92
   85410:	000b883a 	mov	r5,zero
   85414:	01800204 	movi	r6,8
   85418:	0086cfc0 	call	86cfc <memset>
   8541c:	8005883a 	mov	r2,r16
   85420:	80000c15 	stw	zero,48(r16)
   85424:	80000d15 	stw	zero,52(r16)
   85428:	80001115 	stw	zero,68(r16)
   8542c:	80001215 	stw	zero,72(r16)
   85430:	dfc00417 	ldw	ra,16(sp)
   85434:	dcc00317 	ldw	r19,12(sp)
   85438:	dc800217 	ldw	r18,8(sp)
   8543c:	dc400117 	ldw	r17,4(sp)
   85440:	dc000017 	ldw	r16,0(sp)
   85444:	dec00504 	addi	sp,sp,20
   85448:	f800283a 	ret
   8544c:	9809883a 	mov	r4,r19
   85450:	01400104 	movi	r5,4
   85454:	00852e00 	call	852e0 <__sfmoreglue>
   85458:	90800015 	stw	r2,0(r18)
   8545c:	103fde1e 	bne	r2,zero,853d8 <__alt_data_end+0xfffbbff8>
   85460:	00800304 	movi	r2,12
   85464:	98800015 	stw	r2,0(r19)
   85468:	0005883a 	mov	r2,zero
   8546c:	003ff006 	br	85430 <__alt_data_end+0xfffbc050>

00085470 <_cleanup>:
   85470:	00800274 	movhi	r2,9
   85474:	108b4604 	addi	r2,r2,11544
   85478:	11000017 	ldw	r4,0(r2)
   8547c:	01400274 	movhi	r5,9
   85480:	29673e04 	addi	r5,r5,-25352
   85484:	0085e7c1 	jmpi	85e7c <_fwalk_reent>

00085488 <__sinit>:
   85488:	20800e17 	ldw	r2,56(r4)
   8548c:	10000126 	beq	r2,zero,85494 <__sinit+0xc>
   85490:	f800283a 	ret
   85494:	00851441 	jmpi	85144 <__sinit.part.1>

00085498 <__sfp_lock_acquire>:
   85498:	f800283a 	ret

0008549c <__sfp_lock_release>:
   8549c:	f800283a 	ret

000854a0 <__sinit_lock_acquire>:
   854a0:	f800283a 	ret

000854a4 <__sinit_lock_release>:
   854a4:	f800283a 	ret

000854a8 <__fp_lock_all>:
   854a8:	00800274 	movhi	r2,9
   854ac:	108b4704 	addi	r2,r2,11548
   854b0:	11000017 	ldw	r4,0(r2)
   854b4:	01400234 	movhi	r5,8
   854b8:	29544a04 	addi	r5,r5,20776
   854bc:	0085db81 	jmpi	85db8 <_fwalk>

000854c0 <__fp_unlock_all>:
   854c0:	00800274 	movhi	r2,9
   854c4:	108b4704 	addi	r2,r2,11548
   854c8:	11000017 	ldw	r4,0(r2)
   854cc:	01400234 	movhi	r5,8
   854d0:	29544c04 	addi	r5,r5,20784
   854d4:	0085db81 	jmpi	85db8 <_fwalk>

000854d8 <_malloc_trim_r>:
   854d8:	defffb04 	addi	sp,sp,-20
   854dc:	dcc00315 	stw	r19,12(sp)
   854e0:	04c00274 	movhi	r19,9
   854e4:	dc800215 	stw	r18,8(sp)
   854e8:	dc400115 	stw	r17,4(sp)
   854ec:	dc000015 	stw	r16,0(sp)
   854f0:	dfc00415 	stw	ra,16(sp)
   854f4:	2821883a 	mov	r16,r5
   854f8:	9cc5a804 	addi	r19,r19,5792
   854fc:	2025883a 	mov	r18,r4
   85500:	008dedc0 	call	8dedc <__malloc_lock>
   85504:	98800217 	ldw	r2,8(r19)
   85508:	14400117 	ldw	r17,4(r2)
   8550c:	00bfff04 	movi	r2,-4
   85510:	88a2703a 	and	r17,r17,r2
   85514:	8c21c83a 	sub	r16,r17,r16
   85518:	8403fbc4 	addi	r16,r16,4079
   8551c:	8020d33a 	srli	r16,r16,12
   85520:	0083ffc4 	movi	r2,4095
   85524:	843fffc4 	addi	r16,r16,-1
   85528:	8020933a 	slli	r16,r16,12
   8552c:	1400060e 	bge	r2,r16,85548 <_malloc_trim_r+0x70>
   85530:	9009883a 	mov	r4,r18
   85534:	000b883a 	mov	r5,zero
   85538:	00884580 	call	88458 <_sbrk_r>
   8553c:	98c00217 	ldw	r3,8(r19)
   85540:	1c47883a 	add	r3,r3,r17
   85544:	10c00a26 	beq	r2,r3,85570 <_malloc_trim_r+0x98>
   85548:	9009883a 	mov	r4,r18
   8554c:	008defc0 	call	8defc <__malloc_unlock>
   85550:	0005883a 	mov	r2,zero
   85554:	dfc00417 	ldw	ra,16(sp)
   85558:	dcc00317 	ldw	r19,12(sp)
   8555c:	dc800217 	ldw	r18,8(sp)
   85560:	dc400117 	ldw	r17,4(sp)
   85564:	dc000017 	ldw	r16,0(sp)
   85568:	dec00504 	addi	sp,sp,20
   8556c:	f800283a 	ret
   85570:	9009883a 	mov	r4,r18
   85574:	040bc83a 	sub	r5,zero,r16
   85578:	00884580 	call	88458 <_sbrk_r>
   8557c:	00ffffc4 	movi	r3,-1
   85580:	10c00d26 	beq	r2,r3,855b8 <_malloc_trim_r+0xe0>
   85584:	00c002b4 	movhi	r3,10
   85588:	18d17f04 	addi	r3,r3,17916
   8558c:	18800017 	ldw	r2,0(r3)
   85590:	99000217 	ldw	r4,8(r19)
   85594:	8c23c83a 	sub	r17,r17,r16
   85598:	8c400054 	ori	r17,r17,1
   8559c:	1421c83a 	sub	r16,r2,r16
   855a0:	24400115 	stw	r17,4(r4)
   855a4:	9009883a 	mov	r4,r18
   855a8:	1c000015 	stw	r16,0(r3)
   855ac:	008defc0 	call	8defc <__malloc_unlock>
   855b0:	00800044 	movi	r2,1
   855b4:	003fe706 	br	85554 <__alt_data_end+0xfffbc174>
   855b8:	9009883a 	mov	r4,r18
   855bc:	000b883a 	mov	r5,zero
   855c0:	00884580 	call	88458 <_sbrk_r>
   855c4:	99000217 	ldw	r4,8(r19)
   855c8:	014003c4 	movi	r5,15
   855cc:	1107c83a 	sub	r3,r2,r4
   855d0:	28ffdd0e 	bge	r5,r3,85548 <__alt_data_end+0xfffbc168>
   855d4:	01400274 	movhi	r5,9
   855d8:	294b4904 	addi	r5,r5,11556
   855dc:	29400017 	ldw	r5,0(r5)
   855e0:	18c00054 	ori	r3,r3,1
   855e4:	20c00115 	stw	r3,4(r4)
   855e8:	00c002b4 	movhi	r3,10
   855ec:	1145c83a 	sub	r2,r2,r5
   855f0:	18d17f04 	addi	r3,r3,17916
   855f4:	18800015 	stw	r2,0(r3)
   855f8:	003fd306 	br	85548 <__alt_data_end+0xfffbc168>

000855fc <_free_r>:
   855fc:	28004c26 	beq	r5,zero,85730 <_free_r+0x134>
   85600:	defffd04 	addi	sp,sp,-12
   85604:	dc400115 	stw	r17,4(sp)
   85608:	dc000015 	stw	r16,0(sp)
   8560c:	2023883a 	mov	r17,r4
   85610:	2821883a 	mov	r16,r5
   85614:	dfc00215 	stw	ra,8(sp)
   85618:	008dedc0 	call	8dedc <__malloc_lock>
   8561c:	813fff17 	ldw	r4,-4(r16)
   85620:	00bfff84 	movi	r2,-2
   85624:	02400274 	movhi	r9,9
   85628:	81bffe04 	addi	r6,r16,-8
   8562c:	2084703a 	and	r2,r4,r2
   85630:	4a45a804 	addi	r9,r9,5792
   85634:	308b883a 	add	r5,r6,r2
   85638:	2a000117 	ldw	r8,4(r5)
   8563c:	49c00217 	ldw	r7,8(r9)
   85640:	00ffff04 	movi	r3,-4
   85644:	40c6703a 	and	r3,r8,r3
   85648:	39405326 	beq	r7,r5,85798 <_free_r+0x19c>
   8564c:	28c00115 	stw	r3,4(r5)
   85650:	2100004c 	andi	r4,r4,1
   85654:	2000091e 	bne	r4,zero,8567c <_free_r+0x80>
   85658:	81fffe17 	ldw	r7,-8(r16)
   8565c:	4a000204 	addi	r8,r9,8
   85660:	31cdc83a 	sub	r6,r6,r7
   85664:	31000217 	ldw	r4,8(r6)
   85668:	11c5883a 	add	r2,r2,r7
   8566c:	22006126 	beq	r4,r8,857f4 <_free_r+0x1f8>
   85670:	31c00317 	ldw	r7,12(r6)
   85674:	21c00315 	stw	r7,12(r4)
   85678:	39000215 	stw	r4,8(r7)
   8567c:	28c9883a 	add	r4,r5,r3
   85680:	21c00117 	ldw	r7,4(r4)
   85684:	39c0004c 	andi	r7,r7,1
   85688:	38000d1e 	bne	r7,zero,856c0 <_free_r+0xc4>
   8568c:	29000217 	ldw	r4,8(r5)
   85690:	10c5883a 	add	r2,r2,r3
   85694:	00c00274 	movhi	r3,9
   85698:	18c5aa04 	addi	r3,r3,5800
   8569c:	20c07526 	beq	r4,r3,85874 <_free_r+0x278>
   856a0:	29c00317 	ldw	r7,12(r5)
   856a4:	11400054 	ori	r5,r2,1
   856a8:	3087883a 	add	r3,r6,r2
   856ac:	21c00315 	stw	r7,12(r4)
   856b0:	39000215 	stw	r4,8(r7)
   856b4:	31400115 	stw	r5,4(r6)
   856b8:	18800015 	stw	r2,0(r3)
   856bc:	00000406 	br	856d0 <_free_r+0xd4>
   856c0:	10c00054 	ori	r3,r2,1
   856c4:	30c00115 	stw	r3,4(r6)
   856c8:	3087883a 	add	r3,r6,r2
   856cc:	18800015 	stw	r2,0(r3)
   856d0:	00c07fc4 	movi	r3,511
   856d4:	18801736 	bltu	r3,r2,85734 <_free_r+0x138>
   856d8:	1004d0fa 	srli	r2,r2,3
   856dc:	01400044 	movi	r5,1
   856e0:	49000117 	ldw	r4,4(r9)
   856e4:	1087883a 	add	r3,r2,r2
   856e8:	18c7883a 	add	r3,r3,r3
   856ec:	1005d0ba 	srai	r2,r2,2
   856f0:	18c7883a 	add	r3,r3,r3
   856f4:	1a47883a 	add	r3,r3,r9
   856f8:	19c00217 	ldw	r7,8(r3)
   856fc:	2884983a 	sll	r2,r5,r2
   85700:	30c00315 	stw	r3,12(r6)
   85704:	31c00215 	stw	r7,8(r6)
   85708:	1104b03a 	or	r2,r2,r4
   8570c:	19800215 	stw	r6,8(r3)
   85710:	48800115 	stw	r2,4(r9)
   85714:	39800315 	stw	r6,12(r7)
   85718:	8809883a 	mov	r4,r17
   8571c:	dfc00217 	ldw	ra,8(sp)
   85720:	dc400117 	ldw	r17,4(sp)
   85724:	dc000017 	ldw	r16,0(sp)
   85728:	dec00304 	addi	sp,sp,12
   8572c:	008defc1 	jmpi	8defc <__malloc_unlock>
   85730:	f800283a 	ret
   85734:	1006d27a 	srli	r3,r2,9
   85738:	01000104 	movi	r4,4
   8573c:	20c04036 	bltu	r4,r3,85840 <_free_r+0x244>
   85740:	1006d1ba 	srli	r3,r2,6
   85744:	19400e04 	addi	r5,r3,56
   85748:	2947883a 	add	r3,r5,r5
   8574c:	18c7883a 	add	r3,r3,r3
   85750:	18c7883a 	add	r3,r3,r3
   85754:	1a49883a 	add	r4,r3,r9
   85758:	20c00217 	ldw	r3,8(r4)
   8575c:	01c00274 	movhi	r7,9
   85760:	39c5a804 	addi	r7,r7,5792
   85764:	19003b26 	beq	r3,r4,85854 <_free_r+0x258>
   85768:	01ffff04 	movi	r7,-4
   8576c:	19400117 	ldw	r5,4(r3)
   85770:	29ca703a 	and	r5,r5,r7
   85774:	1140022e 	bgeu	r2,r5,85780 <_free_r+0x184>
   85778:	18c00217 	ldw	r3,8(r3)
   8577c:	20fffb1e 	bne	r4,r3,8576c <__alt_data_end+0xfffbc38c>
   85780:	18800317 	ldw	r2,12(r3)
   85784:	30800315 	stw	r2,12(r6)
   85788:	30c00215 	stw	r3,8(r6)
   8578c:	11800215 	stw	r6,8(r2)
   85790:	19800315 	stw	r6,12(r3)
   85794:	003fe006 	br	85718 <__alt_data_end+0xfffbc338>
   85798:	2100004c 	andi	r4,r4,1
   8579c:	1885883a 	add	r2,r3,r2
   857a0:	2000071e 	bne	r4,zero,857c0 <_free_r+0x1c4>
   857a4:	817ffe17 	ldw	r5,-8(r16)
   857a8:	314dc83a 	sub	r6,r6,r5
   857ac:	30c00317 	ldw	r3,12(r6)
   857b0:	31000217 	ldw	r4,8(r6)
   857b4:	1145883a 	add	r2,r2,r5
   857b8:	20c00315 	stw	r3,12(r4)
   857bc:	19000215 	stw	r4,8(r3)
   857c0:	10c00054 	ori	r3,r2,1
   857c4:	30c00115 	stw	r3,4(r6)
   857c8:	00c00274 	movhi	r3,9
   857cc:	18cb4a04 	addi	r3,r3,11560
   857d0:	18c00017 	ldw	r3,0(r3)
   857d4:	49800215 	stw	r6,8(r9)
   857d8:	10ffcf36 	bltu	r2,r3,85718 <__alt_data_end+0xfffbc338>
   857dc:	00800274 	movhi	r2,9
   857e0:	10923604 	addi	r2,r2,18648
   857e4:	11400017 	ldw	r5,0(r2)
   857e8:	8809883a 	mov	r4,r17
   857ec:	00854d80 	call	854d8 <_malloc_trim_r>
   857f0:	003fc906 	br	85718 <__alt_data_end+0xfffbc338>
   857f4:	28c9883a 	add	r4,r5,r3
   857f8:	21000117 	ldw	r4,4(r4)
   857fc:	2100004c 	andi	r4,r4,1
   85800:	20000a1e 	bne	r4,zero,8582c <_free_r+0x230>
   85804:	29000317 	ldw	r4,12(r5)
   85808:	29400217 	ldw	r5,8(r5)
   8580c:	10c5883a 	add	r2,r2,r3
   85810:	10c00054 	ori	r3,r2,1
   85814:	29000315 	stw	r4,12(r5)
   85818:	21400215 	stw	r5,8(r4)
   8581c:	30c00115 	stw	r3,4(r6)
   85820:	308d883a 	add	r6,r6,r2
   85824:	30800015 	stw	r2,0(r6)
   85828:	003fbb06 	br	85718 <__alt_data_end+0xfffbc338>
   8582c:	10c00054 	ori	r3,r2,1
   85830:	30c00115 	stw	r3,4(r6)
   85834:	308d883a 	add	r6,r6,r2
   85838:	30800015 	stw	r2,0(r6)
   8583c:	003fb606 	br	85718 <__alt_data_end+0xfffbc338>
   85840:	01000504 	movi	r4,20
   85844:	20c01436 	bltu	r4,r3,85898 <_free_r+0x29c>
   85848:	194016c4 	addi	r5,r3,91
   8584c:	2947883a 	add	r3,r5,r5
   85850:	003fbe06 	br	8574c <__alt_data_end+0xfffbc36c>
   85854:	280bd0ba 	srai	r5,r5,2
   85858:	00800044 	movi	r2,1
   8585c:	39000117 	ldw	r4,4(r7)
   85860:	114a983a 	sll	r5,r2,r5
   85864:	1805883a 	mov	r2,r3
   85868:	2908b03a 	or	r4,r5,r4
   8586c:	39000115 	stw	r4,4(r7)
   85870:	003fc406 	br	85784 <__alt_data_end+0xfffbc3a4>
   85874:	49800515 	stw	r6,20(r9)
   85878:	49800415 	stw	r6,16(r9)
   8587c:	10c00054 	ori	r3,r2,1
   85880:	31000315 	stw	r4,12(r6)
   85884:	31000215 	stw	r4,8(r6)
   85888:	30c00115 	stw	r3,4(r6)
   8588c:	308d883a 	add	r6,r6,r2
   85890:	30800015 	stw	r2,0(r6)
   85894:	003fa006 	br	85718 <__alt_data_end+0xfffbc338>
   85898:	01001504 	movi	r4,84
   8589c:	20c00436 	bltu	r4,r3,858b0 <_free_r+0x2b4>
   858a0:	1006d33a 	srli	r3,r2,12
   858a4:	19401b84 	addi	r5,r3,110
   858a8:	2947883a 	add	r3,r5,r5
   858ac:	003fa706 	br	8574c <__alt_data_end+0xfffbc36c>
   858b0:	01005504 	movi	r4,340
   858b4:	20c00436 	bltu	r4,r3,858c8 <_free_r+0x2cc>
   858b8:	1006d3fa 	srli	r3,r2,15
   858bc:	19401dc4 	addi	r5,r3,119
   858c0:	2947883a 	add	r3,r5,r5
   858c4:	003fa106 	br	8574c <__alt_data_end+0xfffbc36c>
   858c8:	01015504 	movi	r4,1364
   858cc:	20c00436 	bltu	r4,r3,858e0 <_free_r+0x2e4>
   858d0:	1006d4ba 	srli	r3,r2,18
   858d4:	19401f04 	addi	r5,r3,124
   858d8:	2947883a 	add	r3,r5,r5
   858dc:	003f9b06 	br	8574c <__alt_data_end+0xfffbc36c>
   858e0:	00c03f04 	movi	r3,252
   858e4:	01401f84 	movi	r5,126
   858e8:	003f9806 	br	8574c <__alt_data_end+0xfffbc36c>

000858ec <__sfvwrite_r>:
   858ec:	30800217 	ldw	r2,8(r6)
   858f0:	10006726 	beq	r2,zero,85a90 <__sfvwrite_r+0x1a4>
   858f4:	defff404 	addi	sp,sp,-48
   858f8:	dd000615 	stw	r20,24(sp)
   858fc:	2029883a 	mov	r20,r4
   85900:	2900030b 	ldhu	r4,12(r5)
   85904:	ddc00915 	stw	r23,36(sp)
   85908:	dc000215 	stw	r16,8(sp)
   8590c:	dfc00b15 	stw	ra,44(sp)
   85910:	df000a15 	stw	fp,40(sp)
   85914:	dd800815 	stw	r22,32(sp)
   85918:	dd400715 	stw	r21,28(sp)
   8591c:	dcc00515 	stw	r19,20(sp)
   85920:	dc800415 	stw	r18,16(sp)
   85924:	dc400315 	stw	r17,12(sp)
   85928:	2080020c 	andi	r2,r4,8
   8592c:	2821883a 	mov	r16,r5
   85930:	302f883a 	mov	r23,r6
   85934:	10002726 	beq	r2,zero,859d4 <__sfvwrite_r+0xe8>
   85938:	28800417 	ldw	r2,16(r5)
   8593c:	10002526 	beq	r2,zero,859d4 <__sfvwrite_r+0xe8>
   85940:	2080008c 	andi	r2,r4,2
   85944:	bc400017 	ldw	r17,0(r23)
   85948:	10002a26 	beq	r2,zero,859f4 <__sfvwrite_r+0x108>
   8594c:	05600034 	movhi	r21,32768
   85950:	0027883a 	mov	r19,zero
   85954:	0025883a 	mov	r18,zero
   85958:	ad7f0004 	addi	r21,r21,-1024
   8595c:	980d883a 	mov	r6,r19
   85960:	a009883a 	mov	r4,r20
   85964:	90004626 	beq	r18,zero,85a80 <__sfvwrite_r+0x194>
   85968:	900f883a 	mov	r7,r18
   8596c:	81400717 	ldw	r5,28(r16)
   85970:	ac80022e 	bgeu	r21,r18,8597c <__sfvwrite_r+0x90>
   85974:	01e00034 	movhi	r7,32768
   85978:	39ff0004 	addi	r7,r7,-1024
   8597c:	80800917 	ldw	r2,36(r16)
   85980:	103ee83a 	callr	r2
   85984:	0080550e 	bge	zero,r2,85adc <__sfvwrite_r+0x1f0>
   85988:	b8c00217 	ldw	r3,8(r23)
   8598c:	98a7883a 	add	r19,r19,r2
   85990:	90a5c83a 	sub	r18,r18,r2
   85994:	1885c83a 	sub	r2,r3,r2
   85998:	b8800215 	stw	r2,8(r23)
   8599c:	103fef1e 	bne	r2,zero,8595c <__alt_data_end+0xfffbc57c>
   859a0:	0005883a 	mov	r2,zero
   859a4:	dfc00b17 	ldw	ra,44(sp)
   859a8:	df000a17 	ldw	fp,40(sp)
   859ac:	ddc00917 	ldw	r23,36(sp)
   859b0:	dd800817 	ldw	r22,32(sp)
   859b4:	dd400717 	ldw	r21,28(sp)
   859b8:	dd000617 	ldw	r20,24(sp)
   859bc:	dcc00517 	ldw	r19,20(sp)
   859c0:	dc800417 	ldw	r18,16(sp)
   859c4:	dc400317 	ldw	r17,12(sp)
   859c8:	dc000217 	ldw	r16,8(sp)
   859cc:	dec00c04 	addi	sp,sp,48
   859d0:	f800283a 	ret
   859d4:	a009883a 	mov	r4,r20
   859d8:	800b883a 	mov	r5,r16
   859dc:	00833f00 	call	833f0 <__swsetup_r>
   859e0:	1000ef1e 	bne	r2,zero,85da0 <__sfvwrite_r+0x4b4>
   859e4:	8100030b 	ldhu	r4,12(r16)
   859e8:	bc400017 	ldw	r17,0(r23)
   859ec:	2080008c 	andi	r2,r4,2
   859f0:	103fd61e 	bne	r2,zero,8594c <__alt_data_end+0xfffbc56c>
   859f4:	2080004c 	andi	r2,r4,1
   859f8:	10003d1e 	bne	r2,zero,85af0 <__sfvwrite_r+0x204>
   859fc:	0039883a 	mov	fp,zero
   85a00:	0025883a 	mov	r18,zero
   85a04:	90001a26 	beq	r18,zero,85a70 <__sfvwrite_r+0x184>
   85a08:	2080800c 	andi	r2,r4,512
   85a0c:	85800217 	ldw	r22,8(r16)
   85a10:	10007926 	beq	r2,zero,85bf8 <__sfvwrite_r+0x30c>
   85a14:	b027883a 	mov	r19,r22
   85a18:	95809736 	bltu	r18,r22,85c78 <__sfvwrite_r+0x38c>
   85a1c:	2081200c 	andi	r2,r4,1152
   85a20:	1000a21e 	bne	r2,zero,85cac <__sfvwrite_r+0x3c0>
   85a24:	81000017 	ldw	r4,0(r16)
   85a28:	e00b883a 	mov	r5,fp
   85a2c:	980d883a 	mov	r6,r19
   85a30:	0086ba00 	call	86ba0 <memmove>
   85a34:	81000217 	ldw	r4,8(r16)
   85a38:	81400017 	ldw	r5,0(r16)
   85a3c:	9005883a 	mov	r2,r18
   85a40:	2587c83a 	sub	r3,r4,r22
   85a44:	2ce7883a 	add	r19,r5,r19
   85a48:	80c00215 	stw	r3,8(r16)
   85a4c:	84c00015 	stw	r19,0(r16)
   85a50:	b8c00217 	ldw	r3,8(r23)
   85a54:	e0b9883a 	add	fp,fp,r2
   85a58:	90a5c83a 	sub	r18,r18,r2
   85a5c:	1885c83a 	sub	r2,r3,r2
   85a60:	b8800215 	stw	r2,8(r23)
   85a64:	103fce26 	beq	r2,zero,859a0 <__alt_data_end+0xfffbc5c0>
   85a68:	8100030b 	ldhu	r4,12(r16)
   85a6c:	903fe61e 	bne	r18,zero,85a08 <__alt_data_end+0xfffbc628>
   85a70:	8f000017 	ldw	fp,0(r17)
   85a74:	8c800117 	ldw	r18,4(r17)
   85a78:	8c400204 	addi	r17,r17,8
   85a7c:	003fe106 	br	85a04 <__alt_data_end+0xfffbc624>
   85a80:	8cc00017 	ldw	r19,0(r17)
   85a84:	8c800117 	ldw	r18,4(r17)
   85a88:	8c400204 	addi	r17,r17,8
   85a8c:	003fb306 	br	8595c <__alt_data_end+0xfffbc57c>
   85a90:	0005883a 	mov	r2,zero
   85a94:	f800283a 	ret
   85a98:	00a00034 	movhi	r2,32768
   85a9c:	10bfffc4 	addi	r2,r2,-1
   85aa0:	9009883a 	mov	r4,r18
   85aa4:	1480012e 	bgeu	r2,r18,85aac <__sfvwrite_r+0x1c0>
   85aa8:	1009883a 	mov	r4,r2
   85aac:	980b883a 	mov	r5,r19
   85ab0:	008103c0 	call	8103c <__divsi3>
   85ab4:	9809883a 	mov	r4,r19
   85ab8:	100b883a 	mov	r5,r2
   85abc:	008b0d80 	call	8b0d8 <__mulsi3>
   85ac0:	81400717 	ldw	r5,28(r16)
   85ac4:	80c00917 	ldw	r3,36(r16)
   85ac8:	a009883a 	mov	r4,r20
   85acc:	e00d883a 	mov	r6,fp
   85ad0:	100f883a 	mov	r7,r2
   85ad4:	183ee83a 	callr	r3
   85ad8:	00bfdd16 	blt	zero,r2,85a50 <__alt_data_end+0xfffbc670>
   85adc:	8080030b 	ldhu	r2,12(r16)
   85ae0:	10801014 	ori	r2,r2,64
   85ae4:	8080030d 	sth	r2,12(r16)
   85ae8:	00bfffc4 	movi	r2,-1
   85aec:	003fad06 	br	859a4 <__alt_data_end+0xfffbc5c4>
   85af0:	0027883a 	mov	r19,zero
   85af4:	0011883a 	mov	r8,zero
   85af8:	0039883a 	mov	fp,zero
   85afc:	0025883a 	mov	r18,zero
   85b00:	90001f26 	beq	r18,zero,85b80 <__sfvwrite_r+0x294>
   85b04:	40006026 	beq	r8,zero,85c88 <__sfvwrite_r+0x39c>
   85b08:	982b883a 	mov	r21,r19
   85b0c:	94c0012e 	bgeu	r18,r19,85b14 <__sfvwrite_r+0x228>
   85b10:	902b883a 	mov	r21,r18
   85b14:	81000017 	ldw	r4,0(r16)
   85b18:	80800417 	ldw	r2,16(r16)
   85b1c:	a82d883a 	mov	r22,r21
   85b20:	81800217 	ldw	r6,8(r16)
   85b24:	81c00517 	ldw	r7,20(r16)
   85b28:	1100022e 	bgeu	r2,r4,85b34 <__sfvwrite_r+0x248>
   85b2c:	31c7883a 	add	r3,r6,r7
   85b30:	1d401816 	blt	r3,r21,85b94 <__sfvwrite_r+0x2a8>
   85b34:	a9c04416 	blt	r21,r7,85c48 <__sfvwrite_r+0x35c>
   85b38:	80800917 	ldw	r2,36(r16)
   85b3c:	81400717 	ldw	r5,28(r16)
   85b40:	a009883a 	mov	r4,r20
   85b44:	da000115 	stw	r8,4(sp)
   85b48:	e00d883a 	mov	r6,fp
   85b4c:	103ee83a 	callr	r2
   85b50:	102d883a 	mov	r22,r2
   85b54:	da000117 	ldw	r8,4(sp)
   85b58:	00bfe00e 	bge	zero,r2,85adc <__alt_data_end+0xfffbc6fc>
   85b5c:	9da7c83a 	sub	r19,r19,r22
   85b60:	98001f26 	beq	r19,zero,85be0 <__sfvwrite_r+0x2f4>
   85b64:	b8800217 	ldw	r2,8(r23)
   85b68:	e5b9883a 	add	fp,fp,r22
   85b6c:	95a5c83a 	sub	r18,r18,r22
   85b70:	15adc83a 	sub	r22,r2,r22
   85b74:	bd800215 	stw	r22,8(r23)
   85b78:	b03f8926 	beq	r22,zero,859a0 <__alt_data_end+0xfffbc5c0>
   85b7c:	903fe11e 	bne	r18,zero,85b04 <__alt_data_end+0xfffbc724>
   85b80:	8f000017 	ldw	fp,0(r17)
   85b84:	8c800117 	ldw	r18,4(r17)
   85b88:	0011883a 	mov	r8,zero
   85b8c:	8c400204 	addi	r17,r17,8
   85b90:	003fdb06 	br	85b00 <__alt_data_end+0xfffbc720>
   85b94:	180d883a 	mov	r6,r3
   85b98:	e00b883a 	mov	r5,fp
   85b9c:	da000115 	stw	r8,4(sp)
   85ba0:	d8c00015 	stw	r3,0(sp)
   85ba4:	0086ba00 	call	86ba0 <memmove>
   85ba8:	d8c00017 	ldw	r3,0(sp)
   85bac:	80800017 	ldw	r2,0(r16)
   85bb0:	a009883a 	mov	r4,r20
   85bb4:	800b883a 	mov	r5,r16
   85bb8:	10c5883a 	add	r2,r2,r3
   85bbc:	80800015 	stw	r2,0(r16)
   85bc0:	d8c00015 	stw	r3,0(sp)
   85bc4:	008509c0 	call	8509c <_fflush_r>
   85bc8:	d8c00017 	ldw	r3,0(sp)
   85bcc:	da000117 	ldw	r8,4(sp)
   85bd0:	103fc21e 	bne	r2,zero,85adc <__alt_data_end+0xfffbc6fc>
   85bd4:	182d883a 	mov	r22,r3
   85bd8:	9da7c83a 	sub	r19,r19,r22
   85bdc:	983fe11e 	bne	r19,zero,85b64 <__alt_data_end+0xfffbc784>
   85be0:	a009883a 	mov	r4,r20
   85be4:	800b883a 	mov	r5,r16
   85be8:	008509c0 	call	8509c <_fflush_r>
   85bec:	103fbb1e 	bne	r2,zero,85adc <__alt_data_end+0xfffbc6fc>
   85bf0:	0011883a 	mov	r8,zero
   85bf4:	003fdb06 	br	85b64 <__alt_data_end+0xfffbc784>
   85bf8:	81000017 	ldw	r4,0(r16)
   85bfc:	80800417 	ldw	r2,16(r16)
   85c00:	11000236 	bltu	r2,r4,85c0c <__sfvwrite_r+0x320>
   85c04:	84c00517 	ldw	r19,20(r16)
   85c08:	94ffa32e 	bgeu	r18,r19,85a98 <__alt_data_end+0xfffbc6b8>
   85c0c:	9027883a 	mov	r19,r18
   85c10:	b480012e 	bgeu	r22,r18,85c18 <__sfvwrite_r+0x32c>
   85c14:	b027883a 	mov	r19,r22
   85c18:	e00b883a 	mov	r5,fp
   85c1c:	980d883a 	mov	r6,r19
   85c20:	0086ba00 	call	86ba0 <memmove>
   85c24:	80800217 	ldw	r2,8(r16)
   85c28:	80c00017 	ldw	r3,0(r16)
   85c2c:	14c5c83a 	sub	r2,r2,r19
   85c30:	1cc7883a 	add	r3,r3,r19
   85c34:	80800215 	stw	r2,8(r16)
   85c38:	80c00015 	stw	r3,0(r16)
   85c3c:	10004326 	beq	r2,zero,85d4c <__sfvwrite_r+0x460>
   85c40:	9805883a 	mov	r2,r19
   85c44:	003f8206 	br	85a50 <__alt_data_end+0xfffbc670>
   85c48:	a80d883a 	mov	r6,r21
   85c4c:	e00b883a 	mov	r5,fp
   85c50:	da000115 	stw	r8,4(sp)
   85c54:	0086ba00 	call	86ba0 <memmove>
   85c58:	80800217 	ldw	r2,8(r16)
   85c5c:	80c00017 	ldw	r3,0(r16)
   85c60:	da000117 	ldw	r8,4(sp)
   85c64:	1545c83a 	sub	r2,r2,r21
   85c68:	1d6b883a 	add	r21,r3,r21
   85c6c:	80800215 	stw	r2,8(r16)
   85c70:	85400015 	stw	r21,0(r16)
   85c74:	003fb906 	br	85b5c <__alt_data_end+0xfffbc77c>
   85c78:	81000017 	ldw	r4,0(r16)
   85c7c:	902d883a 	mov	r22,r18
   85c80:	9027883a 	mov	r19,r18
   85c84:	003f6806 	br	85a28 <__alt_data_end+0xfffbc648>
   85c88:	e009883a 	mov	r4,fp
   85c8c:	01400284 	movi	r5,10
   85c90:	900d883a 	mov	r6,r18
   85c94:	00869800 	call	86980 <memchr>
   85c98:	10003e26 	beq	r2,zero,85d94 <__sfvwrite_r+0x4a8>
   85c9c:	10800044 	addi	r2,r2,1
   85ca0:	1727c83a 	sub	r19,r2,fp
   85ca4:	02000044 	movi	r8,1
   85ca8:	003f9706 	br	85b08 <__alt_data_end+0xfffbc728>
   85cac:	80800517 	ldw	r2,20(r16)
   85cb0:	81400417 	ldw	r5,16(r16)
   85cb4:	80c00017 	ldw	r3,0(r16)
   85cb8:	10a7883a 	add	r19,r2,r2
   85cbc:	9885883a 	add	r2,r19,r2
   85cc0:	1026d7fa 	srli	r19,r2,31
   85cc4:	196bc83a 	sub	r21,r3,r5
   85cc8:	a9800044 	addi	r6,r21,1
   85ccc:	9885883a 	add	r2,r19,r2
   85cd0:	1027d07a 	srai	r19,r2,1
   85cd4:	3485883a 	add	r2,r6,r18
   85cd8:	980d883a 	mov	r6,r19
   85cdc:	9880022e 	bgeu	r19,r2,85ce8 <__sfvwrite_r+0x3fc>
   85ce0:	1027883a 	mov	r19,r2
   85ce4:	100d883a 	mov	r6,r2
   85ce8:	2101000c 	andi	r4,r4,1024
   85cec:	20001c26 	beq	r4,zero,85d60 <__sfvwrite_r+0x474>
   85cf0:	a009883a 	mov	r4,r20
   85cf4:	300b883a 	mov	r5,r6
   85cf8:	00861d80 	call	861d8 <_malloc_r>
   85cfc:	102d883a 	mov	r22,r2
   85d00:	10002926 	beq	r2,zero,85da8 <__sfvwrite_r+0x4bc>
   85d04:	81400417 	ldw	r5,16(r16)
   85d08:	1009883a 	mov	r4,r2
   85d0c:	a80d883a 	mov	r6,r21
   85d10:	0086a680 	call	86a68 <memcpy>
   85d14:	8080030b 	ldhu	r2,12(r16)
   85d18:	00fedfc4 	movi	r3,-1153
   85d1c:	10c4703a 	and	r2,r2,r3
   85d20:	10802014 	ori	r2,r2,128
   85d24:	8080030d 	sth	r2,12(r16)
   85d28:	b549883a 	add	r4,r22,r21
   85d2c:	9d4bc83a 	sub	r5,r19,r21
   85d30:	85800415 	stw	r22,16(r16)
   85d34:	84c00515 	stw	r19,20(r16)
   85d38:	81000015 	stw	r4,0(r16)
   85d3c:	902d883a 	mov	r22,r18
   85d40:	81400215 	stw	r5,8(r16)
   85d44:	9027883a 	mov	r19,r18
   85d48:	003f3706 	br	85a28 <__alt_data_end+0xfffbc648>
   85d4c:	a009883a 	mov	r4,r20
   85d50:	800b883a 	mov	r5,r16
   85d54:	008509c0 	call	8509c <_fflush_r>
   85d58:	103fb926 	beq	r2,zero,85c40 <__alt_data_end+0xfffbc860>
   85d5c:	003f5f06 	br	85adc <__alt_data_end+0xfffbc6fc>
   85d60:	a009883a 	mov	r4,r20
   85d64:	0087e7c0 	call	87e7c <_realloc_r>
   85d68:	102d883a 	mov	r22,r2
   85d6c:	103fee1e 	bne	r2,zero,85d28 <__alt_data_end+0xfffbc948>
   85d70:	81400417 	ldw	r5,16(r16)
   85d74:	a009883a 	mov	r4,r20
   85d78:	00855fc0 	call	855fc <_free_r>
   85d7c:	8080030b 	ldhu	r2,12(r16)
   85d80:	00ffdfc4 	movi	r3,-129
   85d84:	1884703a 	and	r2,r3,r2
   85d88:	00c00304 	movi	r3,12
   85d8c:	a0c00015 	stw	r3,0(r20)
   85d90:	003f5306 	br	85ae0 <__alt_data_end+0xfffbc700>
   85d94:	94c00044 	addi	r19,r18,1
   85d98:	02000044 	movi	r8,1
   85d9c:	003f5a06 	br	85b08 <__alt_data_end+0xfffbc728>
   85da0:	00bfffc4 	movi	r2,-1
   85da4:	003eff06 	br	859a4 <__alt_data_end+0xfffbc5c4>
   85da8:	00800304 	movi	r2,12
   85dac:	a0800015 	stw	r2,0(r20)
   85db0:	8080030b 	ldhu	r2,12(r16)
   85db4:	003f4a06 	br	85ae0 <__alt_data_end+0xfffbc700>

00085db8 <_fwalk>:
   85db8:	defff704 	addi	sp,sp,-36
   85dbc:	dd000415 	stw	r20,16(sp)
   85dc0:	dfc00815 	stw	ra,32(sp)
   85dc4:	ddc00715 	stw	r23,28(sp)
   85dc8:	dd800615 	stw	r22,24(sp)
   85dcc:	dd400515 	stw	r21,20(sp)
   85dd0:	dcc00315 	stw	r19,12(sp)
   85dd4:	dc800215 	stw	r18,8(sp)
   85dd8:	dc400115 	stw	r17,4(sp)
   85ddc:	dc000015 	stw	r16,0(sp)
   85de0:	2500b804 	addi	r20,r4,736
   85de4:	a0002326 	beq	r20,zero,85e74 <_fwalk+0xbc>
   85de8:	282b883a 	mov	r21,r5
   85dec:	002f883a 	mov	r23,zero
   85df0:	05800044 	movi	r22,1
   85df4:	04ffffc4 	movi	r19,-1
   85df8:	a4400117 	ldw	r17,4(r20)
   85dfc:	a4800217 	ldw	r18,8(r20)
   85e00:	8c7fffc4 	addi	r17,r17,-1
   85e04:	88000d16 	blt	r17,zero,85e3c <_fwalk+0x84>
   85e08:	94000304 	addi	r16,r18,12
   85e0c:	94800384 	addi	r18,r18,14
   85e10:	80c0000b 	ldhu	r3,0(r16)
   85e14:	8c7fffc4 	addi	r17,r17,-1
   85e18:	813ffd04 	addi	r4,r16,-12
   85e1c:	b0c0042e 	bgeu	r22,r3,85e30 <_fwalk+0x78>
   85e20:	90c0000f 	ldh	r3,0(r18)
   85e24:	1cc00226 	beq	r3,r19,85e30 <_fwalk+0x78>
   85e28:	a83ee83a 	callr	r21
   85e2c:	b8aeb03a 	or	r23,r23,r2
   85e30:	84001a04 	addi	r16,r16,104
   85e34:	94801a04 	addi	r18,r18,104
   85e38:	8cfff51e 	bne	r17,r19,85e10 <__alt_data_end+0xfffbca30>
   85e3c:	a5000017 	ldw	r20,0(r20)
   85e40:	a03fed1e 	bne	r20,zero,85df8 <__alt_data_end+0xfffbca18>
   85e44:	b805883a 	mov	r2,r23
   85e48:	dfc00817 	ldw	ra,32(sp)
   85e4c:	ddc00717 	ldw	r23,28(sp)
   85e50:	dd800617 	ldw	r22,24(sp)
   85e54:	dd400517 	ldw	r21,20(sp)
   85e58:	dd000417 	ldw	r20,16(sp)
   85e5c:	dcc00317 	ldw	r19,12(sp)
   85e60:	dc800217 	ldw	r18,8(sp)
   85e64:	dc400117 	ldw	r17,4(sp)
   85e68:	dc000017 	ldw	r16,0(sp)
   85e6c:	dec00904 	addi	sp,sp,36
   85e70:	f800283a 	ret
   85e74:	002f883a 	mov	r23,zero
   85e78:	003ff206 	br	85e44 <__alt_data_end+0xfffbca64>

00085e7c <_fwalk_reent>:
   85e7c:	defff704 	addi	sp,sp,-36
   85e80:	dd400515 	stw	r21,20(sp)
   85e84:	dfc00815 	stw	ra,32(sp)
   85e88:	ddc00715 	stw	r23,28(sp)
   85e8c:	dd800615 	stw	r22,24(sp)
   85e90:	dd000415 	stw	r20,16(sp)
   85e94:	dcc00315 	stw	r19,12(sp)
   85e98:	dc800215 	stw	r18,8(sp)
   85e9c:	dc400115 	stw	r17,4(sp)
   85ea0:	dc000015 	stw	r16,0(sp)
   85ea4:	2540b804 	addi	r21,r4,736
   85ea8:	a8002326 	beq	r21,zero,85f38 <_fwalk_reent+0xbc>
   85eac:	2829883a 	mov	r20,r5
   85eb0:	202d883a 	mov	r22,r4
   85eb4:	002f883a 	mov	r23,zero
   85eb8:	04c00044 	movi	r19,1
   85ebc:	04bfffc4 	movi	r18,-1
   85ec0:	ac400117 	ldw	r17,4(r21)
   85ec4:	ac000217 	ldw	r16,8(r21)
   85ec8:	8c7fffc4 	addi	r17,r17,-1
   85ecc:	88000c16 	blt	r17,zero,85f00 <_fwalk_reent+0x84>
   85ed0:	84000304 	addi	r16,r16,12
   85ed4:	80c0000b 	ldhu	r3,0(r16)
   85ed8:	8c7fffc4 	addi	r17,r17,-1
   85edc:	817ffd04 	addi	r5,r16,-12
   85ee0:	98c0052e 	bgeu	r19,r3,85ef8 <_fwalk_reent+0x7c>
   85ee4:	80c0008f 	ldh	r3,2(r16)
   85ee8:	b009883a 	mov	r4,r22
   85eec:	1c800226 	beq	r3,r18,85ef8 <_fwalk_reent+0x7c>
   85ef0:	a03ee83a 	callr	r20
   85ef4:	b8aeb03a 	or	r23,r23,r2
   85ef8:	84001a04 	addi	r16,r16,104
   85efc:	8cbff51e 	bne	r17,r18,85ed4 <__alt_data_end+0xfffbcaf4>
   85f00:	ad400017 	ldw	r21,0(r21)
   85f04:	a83fee1e 	bne	r21,zero,85ec0 <__alt_data_end+0xfffbcae0>
   85f08:	b805883a 	mov	r2,r23
   85f0c:	dfc00817 	ldw	ra,32(sp)
   85f10:	ddc00717 	ldw	r23,28(sp)
   85f14:	dd800617 	ldw	r22,24(sp)
   85f18:	dd400517 	ldw	r21,20(sp)
   85f1c:	dd000417 	ldw	r20,16(sp)
   85f20:	dcc00317 	ldw	r19,12(sp)
   85f24:	dc800217 	ldw	r18,8(sp)
   85f28:	dc400117 	ldw	r17,4(sp)
   85f2c:	dc000017 	ldw	r16,0(sp)
   85f30:	dec00904 	addi	sp,sp,36
   85f34:	f800283a 	ret
   85f38:	002f883a 	mov	r23,zero
   85f3c:	003ff206 	br	85f08 <__alt_data_end+0xfffbcb28>

00085f40 <_setlocale_r>:
   85f40:	30001b26 	beq	r6,zero,85fb0 <_setlocale_r+0x70>
   85f44:	01400274 	movhi	r5,9
   85f48:	defffe04 	addi	sp,sp,-8
   85f4c:	2943d604 	addi	r5,r5,3928
   85f50:	3009883a 	mov	r4,r6
   85f54:	dc000015 	stw	r16,0(sp)
   85f58:	dfc00115 	stw	ra,4(sp)
   85f5c:	3021883a 	mov	r16,r6
   85f60:	00885e80 	call	885e8 <strcmp>
   85f64:	1000061e 	bne	r2,zero,85f80 <_setlocale_r+0x40>
   85f68:	00800274 	movhi	r2,9
   85f6c:	1083d504 	addi	r2,r2,3924
   85f70:	dfc00117 	ldw	ra,4(sp)
   85f74:	dc000017 	ldw	r16,0(sp)
   85f78:	dec00204 	addi	sp,sp,8
   85f7c:	f800283a 	ret
   85f80:	01400274 	movhi	r5,9
   85f84:	2943d504 	addi	r5,r5,3924
   85f88:	8009883a 	mov	r4,r16
   85f8c:	00885e80 	call	885e8 <strcmp>
   85f90:	103ff526 	beq	r2,zero,85f68 <__alt_data_end+0xfffbcb88>
   85f94:	01400274 	movhi	r5,9
   85f98:	2943c004 	addi	r5,r5,3840
   85f9c:	8009883a 	mov	r4,r16
   85fa0:	00885e80 	call	885e8 <strcmp>
   85fa4:	103ff026 	beq	r2,zero,85f68 <__alt_data_end+0xfffbcb88>
   85fa8:	0005883a 	mov	r2,zero
   85fac:	003ff006 	br	85f70 <__alt_data_end+0xfffbcb90>
   85fb0:	00800274 	movhi	r2,9
   85fb4:	1083d504 	addi	r2,r2,3924
   85fb8:	f800283a 	ret

00085fbc <__locale_charset>:
   85fbc:	00800274 	movhi	r2,9
   85fc0:	10859204 	addi	r2,r2,5704
   85fc4:	f800283a 	ret

00085fc8 <__locale_mb_cur_max>:
   85fc8:	00800274 	movhi	r2,9
   85fcc:	108b4804 	addi	r2,r2,11552
   85fd0:	10800017 	ldw	r2,0(r2)
   85fd4:	f800283a 	ret

00085fd8 <__locale_msgcharset>:
   85fd8:	00800274 	movhi	r2,9
   85fdc:	10858a04 	addi	r2,r2,5672
   85fe0:	f800283a 	ret

00085fe4 <__locale_cjk_lang>:
   85fe4:	0005883a 	mov	r2,zero
   85fe8:	f800283a 	ret

00085fec <_localeconv_r>:
   85fec:	00800274 	movhi	r2,9
   85ff0:	10859a04 	addi	r2,r2,5736
   85ff4:	f800283a 	ret

00085ff8 <setlocale>:
   85ff8:	00c00274 	movhi	r3,9
   85ffc:	18cb4704 	addi	r3,r3,11548
   86000:	2005883a 	mov	r2,r4
   86004:	19000017 	ldw	r4,0(r3)
   86008:	280d883a 	mov	r6,r5
   8600c:	100b883a 	mov	r5,r2
   86010:	0085f401 	jmpi	85f40 <_setlocale_r>

00086014 <localeconv>:
   86014:	00800274 	movhi	r2,9
   86018:	10859a04 	addi	r2,r2,5736
   8601c:	f800283a 	ret

00086020 <__smakebuf_r>:
   86020:	2880030b 	ldhu	r2,12(r5)
   86024:	10c0008c 	andi	r3,r2,2
   86028:	1800401e 	bne	r3,zero,8612c <__smakebuf_r+0x10c>
   8602c:	deffec04 	addi	sp,sp,-80
   86030:	dc000f15 	stw	r16,60(sp)
   86034:	2821883a 	mov	r16,r5
   86038:	2940038f 	ldh	r5,14(r5)
   8603c:	dc401015 	stw	r17,64(sp)
   86040:	dfc01315 	stw	ra,76(sp)
   86044:	dcc01215 	stw	r19,72(sp)
   86048:	dc801115 	stw	r18,68(sp)
   8604c:	2023883a 	mov	r17,r4
   86050:	28001b16 	blt	r5,zero,860c0 <__smakebuf_r+0xa0>
   86054:	d80d883a 	mov	r6,sp
   86058:	0089fdc0 	call	89fdc <_fstat_r>
   8605c:	10001716 	blt	r2,zero,860bc <__smakebuf_r+0x9c>
   86060:	d8800117 	ldw	r2,4(sp)
   86064:	00e00014 	movui	r3,32768
   86068:	10bc000c 	andi	r2,r2,61440
   8606c:	10c03726 	beq	r2,r3,8614c <__smakebuf_r+0x12c>
   86070:	80c0030b 	ldhu	r3,12(r16)
   86074:	18c20014 	ori	r3,r3,2048
   86078:	80c0030d 	sth	r3,12(r16)
   8607c:	00c80004 	movi	r3,8192
   86080:	10c03c1e 	bne	r2,r3,86174 <__smakebuf_r+0x154>
   86084:	8140038f 	ldh	r5,14(r16)
   86088:	8809883a 	mov	r4,r17
   8608c:	008a0340 	call	8a034 <_isatty_r>
   86090:	10004e26 	beq	r2,zero,861cc <__smakebuf_r+0x1ac>
   86094:	8080030b 	ldhu	r2,12(r16)
   86098:	04c00044 	movi	r19,1
   8609c:	80c010c4 	addi	r3,r16,67
   860a0:	14c4b03a 	or	r2,r2,r19
   860a4:	8080030d 	sth	r2,12(r16)
   860a8:	80c00015 	stw	r3,0(r16)
   860ac:	80c00415 	stw	r3,16(r16)
   860b0:	84c00515 	stw	r19,20(r16)
   860b4:	04810004 	movi	r18,1024
   860b8:	00000706 	br	860d8 <__smakebuf_r+0xb8>
   860bc:	8080030b 	ldhu	r2,12(r16)
   860c0:	10c0200c 	andi	r3,r2,128
   860c4:	18001f1e 	bne	r3,zero,86144 <__smakebuf_r+0x124>
   860c8:	04810004 	movi	r18,1024
   860cc:	10820014 	ori	r2,r2,2048
   860d0:	8080030d 	sth	r2,12(r16)
   860d4:	0027883a 	mov	r19,zero
   860d8:	8809883a 	mov	r4,r17
   860dc:	900b883a 	mov	r5,r18
   860e0:	00861d80 	call	861d8 <_malloc_r>
   860e4:	10002e26 	beq	r2,zero,861a0 <__smakebuf_r+0x180>
   860e8:	80c0030b 	ldhu	r3,12(r16)
   860ec:	01000234 	movhi	r4,8
   860f0:	21144e04 	addi	r4,r4,20792
   860f4:	89000f15 	stw	r4,60(r17)
   860f8:	18c02014 	ori	r3,r3,128
   860fc:	80c0030d 	sth	r3,12(r16)
   86100:	80800015 	stw	r2,0(r16)
   86104:	80800415 	stw	r2,16(r16)
   86108:	84800515 	stw	r18,20(r16)
   8610c:	98001c1e 	bne	r19,zero,86180 <__smakebuf_r+0x160>
   86110:	dfc01317 	ldw	ra,76(sp)
   86114:	dcc01217 	ldw	r19,72(sp)
   86118:	dc801117 	ldw	r18,68(sp)
   8611c:	dc401017 	ldw	r17,64(sp)
   86120:	dc000f17 	ldw	r16,60(sp)
   86124:	dec01404 	addi	sp,sp,80
   86128:	f800283a 	ret
   8612c:	288010c4 	addi	r2,r5,67
   86130:	28800015 	stw	r2,0(r5)
   86134:	28800415 	stw	r2,16(r5)
   86138:	00800044 	movi	r2,1
   8613c:	28800515 	stw	r2,20(r5)
   86140:	f800283a 	ret
   86144:	04801004 	movi	r18,64
   86148:	003fe006 	br	860cc <__alt_data_end+0xfffbccec>
   8614c:	81000a17 	ldw	r4,40(r16)
   86150:	00c00274 	movhi	r3,9
   86154:	18e16104 	addi	r3,r3,-31356
   86158:	20ffc51e 	bne	r4,r3,86070 <__alt_data_end+0xfffbcc90>
   8615c:	80c0030b 	ldhu	r3,12(r16)
   86160:	01010004 	movi	r4,1024
   86164:	81001315 	stw	r4,76(r16)
   86168:	1906b03a 	or	r3,r3,r4
   8616c:	80c0030d 	sth	r3,12(r16)
   86170:	003fc206 	br	8607c <__alt_data_end+0xfffbcc9c>
   86174:	0027883a 	mov	r19,zero
   86178:	04810004 	movi	r18,1024
   8617c:	003fd606 	br	860d8 <__alt_data_end+0xfffbccf8>
   86180:	8140038f 	ldh	r5,14(r16)
   86184:	8809883a 	mov	r4,r17
   86188:	008a0340 	call	8a034 <_isatty_r>
   8618c:	103fe026 	beq	r2,zero,86110 <__alt_data_end+0xfffbcd30>
   86190:	8080030b 	ldhu	r2,12(r16)
   86194:	10800054 	ori	r2,r2,1
   86198:	8080030d 	sth	r2,12(r16)
   8619c:	003fdc06 	br	86110 <__alt_data_end+0xfffbcd30>
   861a0:	8080030b 	ldhu	r2,12(r16)
   861a4:	10c0800c 	andi	r3,r2,512
   861a8:	183fd91e 	bne	r3,zero,86110 <__alt_data_end+0xfffbcd30>
   861ac:	10800094 	ori	r2,r2,2
   861b0:	80c010c4 	addi	r3,r16,67
   861b4:	8080030d 	sth	r2,12(r16)
   861b8:	00800044 	movi	r2,1
   861bc:	80c00015 	stw	r3,0(r16)
   861c0:	80c00415 	stw	r3,16(r16)
   861c4:	80800515 	stw	r2,20(r16)
   861c8:	003fd106 	br	86110 <__alt_data_end+0xfffbcd30>
   861cc:	04c00044 	movi	r19,1
   861d0:	04810004 	movi	r18,1024
   861d4:	003fc006 	br	860d8 <__alt_data_end+0xfffbccf8>

000861d8 <_malloc_r>:
   861d8:	defff504 	addi	sp,sp,-44
   861dc:	dc800315 	stw	r18,12(sp)
   861e0:	dfc00a15 	stw	ra,40(sp)
   861e4:	df000915 	stw	fp,36(sp)
   861e8:	ddc00815 	stw	r23,32(sp)
   861ec:	dd800715 	stw	r22,28(sp)
   861f0:	dd400615 	stw	r21,24(sp)
   861f4:	dd000515 	stw	r20,20(sp)
   861f8:	dcc00415 	stw	r19,16(sp)
   861fc:	dc400215 	stw	r17,8(sp)
   86200:	dc000115 	stw	r16,4(sp)
   86204:	288002c4 	addi	r2,r5,11
   86208:	00c00584 	movi	r3,22
   8620c:	2025883a 	mov	r18,r4
   86210:	18802a2e 	bgeu	r3,r2,862bc <_malloc_r+0xe4>
   86214:	047ffe04 	movi	r17,-8
   86218:	1462703a 	and	r17,r2,r17
   8621c:	88009e16 	blt	r17,zero,86498 <_malloc_r+0x2c0>
   86220:	89409d36 	bltu	r17,r5,86498 <_malloc_r+0x2c0>
   86224:	008dedc0 	call	8dedc <__malloc_lock>
   86228:	00807dc4 	movi	r2,503
   8622c:	14402736 	bltu	r2,r17,862cc <_malloc_r+0xf4>
   86230:	8806d0fa 	srli	r3,r17,3
   86234:	04c00274 	movhi	r19,9
   86238:	9cc5a804 	addi	r19,r19,5792
   8623c:	18c5883a 	add	r2,r3,r3
   86240:	1085883a 	add	r2,r2,r2
   86244:	1085883a 	add	r2,r2,r2
   86248:	9885883a 	add	r2,r19,r2
   8624c:	14000317 	ldw	r16,12(r2)
   86250:	80814a26 	beq	r16,r2,8677c <_malloc_r+0x5a4>
   86254:	80c00117 	ldw	r3,4(r16)
   86258:	81000317 	ldw	r4,12(r16)
   8625c:	00bfff04 	movi	r2,-4
   86260:	1884703a 	and	r2,r3,r2
   86264:	81400217 	ldw	r5,8(r16)
   86268:	8085883a 	add	r2,r16,r2
   8626c:	10c00117 	ldw	r3,4(r2)
   86270:	29000315 	stw	r4,12(r5)
   86274:	21400215 	stw	r5,8(r4)
   86278:	18c00054 	ori	r3,r3,1
   8627c:	10c00115 	stw	r3,4(r2)
   86280:	9009883a 	mov	r4,r18
   86284:	008defc0 	call	8defc <__malloc_unlock>
   86288:	80800204 	addi	r2,r16,8
   8628c:	dfc00a17 	ldw	ra,40(sp)
   86290:	df000917 	ldw	fp,36(sp)
   86294:	ddc00817 	ldw	r23,32(sp)
   86298:	dd800717 	ldw	r22,28(sp)
   8629c:	dd400617 	ldw	r21,24(sp)
   862a0:	dd000517 	ldw	r20,20(sp)
   862a4:	dcc00417 	ldw	r19,16(sp)
   862a8:	dc800317 	ldw	r18,12(sp)
   862ac:	dc400217 	ldw	r17,8(sp)
   862b0:	dc000117 	ldw	r16,4(sp)
   862b4:	dec00b04 	addi	sp,sp,44
   862b8:	f800283a 	ret
   862bc:	04400404 	movi	r17,16
   862c0:	89407536 	bltu	r17,r5,86498 <_malloc_r+0x2c0>
   862c4:	008dedc0 	call	8dedc <__malloc_lock>
   862c8:	003fd906 	br	86230 <__alt_data_end+0xfffbce50>
   862cc:	8806d27a 	srli	r3,r17,9
   862d0:	18007526 	beq	r3,zero,864a8 <_malloc_r+0x2d0>
   862d4:	00800104 	movi	r2,4
   862d8:	10c0ef36 	bltu	r2,r3,86698 <_malloc_r+0x4c0>
   862dc:	8806d1ba 	srli	r3,r17,6
   862e0:	19c00e04 	addi	r7,r3,56
   862e4:	39cb883a 	add	r5,r7,r7
   862e8:	04c00274 	movhi	r19,9
   862ec:	294b883a 	add	r5,r5,r5
   862f0:	9cc5a804 	addi	r19,r19,5792
   862f4:	294b883a 	add	r5,r5,r5
   862f8:	994b883a 	add	r5,r19,r5
   862fc:	2c000317 	ldw	r16,12(r5)
   86300:	2c000e26 	beq	r5,r16,8633c <_malloc_r+0x164>
   86304:	80800117 	ldw	r2,4(r16)
   86308:	01bfff04 	movi	r6,-4
   8630c:	010003c4 	movi	r4,15
   86310:	1184703a 	and	r2,r2,r6
   86314:	1447c83a 	sub	r3,r2,r17
   86318:	20c00716 	blt	r4,r3,86338 <_malloc_r+0x160>
   8631c:	1800650e 	bge	r3,zero,864b4 <_malloc_r+0x2dc>
   86320:	84000317 	ldw	r16,12(r16)
   86324:	2c000526 	beq	r5,r16,8633c <_malloc_r+0x164>
   86328:	80800117 	ldw	r2,4(r16)
   8632c:	1184703a 	and	r2,r2,r6
   86330:	1447c83a 	sub	r3,r2,r17
   86334:	20fff90e 	bge	r4,r3,8631c <__alt_data_end+0xfffbcf3c>
   86338:	39ffffc4 	addi	r7,r7,-1
   8633c:	38c00044 	addi	r3,r7,1
   86340:	01800274 	movhi	r6,9
   86344:	9c000417 	ldw	r16,16(r19)
   86348:	3185a804 	addi	r6,r6,5792
   8634c:	32400204 	addi	r9,r6,8
   86350:	82410326 	beq	r16,r9,86760 <_malloc_r+0x588>
   86354:	81000117 	ldw	r4,4(r16)
   86358:	00bfff04 	movi	r2,-4
   8635c:	208e703a 	and	r7,r4,r2
   86360:	3c45c83a 	sub	r2,r7,r17
   86364:	010003c4 	movi	r4,15
   86368:	2080ee16 	blt	r4,r2,86724 <_malloc_r+0x54c>
   8636c:	32400515 	stw	r9,20(r6)
   86370:	32400415 	stw	r9,16(r6)
   86374:	1000510e 	bge	r2,zero,864bc <_malloc_r+0x2e4>
   86378:	00807fc4 	movi	r2,511
   8637c:	11c0ce36 	bltu	r2,r7,866b8 <_malloc_r+0x4e0>
   86380:	3808d0fa 	srli	r4,r7,3
   86384:	01c00044 	movi	r7,1
   86388:	30800117 	ldw	r2,4(r6)
   8638c:	210b883a 	add	r5,r4,r4
   86390:	294b883a 	add	r5,r5,r5
   86394:	2009d0ba 	srai	r4,r4,2
   86398:	294b883a 	add	r5,r5,r5
   8639c:	298b883a 	add	r5,r5,r6
   863a0:	2a000217 	ldw	r8,8(r5)
   863a4:	3908983a 	sll	r4,r7,r4
   863a8:	81400315 	stw	r5,12(r16)
   863ac:	82000215 	stw	r8,8(r16)
   863b0:	2088b03a 	or	r4,r4,r2
   863b4:	2c000215 	stw	r16,8(r5)
   863b8:	31000115 	stw	r4,4(r6)
   863bc:	44000315 	stw	r16,12(r8)
   863c0:	1805d0ba 	srai	r2,r3,2
   863c4:	01400044 	movi	r5,1
   863c8:	288a983a 	sll	r5,r5,r2
   863cc:	21404336 	bltu	r4,r5,864dc <_malloc_r+0x304>
   863d0:	2144703a 	and	r2,r4,r5
   863d4:	10000a1e 	bne	r2,zero,86400 <_malloc_r+0x228>
   863d8:	00bfff04 	movi	r2,-4
   863dc:	294b883a 	add	r5,r5,r5
   863e0:	1886703a 	and	r3,r3,r2
   863e4:	2144703a 	and	r2,r4,r5
   863e8:	18c00104 	addi	r3,r3,4
   863ec:	1000041e 	bne	r2,zero,86400 <_malloc_r+0x228>
   863f0:	294b883a 	add	r5,r5,r5
   863f4:	2144703a 	and	r2,r4,r5
   863f8:	18c00104 	addi	r3,r3,4
   863fc:	103ffc26 	beq	r2,zero,863f0 <__alt_data_end+0xfffbd010>
   86400:	023fff04 	movi	r8,-4
   86404:	01c003c4 	movi	r7,15
   86408:	18c5883a 	add	r2,r3,r3
   8640c:	1085883a 	add	r2,r2,r2
   86410:	1085883a 	add	r2,r2,r2
   86414:	9895883a 	add	r10,r19,r2
   86418:	52c00304 	addi	r11,r10,12
   8641c:	1819883a 	mov	r12,r3
   86420:	5c000017 	ldw	r16,0(r11)
   86424:	59bffd04 	addi	r6,r11,-12
   86428:	8180041e 	bne	r16,r6,8643c <_malloc_r+0x264>
   8642c:	0000ce06 	br	86768 <_malloc_r+0x590>
   86430:	2000d70e 	bge	r4,zero,86790 <_malloc_r+0x5b8>
   86434:	84000317 	ldw	r16,12(r16)
   86438:	8180cb26 	beq	r16,r6,86768 <_malloc_r+0x590>
   8643c:	80800117 	ldw	r2,4(r16)
   86440:	1204703a 	and	r2,r2,r8
   86444:	1449c83a 	sub	r4,r2,r17
   86448:	393ff90e 	bge	r7,r4,86430 <__alt_data_end+0xfffbd050>
   8644c:	80800317 	ldw	r2,12(r16)
   86450:	80c00217 	ldw	r3,8(r16)
   86454:	89400054 	ori	r5,r17,1
   86458:	81400115 	stw	r5,4(r16)
   8645c:	18800315 	stw	r2,12(r3)
   86460:	10c00215 	stw	r3,8(r2)
   86464:	8463883a 	add	r17,r16,r17
   86468:	9c400515 	stw	r17,20(r19)
   8646c:	9c400415 	stw	r17,16(r19)
   86470:	20800054 	ori	r2,r4,1
   86474:	88800115 	stw	r2,4(r17)
   86478:	8a400315 	stw	r9,12(r17)
   8647c:	8a400215 	stw	r9,8(r17)
   86480:	8923883a 	add	r17,r17,r4
   86484:	89000015 	stw	r4,0(r17)
   86488:	9009883a 	mov	r4,r18
   8648c:	008defc0 	call	8defc <__malloc_unlock>
   86490:	80800204 	addi	r2,r16,8
   86494:	003f7d06 	br	8628c <__alt_data_end+0xfffbceac>
   86498:	00800304 	movi	r2,12
   8649c:	90800015 	stw	r2,0(r18)
   864a0:	0005883a 	mov	r2,zero
   864a4:	003f7906 	br	8628c <__alt_data_end+0xfffbceac>
   864a8:	01401f84 	movi	r5,126
   864ac:	01c00fc4 	movi	r7,63
   864b0:	003f8d06 	br	862e8 <__alt_data_end+0xfffbcf08>
   864b4:	81000317 	ldw	r4,12(r16)
   864b8:	003f6a06 	br	86264 <__alt_data_end+0xfffbce84>
   864bc:	81c5883a 	add	r2,r16,r7
   864c0:	10c00117 	ldw	r3,4(r2)
   864c4:	9009883a 	mov	r4,r18
   864c8:	18c00054 	ori	r3,r3,1
   864cc:	10c00115 	stw	r3,4(r2)
   864d0:	008defc0 	call	8defc <__malloc_unlock>
   864d4:	80800204 	addi	r2,r16,8
   864d8:	003f6c06 	br	8628c <__alt_data_end+0xfffbceac>
   864dc:	9c000217 	ldw	r16,8(r19)
   864e0:	00bfff04 	movi	r2,-4
   864e4:	85800117 	ldw	r22,4(r16)
   864e8:	b0ac703a 	and	r22,r22,r2
   864ec:	b4400336 	bltu	r22,r17,864fc <_malloc_r+0x324>
   864f0:	b445c83a 	sub	r2,r22,r17
   864f4:	00c003c4 	movi	r3,15
   864f8:	18805d16 	blt	r3,r2,86670 <_malloc_r+0x498>
   864fc:	05c00274 	movhi	r23,9
   86500:	00800274 	movhi	r2,9
   86504:	bdcb4904 	addi	r23,r23,11556
   86508:	10923604 	addi	r2,r2,18648
   8650c:	15400017 	ldw	r21,0(r2)
   86510:	b9000017 	ldw	r4,0(r23)
   86514:	00ffffc4 	movi	r3,-1
   86518:	858d883a 	add	r6,r16,r22
   8651c:	8d6b883a 	add	r21,r17,r21
   86520:	20c0e426 	beq	r4,r3,868b4 <_malloc_r+0x6dc>
   86524:	ad4403c4 	addi	r21,r21,4111
   86528:	00fc0004 	movi	r3,-4096
   8652c:	a8ea703a 	and	r21,r21,r3
   86530:	9009883a 	mov	r4,r18
   86534:	a80b883a 	mov	r5,r21
   86538:	d9800015 	stw	r6,0(sp)
   8653c:	00884580 	call	88458 <_sbrk_r>
   86540:	00ffffc4 	movi	r3,-1
   86544:	1029883a 	mov	r20,r2
   86548:	d9800017 	ldw	r6,0(sp)
   8654c:	10c0a426 	beq	r2,r3,867e0 <_malloc_r+0x608>
   86550:	1180a236 	bltu	r2,r6,867dc <_malloc_r+0x604>
   86554:	070002b4 	movhi	fp,10
   86558:	e7117f04 	addi	fp,fp,17916
   8655c:	e0c00017 	ldw	r3,0(fp)
   86560:	a8c7883a 	add	r3,r21,r3
   86564:	e0c00015 	stw	r3,0(fp)
   86568:	3500da26 	beq	r6,r20,868d4 <_malloc_r+0x6fc>
   8656c:	b9000017 	ldw	r4,0(r23)
   86570:	00bfffc4 	movi	r2,-1
   86574:	2080e426 	beq	r4,r2,86908 <_malloc_r+0x730>
   86578:	a185c83a 	sub	r2,r20,r6
   8657c:	1885883a 	add	r2,r3,r2
   86580:	e0800015 	stw	r2,0(fp)
   86584:	a0c001cc 	andi	r3,r20,7
   86588:	1800b526 	beq	r3,zero,86860 <_malloc_r+0x688>
   8658c:	a0e9c83a 	sub	r20,r20,r3
   86590:	00840204 	movi	r2,4104
   86594:	a5000204 	addi	r20,r20,8
   86598:	10c7c83a 	sub	r3,r2,r3
   8659c:	a545883a 	add	r2,r20,r21
   865a0:	1083ffcc 	andi	r2,r2,4095
   865a4:	18abc83a 	sub	r21,r3,r2
   865a8:	9009883a 	mov	r4,r18
   865ac:	a80b883a 	mov	r5,r21
   865b0:	00884580 	call	88458 <_sbrk_r>
   865b4:	00ffffc4 	movi	r3,-1
   865b8:	10c0d026 	beq	r2,r3,868fc <_malloc_r+0x724>
   865bc:	1507c83a 	sub	r3,r2,r20
   865c0:	a8c7883a 	add	r3,r21,r3
   865c4:	18c00054 	ori	r3,r3,1
   865c8:	e0800017 	ldw	r2,0(fp)
   865cc:	9d000215 	stw	r20,8(r19)
   865d0:	a0c00115 	stw	r3,4(r20)
   865d4:	a887883a 	add	r3,r21,r2
   865d8:	e0c00015 	stw	r3,0(fp)
   865dc:	84c00e26 	beq	r16,r19,86618 <_malloc_r+0x440>
   865e0:	018003c4 	movi	r6,15
   865e4:	3580a02e 	bgeu	r6,r22,86868 <_malloc_r+0x690>
   865e8:	81400117 	ldw	r5,4(r16)
   865ec:	013ffe04 	movi	r4,-8
   865f0:	b0bffd04 	addi	r2,r22,-12
   865f4:	1104703a 	and	r2,r2,r4
   865f8:	2900004c 	andi	r4,r5,1
   865fc:	1108b03a 	or	r4,r2,r4
   86600:	81000115 	stw	r4,4(r16)
   86604:	01400144 	movi	r5,5
   86608:	8089883a 	add	r4,r16,r2
   8660c:	21400115 	stw	r5,4(r4)
   86610:	21400215 	stw	r5,8(r4)
   86614:	3080c036 	bltu	r6,r2,86918 <_malloc_r+0x740>
   86618:	00800274 	movhi	r2,9
   8661c:	10923504 	addi	r2,r2,18644
   86620:	11000017 	ldw	r4,0(r2)
   86624:	20c0012e 	bgeu	r4,r3,8662c <_malloc_r+0x454>
   86628:	10c00015 	stw	r3,0(r2)
   8662c:	00800274 	movhi	r2,9
   86630:	10923404 	addi	r2,r2,18640
   86634:	11000017 	ldw	r4,0(r2)
   86638:	9c000217 	ldw	r16,8(r19)
   8663c:	20c0012e 	bgeu	r4,r3,86644 <_malloc_r+0x46c>
   86640:	10c00015 	stw	r3,0(r2)
   86644:	80c00117 	ldw	r3,4(r16)
   86648:	00bfff04 	movi	r2,-4
   8664c:	1886703a 	and	r3,r3,r2
   86650:	1c45c83a 	sub	r2,r3,r17
   86654:	1c400236 	bltu	r3,r17,86660 <_malloc_r+0x488>
   86658:	00c003c4 	movi	r3,15
   8665c:	18800416 	blt	r3,r2,86670 <_malloc_r+0x498>
   86660:	9009883a 	mov	r4,r18
   86664:	008defc0 	call	8defc <__malloc_unlock>
   86668:	0005883a 	mov	r2,zero
   8666c:	003f0706 	br	8628c <__alt_data_end+0xfffbceac>
   86670:	88c00054 	ori	r3,r17,1
   86674:	80c00115 	stw	r3,4(r16)
   86678:	8463883a 	add	r17,r16,r17
   8667c:	10800054 	ori	r2,r2,1
   86680:	9c400215 	stw	r17,8(r19)
   86684:	88800115 	stw	r2,4(r17)
   86688:	9009883a 	mov	r4,r18
   8668c:	008defc0 	call	8defc <__malloc_unlock>
   86690:	80800204 	addi	r2,r16,8
   86694:	003efd06 	br	8628c <__alt_data_end+0xfffbceac>
   86698:	00800504 	movi	r2,20
   8669c:	10c0482e 	bgeu	r2,r3,867c0 <_malloc_r+0x5e8>
   866a0:	00801504 	movi	r2,84
   866a4:	10c06836 	bltu	r2,r3,86848 <_malloc_r+0x670>
   866a8:	8806d33a 	srli	r3,r17,12
   866ac:	19c01b84 	addi	r7,r3,110
   866b0:	39cb883a 	add	r5,r7,r7
   866b4:	003f0c06 	br	862e8 <__alt_data_end+0xfffbcf08>
   866b8:	3804d27a 	srli	r2,r7,9
   866bc:	01000104 	movi	r4,4
   866c0:	2080422e 	bgeu	r4,r2,867cc <_malloc_r+0x5f4>
   866c4:	01000504 	movi	r4,20
   866c8:	20807c36 	bltu	r4,r2,868bc <_malloc_r+0x6e4>
   866cc:	110016c4 	addi	r4,r2,91
   866d0:	210b883a 	add	r5,r4,r4
   866d4:	294b883a 	add	r5,r5,r5
   866d8:	294b883a 	add	r5,r5,r5
   866dc:	994b883a 	add	r5,r19,r5
   866e0:	28800217 	ldw	r2,8(r5)
   866e4:	02000274 	movhi	r8,9
   866e8:	4205a804 	addi	r8,r8,5792
   866ec:	11406326 	beq	r2,r5,8687c <_malloc_r+0x6a4>
   866f0:	01bfff04 	movi	r6,-4
   866f4:	11000117 	ldw	r4,4(r2)
   866f8:	2188703a 	and	r4,r4,r6
   866fc:	3900022e 	bgeu	r7,r4,86708 <_malloc_r+0x530>
   86700:	10800217 	ldw	r2,8(r2)
   86704:	28bffb1e 	bne	r5,r2,866f4 <__alt_data_end+0xfffbd314>
   86708:	11800317 	ldw	r6,12(r2)
   8670c:	99000117 	ldw	r4,4(r19)
   86710:	81800315 	stw	r6,12(r16)
   86714:	80800215 	stw	r2,8(r16)
   86718:	34000215 	stw	r16,8(r6)
   8671c:	14000315 	stw	r16,12(r2)
   86720:	003f2706 	br	863c0 <__alt_data_end+0xfffbcfe0>
   86724:	88c00054 	ori	r3,r17,1
   86728:	80c00115 	stw	r3,4(r16)
   8672c:	8463883a 	add	r17,r16,r17
   86730:	34400515 	stw	r17,20(r6)
   86734:	34400415 	stw	r17,16(r6)
   86738:	10c00054 	ori	r3,r2,1
   8673c:	8a400315 	stw	r9,12(r17)
   86740:	8a400215 	stw	r9,8(r17)
   86744:	88c00115 	stw	r3,4(r17)
   86748:	88a3883a 	add	r17,r17,r2
   8674c:	88800015 	stw	r2,0(r17)
   86750:	9009883a 	mov	r4,r18
   86754:	008defc0 	call	8defc <__malloc_unlock>
   86758:	80800204 	addi	r2,r16,8
   8675c:	003ecb06 	br	8628c <__alt_data_end+0xfffbceac>
   86760:	31000117 	ldw	r4,4(r6)
   86764:	003f1606 	br	863c0 <__alt_data_end+0xfffbcfe0>
   86768:	63000044 	addi	r12,r12,1
   8676c:	608000cc 	andi	r2,r12,3
   86770:	5ac00204 	addi	r11,r11,8
   86774:	103f2a1e 	bne	r2,zero,86420 <__alt_data_end+0xfffbd040>
   86778:	00002106 	br	86800 <_malloc_r+0x628>
   8677c:	80800204 	addi	r2,r16,8
   86780:	84000517 	ldw	r16,20(r16)
   86784:	143eb31e 	bne	r2,r16,86254 <__alt_data_end+0xfffbce74>
   86788:	18c00084 	addi	r3,r3,2
   8678c:	003eec06 	br	86340 <__alt_data_end+0xfffbcf60>
   86790:	8085883a 	add	r2,r16,r2
   86794:	10c00117 	ldw	r3,4(r2)
   86798:	81000317 	ldw	r4,12(r16)
   8679c:	81400217 	ldw	r5,8(r16)
   867a0:	18c00054 	ori	r3,r3,1
   867a4:	10c00115 	stw	r3,4(r2)
   867a8:	29000315 	stw	r4,12(r5)
   867ac:	21400215 	stw	r5,8(r4)
   867b0:	9009883a 	mov	r4,r18
   867b4:	008defc0 	call	8defc <__malloc_unlock>
   867b8:	80800204 	addi	r2,r16,8
   867bc:	003eb306 	br	8628c <__alt_data_end+0xfffbceac>
   867c0:	19c016c4 	addi	r7,r3,91
   867c4:	39cb883a 	add	r5,r7,r7
   867c8:	003ec706 	br	862e8 <__alt_data_end+0xfffbcf08>
   867cc:	3804d1ba 	srli	r2,r7,6
   867d0:	11000e04 	addi	r4,r2,56
   867d4:	210b883a 	add	r5,r4,r4
   867d8:	003fbe06 	br	866d4 <__alt_data_end+0xfffbd2f4>
   867dc:	84ff5d26 	beq	r16,r19,86554 <__alt_data_end+0xfffbd174>
   867e0:	9c000217 	ldw	r16,8(r19)
   867e4:	00bfff04 	movi	r2,-4
   867e8:	80c00117 	ldw	r3,4(r16)
   867ec:	1886703a 	and	r3,r3,r2
   867f0:	003f9706 	br	86650 <__alt_data_end+0xfffbd270>
   867f4:	52800017 	ldw	r10,0(r10)
   867f8:	18ffffc4 	addi	r3,r3,-1
   867fc:	50805c1e 	bne	r10,r2,86970 <_malloc_r+0x798>
   86800:	190000cc 	andi	r4,r3,3
   86804:	50bffe04 	addi	r2,r10,-8
   86808:	203ffa1e 	bne	r4,zero,867f4 <__alt_data_end+0xfffbd414>
   8680c:	98800117 	ldw	r2,4(r19)
   86810:	0146303a 	nor	r3,zero,r5
   86814:	1884703a 	and	r2,r3,r2
   86818:	98800115 	stw	r2,4(r19)
   8681c:	294b883a 	add	r5,r5,r5
   86820:	117f2e36 	bltu	r2,r5,864dc <__alt_data_end+0xfffbd0fc>
   86824:	283f2d26 	beq	r5,zero,864dc <__alt_data_end+0xfffbd0fc>
   86828:	1146703a 	and	r3,r2,r5
   8682c:	1800521e 	bne	r3,zero,86978 <_malloc_r+0x7a0>
   86830:	6007883a 	mov	r3,r12
   86834:	294b883a 	add	r5,r5,r5
   86838:	1148703a 	and	r4,r2,r5
   8683c:	18c00104 	addi	r3,r3,4
   86840:	203ffc26 	beq	r4,zero,86834 <__alt_data_end+0xfffbd454>
   86844:	003ef006 	br	86408 <__alt_data_end+0xfffbd028>
   86848:	00805504 	movi	r2,340
   8684c:	10c01336 	bltu	r2,r3,8689c <_malloc_r+0x6c4>
   86850:	8806d3fa 	srli	r3,r17,15
   86854:	19c01dc4 	addi	r7,r3,119
   86858:	39cb883a 	add	r5,r7,r7
   8685c:	003ea206 	br	862e8 <__alt_data_end+0xfffbcf08>
   86860:	00c40004 	movi	r3,4096
   86864:	003f4d06 	br	8659c <__alt_data_end+0xfffbd1bc>
   86868:	00800044 	movi	r2,1
   8686c:	a0800115 	stw	r2,4(r20)
   86870:	a021883a 	mov	r16,r20
   86874:	0007883a 	mov	r3,zero
   86878:	003f7506 	br	86650 <__alt_data_end+0xfffbd270>
   8687c:	200bd0ba 	srai	r5,r4,2
   86880:	01800044 	movi	r6,1
   86884:	41000117 	ldw	r4,4(r8)
   86888:	314a983a 	sll	r5,r6,r5
   8688c:	100d883a 	mov	r6,r2
   86890:	2908b03a 	or	r4,r5,r4
   86894:	41000115 	stw	r4,4(r8)
   86898:	003f9d06 	br	86710 <__alt_data_end+0xfffbd330>
   8689c:	00815504 	movi	r2,1364
   868a0:	10c01336 	bltu	r2,r3,868f0 <_malloc_r+0x718>
   868a4:	8806d4ba 	srli	r3,r17,18
   868a8:	19c01f04 	addi	r7,r3,124
   868ac:	39cb883a 	add	r5,r7,r7
   868b0:	003e8d06 	br	862e8 <__alt_data_end+0xfffbcf08>
   868b4:	ad400404 	addi	r21,r21,16
   868b8:	003f1d06 	br	86530 <__alt_data_end+0xfffbd150>
   868bc:	01001504 	movi	r4,84
   868c0:	20801c36 	bltu	r4,r2,86934 <_malloc_r+0x75c>
   868c4:	3804d33a 	srli	r2,r7,12
   868c8:	11001b84 	addi	r4,r2,110
   868cc:	210b883a 	add	r5,r4,r4
   868d0:	003f8006 	br	866d4 <__alt_data_end+0xfffbd2f4>
   868d4:	3083ffcc 	andi	r2,r6,4095
   868d8:	103f241e 	bne	r2,zero,8656c <__alt_data_end+0xfffbd18c>
   868dc:	99000217 	ldw	r4,8(r19)
   868e0:	ad85883a 	add	r2,r21,r22
   868e4:	10800054 	ori	r2,r2,1
   868e8:	20800115 	stw	r2,4(r4)
   868ec:	003f4a06 	br	86618 <__alt_data_end+0xfffbd238>
   868f0:	01403f04 	movi	r5,252
   868f4:	01c01f84 	movi	r7,126
   868f8:	003e7b06 	br	862e8 <__alt_data_end+0xfffbcf08>
   868fc:	00c00044 	movi	r3,1
   86900:	002b883a 	mov	r21,zero
   86904:	003f3006 	br	865c8 <__alt_data_end+0xfffbd1e8>
   86908:	00800274 	movhi	r2,9
   8690c:	108b4904 	addi	r2,r2,11556
   86910:	15000015 	stw	r20,0(r2)
   86914:	003f1b06 	br	86584 <__alt_data_end+0xfffbd1a4>
   86918:	9009883a 	mov	r4,r18
   8691c:	81400204 	addi	r5,r16,8
   86920:	00855fc0 	call	855fc <_free_r>
   86924:	008002b4 	movhi	r2,10
   86928:	10917f04 	addi	r2,r2,17916
   8692c:	10c00017 	ldw	r3,0(r2)
   86930:	003f3906 	br	86618 <__alt_data_end+0xfffbd238>
   86934:	01005504 	movi	r4,340
   86938:	20800436 	bltu	r4,r2,8694c <_malloc_r+0x774>
   8693c:	3804d3fa 	srli	r2,r7,15
   86940:	11001dc4 	addi	r4,r2,119
   86944:	210b883a 	add	r5,r4,r4
   86948:	003f6206 	br	866d4 <__alt_data_end+0xfffbd2f4>
   8694c:	01015504 	movi	r4,1364
   86950:	20800436 	bltu	r4,r2,86964 <_malloc_r+0x78c>
   86954:	3804d4ba 	srli	r2,r7,18
   86958:	11001f04 	addi	r4,r2,124
   8695c:	210b883a 	add	r5,r4,r4
   86960:	003f5c06 	br	866d4 <__alt_data_end+0xfffbd2f4>
   86964:	01403f04 	movi	r5,252
   86968:	01001f84 	movi	r4,126
   8696c:	003f5906 	br	866d4 <__alt_data_end+0xfffbd2f4>
   86970:	98800117 	ldw	r2,4(r19)
   86974:	003fa906 	br	8681c <__alt_data_end+0xfffbd43c>
   86978:	6007883a 	mov	r3,r12
   8697c:	003ea206 	br	86408 <__alt_data_end+0xfffbd028>

00086980 <memchr>:
   86980:	208000cc 	andi	r2,r4,3
   86984:	280f883a 	mov	r7,r5
   86988:	10003526 	beq	r2,zero,86a60 <memchr+0xe0>
   8698c:	30bfffc4 	addi	r2,r6,-1
   86990:	30001b26 	beq	r6,zero,86a00 <memchr+0x80>
   86994:	21800003 	ldbu	r6,0(r4)
   86998:	28c03fcc 	andi	r3,r5,255
   8699c:	30c01a26 	beq	r6,r3,86a08 <memchr+0x88>
   869a0:	180d883a 	mov	r6,r3
   869a4:	00000406 	br	869b8 <memchr+0x38>
   869a8:	10001526 	beq	r2,zero,86a00 <memchr+0x80>
   869ac:	20c00003 	ldbu	r3,0(r4)
   869b0:	10bfffc4 	addi	r2,r2,-1
   869b4:	19801426 	beq	r3,r6,86a08 <memchr+0x88>
   869b8:	21000044 	addi	r4,r4,1
   869bc:	20c000cc 	andi	r3,r4,3
   869c0:	183ff91e 	bne	r3,zero,869a8 <__alt_data_end+0xfffbd5c8>
   869c4:	024000c4 	movi	r9,3
   869c8:	48801136 	bltu	r9,r2,86a10 <memchr+0x90>
   869cc:	10000c26 	beq	r2,zero,86a00 <memchr+0x80>
   869d0:	20c00003 	ldbu	r3,0(r4)
   869d4:	29403fcc 	andi	r5,r5,255
   869d8:	19400b26 	beq	r3,r5,86a08 <memchr+0x88>
   869dc:	20c00044 	addi	r3,r4,1
   869e0:	2085883a 	add	r2,r4,r2
   869e4:	39803fcc 	andi	r6,r7,255
   869e8:	00000306 	br	869f8 <memchr+0x78>
   869ec:	18c00044 	addi	r3,r3,1
   869f0:	197fffc3 	ldbu	r5,-1(r3)
   869f4:	29800426 	beq	r5,r6,86a08 <memchr+0x88>
   869f8:	1809883a 	mov	r4,r3
   869fc:	18bffb1e 	bne	r3,r2,869ec <__alt_data_end+0xfffbd60c>
   86a00:	0005883a 	mov	r2,zero
   86a04:	f800283a 	ret
   86a08:	2005883a 	mov	r2,r4
   86a0c:	f800283a 	ret
   86a10:	28c03fcc 	andi	r3,r5,255
   86a14:	1810923a 	slli	r8,r3,8
   86a18:	02ffbff4 	movhi	r11,65279
   86a1c:	02a02074 	movhi	r10,32897
   86a20:	40c6b03a 	or	r3,r8,r3
   86a24:	1810943a 	slli	r8,r3,16
   86a28:	5affbfc4 	addi	r11,r11,-257
   86a2c:	52a02004 	addi	r10,r10,-32640
   86a30:	40d0b03a 	or	r8,r8,r3
   86a34:	20c00017 	ldw	r3,0(r4)
   86a38:	40c6f03a 	xor	r3,r8,r3
   86a3c:	1acd883a 	add	r6,r3,r11
   86a40:	00c6303a 	nor	r3,zero,r3
   86a44:	30c6703a 	and	r3,r6,r3
   86a48:	1a86703a 	and	r3,r3,r10
   86a4c:	183fdf1e 	bne	r3,zero,869cc <__alt_data_end+0xfffbd5ec>
   86a50:	10bfff04 	addi	r2,r2,-4
   86a54:	21000104 	addi	r4,r4,4
   86a58:	48bff636 	bltu	r9,r2,86a34 <__alt_data_end+0xfffbd654>
   86a5c:	003fdb06 	br	869cc <__alt_data_end+0xfffbd5ec>
   86a60:	3005883a 	mov	r2,r6
   86a64:	003fd706 	br	869c4 <__alt_data_end+0xfffbd5e4>

00086a68 <memcpy>:
   86a68:	deffff04 	addi	sp,sp,-4
   86a6c:	dc000015 	stw	r16,0(sp)
   86a70:	00c003c4 	movi	r3,15
   86a74:	2005883a 	mov	r2,r4
   86a78:	1980432e 	bgeu	r3,r6,86b88 <memcpy+0x120>
   86a7c:	2146b03a 	or	r3,r4,r5
   86a80:	18c000cc 	andi	r3,r3,3
   86a84:	1800421e 	bne	r3,zero,86b90 <memcpy+0x128>
   86a88:	343ffc04 	addi	r16,r6,-16
   86a8c:	8020d13a 	srli	r16,r16,4
   86a90:	28c00104 	addi	r3,r5,4
   86a94:	23400104 	addi	r13,r4,4
   86a98:	801e913a 	slli	r15,r16,4
   86a9c:	2b000204 	addi	r12,r5,8
   86aa0:	22c00204 	addi	r11,r4,8
   86aa4:	7bc00504 	addi	r15,r15,20
   86aa8:	2a800304 	addi	r10,r5,12
   86aac:	22400304 	addi	r9,r4,12
   86ab0:	2bdf883a 	add	r15,r5,r15
   86ab4:	2811883a 	mov	r8,r5
   86ab8:	200f883a 	mov	r7,r4
   86abc:	41000017 	ldw	r4,0(r8)
   86ac0:	39c00404 	addi	r7,r7,16
   86ac4:	18c00404 	addi	r3,r3,16
   86ac8:	393ffc15 	stw	r4,-16(r7)
   86acc:	1bbffc17 	ldw	r14,-16(r3)
   86ad0:	6b400404 	addi	r13,r13,16
   86ad4:	5ac00404 	addi	r11,r11,16
   86ad8:	6bbffc15 	stw	r14,-16(r13)
   86adc:	63800017 	ldw	r14,0(r12)
   86ae0:	4a400404 	addi	r9,r9,16
   86ae4:	42000404 	addi	r8,r8,16
   86ae8:	5bbffc15 	stw	r14,-16(r11)
   86aec:	53800017 	ldw	r14,0(r10)
   86af0:	63000404 	addi	r12,r12,16
   86af4:	52800404 	addi	r10,r10,16
   86af8:	4bbffc15 	stw	r14,-16(r9)
   86afc:	1bffef1e 	bne	r3,r15,86abc <__alt_data_end+0xfffbd6dc>
   86b00:	81c00044 	addi	r7,r16,1
   86b04:	380e913a 	slli	r7,r7,4
   86b08:	310003cc 	andi	r4,r6,15
   86b0c:	02c000c4 	movi	r11,3
   86b10:	11c7883a 	add	r3,r2,r7
   86b14:	29cb883a 	add	r5,r5,r7
   86b18:	59001f2e 	bgeu	r11,r4,86b98 <memcpy+0x130>
   86b1c:	1813883a 	mov	r9,r3
   86b20:	2811883a 	mov	r8,r5
   86b24:	200f883a 	mov	r7,r4
   86b28:	42800017 	ldw	r10,0(r8)
   86b2c:	4a400104 	addi	r9,r9,4
   86b30:	39ffff04 	addi	r7,r7,-4
   86b34:	4abfff15 	stw	r10,-4(r9)
   86b38:	42000104 	addi	r8,r8,4
   86b3c:	59fffa36 	bltu	r11,r7,86b28 <__alt_data_end+0xfffbd748>
   86b40:	213fff04 	addi	r4,r4,-4
   86b44:	2008d0ba 	srli	r4,r4,2
   86b48:	318000cc 	andi	r6,r6,3
   86b4c:	21000044 	addi	r4,r4,1
   86b50:	2109883a 	add	r4,r4,r4
   86b54:	2109883a 	add	r4,r4,r4
   86b58:	1907883a 	add	r3,r3,r4
   86b5c:	290b883a 	add	r5,r5,r4
   86b60:	30000626 	beq	r6,zero,86b7c <memcpy+0x114>
   86b64:	198d883a 	add	r6,r3,r6
   86b68:	29c00003 	ldbu	r7,0(r5)
   86b6c:	18c00044 	addi	r3,r3,1
   86b70:	29400044 	addi	r5,r5,1
   86b74:	19ffffc5 	stb	r7,-1(r3)
   86b78:	19bffb1e 	bne	r3,r6,86b68 <__alt_data_end+0xfffbd788>
   86b7c:	dc000017 	ldw	r16,0(sp)
   86b80:	dec00104 	addi	sp,sp,4
   86b84:	f800283a 	ret
   86b88:	2007883a 	mov	r3,r4
   86b8c:	003ff406 	br	86b60 <__alt_data_end+0xfffbd780>
   86b90:	2007883a 	mov	r3,r4
   86b94:	003ff306 	br	86b64 <__alt_data_end+0xfffbd784>
   86b98:	200d883a 	mov	r6,r4
   86b9c:	003ff006 	br	86b60 <__alt_data_end+0xfffbd780>

00086ba0 <memmove>:
   86ba0:	2005883a 	mov	r2,r4
   86ba4:	29000b2e 	bgeu	r5,r4,86bd4 <memmove+0x34>
   86ba8:	298f883a 	add	r7,r5,r6
   86bac:	21c0092e 	bgeu	r4,r7,86bd4 <memmove+0x34>
   86bb0:	2187883a 	add	r3,r4,r6
   86bb4:	198bc83a 	sub	r5,r3,r6
   86bb8:	30004b26 	beq	r6,zero,86ce8 <memmove+0x148>
   86bbc:	39ffffc4 	addi	r7,r7,-1
   86bc0:	39000003 	ldbu	r4,0(r7)
   86bc4:	18ffffc4 	addi	r3,r3,-1
   86bc8:	19000005 	stb	r4,0(r3)
   86bcc:	197ffb1e 	bne	r3,r5,86bbc <__alt_data_end+0xfffbd7dc>
   86bd0:	f800283a 	ret
   86bd4:	00c003c4 	movi	r3,15
   86bd8:	1980412e 	bgeu	r3,r6,86ce0 <memmove+0x140>
   86bdc:	1146b03a 	or	r3,r2,r5
   86be0:	18c000cc 	andi	r3,r3,3
   86be4:	1800411e 	bne	r3,zero,86cec <memmove+0x14c>
   86be8:	33fffc04 	addi	r15,r6,-16
   86bec:	781ed13a 	srli	r15,r15,4
   86bf0:	28c00104 	addi	r3,r5,4
   86bf4:	13400104 	addi	r13,r2,4
   86bf8:	781c913a 	slli	r14,r15,4
   86bfc:	2b000204 	addi	r12,r5,8
   86c00:	12c00204 	addi	r11,r2,8
   86c04:	73800504 	addi	r14,r14,20
   86c08:	2a800304 	addi	r10,r5,12
   86c0c:	12400304 	addi	r9,r2,12
   86c10:	2b9d883a 	add	r14,r5,r14
   86c14:	2811883a 	mov	r8,r5
   86c18:	100f883a 	mov	r7,r2
   86c1c:	41000017 	ldw	r4,0(r8)
   86c20:	39c00404 	addi	r7,r7,16
   86c24:	18c00404 	addi	r3,r3,16
   86c28:	393ffc15 	stw	r4,-16(r7)
   86c2c:	193ffc17 	ldw	r4,-16(r3)
   86c30:	6b400404 	addi	r13,r13,16
   86c34:	5ac00404 	addi	r11,r11,16
   86c38:	693ffc15 	stw	r4,-16(r13)
   86c3c:	61000017 	ldw	r4,0(r12)
   86c40:	4a400404 	addi	r9,r9,16
   86c44:	42000404 	addi	r8,r8,16
   86c48:	593ffc15 	stw	r4,-16(r11)
   86c4c:	51000017 	ldw	r4,0(r10)
   86c50:	63000404 	addi	r12,r12,16
   86c54:	52800404 	addi	r10,r10,16
   86c58:	493ffc15 	stw	r4,-16(r9)
   86c5c:	1bbfef1e 	bne	r3,r14,86c1c <__alt_data_end+0xfffbd83c>
   86c60:	79000044 	addi	r4,r15,1
   86c64:	2008913a 	slli	r4,r4,4
   86c68:	328003cc 	andi	r10,r6,15
   86c6c:	02c000c4 	movi	r11,3
   86c70:	1107883a 	add	r3,r2,r4
   86c74:	290b883a 	add	r5,r5,r4
   86c78:	5a801e2e 	bgeu	r11,r10,86cf4 <memmove+0x154>
   86c7c:	1813883a 	mov	r9,r3
   86c80:	2811883a 	mov	r8,r5
   86c84:	500f883a 	mov	r7,r10
   86c88:	41000017 	ldw	r4,0(r8)
   86c8c:	4a400104 	addi	r9,r9,4
   86c90:	39ffff04 	addi	r7,r7,-4
   86c94:	493fff15 	stw	r4,-4(r9)
   86c98:	42000104 	addi	r8,r8,4
   86c9c:	59fffa36 	bltu	r11,r7,86c88 <__alt_data_end+0xfffbd8a8>
   86ca0:	513fff04 	addi	r4,r10,-4
   86ca4:	2008d0ba 	srli	r4,r4,2
   86ca8:	318000cc 	andi	r6,r6,3
   86cac:	21000044 	addi	r4,r4,1
   86cb0:	2109883a 	add	r4,r4,r4
   86cb4:	2109883a 	add	r4,r4,r4
   86cb8:	1907883a 	add	r3,r3,r4
   86cbc:	290b883a 	add	r5,r5,r4
   86cc0:	30000926 	beq	r6,zero,86ce8 <memmove+0x148>
   86cc4:	198d883a 	add	r6,r3,r6
   86cc8:	29c00003 	ldbu	r7,0(r5)
   86ccc:	18c00044 	addi	r3,r3,1
   86cd0:	29400044 	addi	r5,r5,1
   86cd4:	19ffffc5 	stb	r7,-1(r3)
   86cd8:	19bffb1e 	bne	r3,r6,86cc8 <__alt_data_end+0xfffbd8e8>
   86cdc:	f800283a 	ret
   86ce0:	1007883a 	mov	r3,r2
   86ce4:	003ff606 	br	86cc0 <__alt_data_end+0xfffbd8e0>
   86ce8:	f800283a 	ret
   86cec:	1007883a 	mov	r3,r2
   86cf0:	003ff406 	br	86cc4 <__alt_data_end+0xfffbd8e4>
   86cf4:	500d883a 	mov	r6,r10
   86cf8:	003ff106 	br	86cc0 <__alt_data_end+0xfffbd8e0>

00086cfc <memset>:
   86cfc:	20c000cc 	andi	r3,r4,3
   86d00:	2005883a 	mov	r2,r4
   86d04:	18004326 	beq	r3,zero,86e14 <memset+0x118>
   86d08:	31ffffc4 	addi	r7,r6,-1
   86d0c:	30004026 	beq	r6,zero,86e10 <memset+0x114>
   86d10:	2813883a 	mov	r9,r5
   86d14:	200d883a 	mov	r6,r4
   86d18:	2007883a 	mov	r3,r4
   86d1c:	00000406 	br	86d30 <memset+0x34>
   86d20:	3a3fffc4 	addi	r8,r7,-1
   86d24:	31800044 	addi	r6,r6,1
   86d28:	38003926 	beq	r7,zero,86e10 <memset+0x114>
   86d2c:	400f883a 	mov	r7,r8
   86d30:	18c00044 	addi	r3,r3,1
   86d34:	32400005 	stb	r9,0(r6)
   86d38:	1a0000cc 	andi	r8,r3,3
   86d3c:	403ff81e 	bne	r8,zero,86d20 <__alt_data_end+0xfffbd940>
   86d40:	010000c4 	movi	r4,3
   86d44:	21c02d2e 	bgeu	r4,r7,86dfc <memset+0x100>
   86d48:	29803fcc 	andi	r6,r5,255
   86d4c:	3008923a 	slli	r4,r6,8
   86d50:	218cb03a 	or	r6,r4,r6
   86d54:	3008943a 	slli	r4,r6,16
   86d58:	218cb03a 	or	r6,r4,r6
   86d5c:	010003c4 	movi	r4,15
   86d60:	21c0182e 	bgeu	r4,r7,86dc4 <memset+0xc8>
   86d64:	3b3ffc04 	addi	r12,r7,-16
   86d68:	6018d13a 	srli	r12,r12,4
   86d6c:	1a000104 	addi	r8,r3,4
   86d70:	1ac00204 	addi	r11,r3,8
   86d74:	6008913a 	slli	r4,r12,4
   86d78:	1a800304 	addi	r10,r3,12
   86d7c:	1813883a 	mov	r9,r3
   86d80:	21000504 	addi	r4,r4,20
   86d84:	1909883a 	add	r4,r3,r4
   86d88:	49800015 	stw	r6,0(r9)
   86d8c:	41800015 	stw	r6,0(r8)
   86d90:	59800015 	stw	r6,0(r11)
   86d94:	51800015 	stw	r6,0(r10)
   86d98:	42000404 	addi	r8,r8,16
   86d9c:	4a400404 	addi	r9,r9,16
   86da0:	5ac00404 	addi	r11,r11,16
   86da4:	52800404 	addi	r10,r10,16
   86da8:	413ff71e 	bne	r8,r4,86d88 <__alt_data_end+0xfffbd9a8>
   86dac:	63000044 	addi	r12,r12,1
   86db0:	6018913a 	slli	r12,r12,4
   86db4:	39c003cc 	andi	r7,r7,15
   86db8:	010000c4 	movi	r4,3
   86dbc:	1b07883a 	add	r3,r3,r12
   86dc0:	21c00e2e 	bgeu	r4,r7,86dfc <memset+0x100>
   86dc4:	1813883a 	mov	r9,r3
   86dc8:	3811883a 	mov	r8,r7
   86dcc:	010000c4 	movi	r4,3
   86dd0:	49800015 	stw	r6,0(r9)
   86dd4:	423fff04 	addi	r8,r8,-4
   86dd8:	4a400104 	addi	r9,r9,4
   86ddc:	223ffc36 	bltu	r4,r8,86dd0 <__alt_data_end+0xfffbd9f0>
   86de0:	393fff04 	addi	r4,r7,-4
   86de4:	2008d0ba 	srli	r4,r4,2
   86de8:	39c000cc 	andi	r7,r7,3
   86dec:	21000044 	addi	r4,r4,1
   86df0:	2109883a 	add	r4,r4,r4
   86df4:	2109883a 	add	r4,r4,r4
   86df8:	1907883a 	add	r3,r3,r4
   86dfc:	38000426 	beq	r7,zero,86e10 <memset+0x114>
   86e00:	19cf883a 	add	r7,r3,r7
   86e04:	19400005 	stb	r5,0(r3)
   86e08:	18c00044 	addi	r3,r3,1
   86e0c:	19fffd1e 	bne	r3,r7,86e04 <__alt_data_end+0xfffbda24>
   86e10:	f800283a 	ret
   86e14:	2007883a 	mov	r3,r4
   86e18:	300f883a 	mov	r7,r6
   86e1c:	003fc806 	br	86d40 <__alt_data_end+0xfffbd960>

00086e20 <_Balloc>:
   86e20:	20801317 	ldw	r2,76(r4)
   86e24:	defffc04 	addi	sp,sp,-16
   86e28:	dc400115 	stw	r17,4(sp)
   86e2c:	dc000015 	stw	r16,0(sp)
   86e30:	dfc00315 	stw	ra,12(sp)
   86e34:	dc800215 	stw	r18,8(sp)
   86e38:	2023883a 	mov	r17,r4
   86e3c:	2821883a 	mov	r16,r5
   86e40:	10000f26 	beq	r2,zero,86e80 <_Balloc+0x60>
   86e44:	8407883a 	add	r3,r16,r16
   86e48:	18c7883a 	add	r3,r3,r3
   86e4c:	10c7883a 	add	r3,r2,r3
   86e50:	18800017 	ldw	r2,0(r3)
   86e54:	10001126 	beq	r2,zero,86e9c <_Balloc+0x7c>
   86e58:	11000017 	ldw	r4,0(r2)
   86e5c:	19000015 	stw	r4,0(r3)
   86e60:	10000415 	stw	zero,16(r2)
   86e64:	10000315 	stw	zero,12(r2)
   86e68:	dfc00317 	ldw	ra,12(sp)
   86e6c:	dc800217 	ldw	r18,8(sp)
   86e70:	dc400117 	ldw	r17,4(sp)
   86e74:	dc000017 	ldw	r16,0(sp)
   86e78:	dec00404 	addi	sp,sp,16
   86e7c:	f800283a 	ret
   86e80:	01400104 	movi	r5,4
   86e84:	01800844 	movi	r6,33
   86e88:	0089c200 	call	89c20 <_calloc_r>
   86e8c:	88801315 	stw	r2,76(r17)
   86e90:	103fec1e 	bne	r2,zero,86e44 <__alt_data_end+0xfffbda64>
   86e94:	0005883a 	mov	r2,zero
   86e98:	003ff306 	br	86e68 <__alt_data_end+0xfffbda88>
   86e9c:	01400044 	movi	r5,1
   86ea0:	2c24983a 	sll	r18,r5,r16
   86ea4:	8809883a 	mov	r4,r17
   86ea8:	91800144 	addi	r6,r18,5
   86eac:	318d883a 	add	r6,r6,r6
   86eb0:	318d883a 	add	r6,r6,r6
   86eb4:	0089c200 	call	89c20 <_calloc_r>
   86eb8:	103ff626 	beq	r2,zero,86e94 <__alt_data_end+0xfffbdab4>
   86ebc:	14000115 	stw	r16,4(r2)
   86ec0:	14800215 	stw	r18,8(r2)
   86ec4:	003fe606 	br	86e60 <__alt_data_end+0xfffbda80>

00086ec8 <_Bfree>:
   86ec8:	28000826 	beq	r5,zero,86eec <_Bfree+0x24>
   86ecc:	28c00117 	ldw	r3,4(r5)
   86ed0:	20801317 	ldw	r2,76(r4)
   86ed4:	18c7883a 	add	r3,r3,r3
   86ed8:	18c7883a 	add	r3,r3,r3
   86edc:	10c5883a 	add	r2,r2,r3
   86ee0:	10c00017 	ldw	r3,0(r2)
   86ee4:	28c00015 	stw	r3,0(r5)
   86ee8:	11400015 	stw	r5,0(r2)
   86eec:	f800283a 	ret

00086ef0 <__multadd>:
   86ef0:	defff704 	addi	sp,sp,-36
   86ef4:	dc800215 	stw	r18,8(sp)
   86ef8:	2c800417 	ldw	r18,16(r5)
   86efc:	ddc00715 	stw	r23,28(sp)
   86f00:	dd800615 	stw	r22,24(sp)
   86f04:	dd000415 	stw	r20,16(sp)
   86f08:	dcc00315 	stw	r19,12(sp)
   86f0c:	dc400115 	stw	r17,4(sp)
   86f10:	dc000015 	stw	r16,0(sp)
   86f14:	dfc00815 	stw	ra,32(sp)
   86f18:	dd400515 	stw	r21,20(sp)
   86f1c:	2827883a 	mov	r19,r5
   86f20:	2029883a 	mov	r20,r4
   86f24:	3023883a 	mov	r17,r6
   86f28:	3821883a 	mov	r16,r7
   86f2c:	2d800504 	addi	r22,r5,20
   86f30:	002f883a 	mov	r23,zero
   86f34:	b5400017 	ldw	r21,0(r22)
   86f38:	880b883a 	mov	r5,r17
   86f3c:	bdc00044 	addi	r23,r23,1
   86f40:	a93fffcc 	andi	r4,r21,65535
   86f44:	008b0d80 	call	8b0d8 <__mulsi3>
   86f48:	1421883a 	add	r16,r2,r16
   86f4c:	a808d43a 	srli	r4,r21,16
   86f50:	802ad43a 	srli	r21,r16,16
   86f54:	880b883a 	mov	r5,r17
   86f58:	008b0d80 	call	8b0d8 <__mulsi3>
   86f5c:	a88f883a 	add	r7,r21,r2
   86f60:	3804943a 	slli	r2,r7,16
   86f64:	80ffffcc 	andi	r3,r16,65535
   86f68:	b5800104 	addi	r22,r22,4
   86f6c:	10c7883a 	add	r3,r2,r3
   86f70:	b0ffff15 	stw	r3,-4(r22)
   86f74:	3820d43a 	srli	r16,r7,16
   86f78:	bcbfee16 	blt	r23,r18,86f34 <__alt_data_end+0xfffbdb54>
   86f7c:	80000926 	beq	r16,zero,86fa4 <__multadd+0xb4>
   86f80:	98800217 	ldw	r2,8(r19)
   86f84:	9080130e 	bge	r18,r2,86fd4 <__multadd+0xe4>
   86f88:	90800144 	addi	r2,r18,5
   86f8c:	1085883a 	add	r2,r2,r2
   86f90:	1085883a 	add	r2,r2,r2
   86f94:	9885883a 	add	r2,r19,r2
   86f98:	14000015 	stw	r16,0(r2)
   86f9c:	94800044 	addi	r18,r18,1
   86fa0:	9c800415 	stw	r18,16(r19)
   86fa4:	9805883a 	mov	r2,r19
   86fa8:	dfc00817 	ldw	ra,32(sp)
   86fac:	ddc00717 	ldw	r23,28(sp)
   86fb0:	dd800617 	ldw	r22,24(sp)
   86fb4:	dd400517 	ldw	r21,20(sp)
   86fb8:	dd000417 	ldw	r20,16(sp)
   86fbc:	dcc00317 	ldw	r19,12(sp)
   86fc0:	dc800217 	ldw	r18,8(sp)
   86fc4:	dc400117 	ldw	r17,4(sp)
   86fc8:	dc000017 	ldw	r16,0(sp)
   86fcc:	dec00904 	addi	sp,sp,36
   86fd0:	f800283a 	ret
   86fd4:	99400117 	ldw	r5,4(r19)
   86fd8:	a009883a 	mov	r4,r20
   86fdc:	29400044 	addi	r5,r5,1
   86fe0:	0086e200 	call	86e20 <_Balloc>
   86fe4:	99800417 	ldw	r6,16(r19)
   86fe8:	11000304 	addi	r4,r2,12
   86fec:	99400304 	addi	r5,r19,12
   86ff0:	31800084 	addi	r6,r6,2
   86ff4:	318d883a 	add	r6,r6,r6
   86ff8:	318d883a 	add	r6,r6,r6
   86ffc:	1023883a 	mov	r17,r2
   87000:	0086a680 	call	86a68 <memcpy>
   87004:	98000a26 	beq	r19,zero,87030 <__multadd+0x140>
   87008:	99000117 	ldw	r4,4(r19)
   8700c:	a0c01317 	ldw	r3,76(r20)
   87010:	2109883a 	add	r4,r4,r4
   87014:	2109883a 	add	r4,r4,r4
   87018:	1907883a 	add	r3,r3,r4
   8701c:	18800017 	ldw	r2,0(r3)
   87020:	98800015 	stw	r2,0(r19)
   87024:	1cc00015 	stw	r19,0(r3)
   87028:	8827883a 	mov	r19,r17
   8702c:	003fd606 	br	86f88 <__alt_data_end+0xfffbdba8>
   87030:	8827883a 	mov	r19,r17
   87034:	003fd406 	br	86f88 <__alt_data_end+0xfffbdba8>

00087038 <__s2b>:
   87038:	defff904 	addi	sp,sp,-28
   8703c:	dc400115 	stw	r17,4(sp)
   87040:	dc000015 	stw	r16,0(sp)
   87044:	2023883a 	mov	r17,r4
   87048:	2821883a 	mov	r16,r5
   8704c:	39000204 	addi	r4,r7,8
   87050:	01400244 	movi	r5,9
   87054:	dcc00315 	stw	r19,12(sp)
   87058:	dc800215 	stw	r18,8(sp)
   8705c:	dfc00615 	stw	ra,24(sp)
   87060:	dd400515 	stw	r21,20(sp)
   87064:	dd000415 	stw	r20,16(sp)
   87068:	3825883a 	mov	r18,r7
   8706c:	3027883a 	mov	r19,r6
   87070:	008103c0 	call	8103c <__divsi3>
   87074:	00c00044 	movi	r3,1
   87078:	000b883a 	mov	r5,zero
   8707c:	1880030e 	bge	r3,r2,8708c <__s2b+0x54>
   87080:	18c7883a 	add	r3,r3,r3
   87084:	29400044 	addi	r5,r5,1
   87088:	18bffd16 	blt	r3,r2,87080 <__alt_data_end+0xfffbdca0>
   8708c:	8809883a 	mov	r4,r17
   87090:	0086e200 	call	86e20 <_Balloc>
   87094:	d8c00717 	ldw	r3,28(sp)
   87098:	10c00515 	stw	r3,20(r2)
   8709c:	00c00044 	movi	r3,1
   870a0:	10c00415 	stw	r3,16(r2)
   870a4:	00c00244 	movi	r3,9
   870a8:	1cc0210e 	bge	r3,r19,87130 <__s2b+0xf8>
   870ac:	80eb883a 	add	r21,r16,r3
   870b0:	a829883a 	mov	r20,r21
   870b4:	84e1883a 	add	r16,r16,r19
   870b8:	a1c00007 	ldb	r7,0(r20)
   870bc:	8809883a 	mov	r4,r17
   870c0:	a5000044 	addi	r20,r20,1
   870c4:	100b883a 	mov	r5,r2
   870c8:	01800284 	movi	r6,10
   870cc:	39fff404 	addi	r7,r7,-48
   870d0:	0086ef00 	call	86ef0 <__multadd>
   870d4:	a43ff81e 	bne	r20,r16,870b8 <__alt_data_end+0xfffbdcd8>
   870d8:	ace1883a 	add	r16,r21,r19
   870dc:	843ffe04 	addi	r16,r16,-8
   870e0:	9c800a0e 	bge	r19,r18,8710c <__s2b+0xd4>
   870e4:	94e5c83a 	sub	r18,r18,r19
   870e8:	84a5883a 	add	r18,r16,r18
   870ec:	81c00007 	ldb	r7,0(r16)
   870f0:	8809883a 	mov	r4,r17
   870f4:	84000044 	addi	r16,r16,1
   870f8:	100b883a 	mov	r5,r2
   870fc:	01800284 	movi	r6,10
   87100:	39fff404 	addi	r7,r7,-48
   87104:	0086ef00 	call	86ef0 <__multadd>
   87108:	84bff81e 	bne	r16,r18,870ec <__alt_data_end+0xfffbdd0c>
   8710c:	dfc00617 	ldw	ra,24(sp)
   87110:	dd400517 	ldw	r21,20(sp)
   87114:	dd000417 	ldw	r20,16(sp)
   87118:	dcc00317 	ldw	r19,12(sp)
   8711c:	dc800217 	ldw	r18,8(sp)
   87120:	dc400117 	ldw	r17,4(sp)
   87124:	dc000017 	ldw	r16,0(sp)
   87128:	dec00704 	addi	sp,sp,28
   8712c:	f800283a 	ret
   87130:	84000284 	addi	r16,r16,10
   87134:	1827883a 	mov	r19,r3
   87138:	003fe906 	br	870e0 <__alt_data_end+0xfffbdd00>

0008713c <__hi0bits>:
   8713c:	20bfffec 	andhi	r2,r4,65535
   87140:	1000141e 	bne	r2,zero,87194 <__hi0bits+0x58>
   87144:	2008943a 	slli	r4,r4,16
   87148:	00800404 	movi	r2,16
   8714c:	20ffc02c 	andhi	r3,r4,65280
   87150:	1800021e 	bne	r3,zero,8715c <__hi0bits+0x20>
   87154:	2008923a 	slli	r4,r4,8
   87158:	10800204 	addi	r2,r2,8
   8715c:	20fc002c 	andhi	r3,r4,61440
   87160:	1800021e 	bne	r3,zero,8716c <__hi0bits+0x30>
   87164:	2008913a 	slli	r4,r4,4
   87168:	10800104 	addi	r2,r2,4
   8716c:	20f0002c 	andhi	r3,r4,49152
   87170:	1800031e 	bne	r3,zero,87180 <__hi0bits+0x44>
   87174:	2109883a 	add	r4,r4,r4
   87178:	10800084 	addi	r2,r2,2
   8717c:	2109883a 	add	r4,r4,r4
   87180:	20000316 	blt	r4,zero,87190 <__hi0bits+0x54>
   87184:	2110002c 	andhi	r4,r4,16384
   87188:	2000041e 	bne	r4,zero,8719c <__hi0bits+0x60>
   8718c:	00800804 	movi	r2,32
   87190:	f800283a 	ret
   87194:	0005883a 	mov	r2,zero
   87198:	003fec06 	br	8714c <__alt_data_end+0xfffbdd6c>
   8719c:	10800044 	addi	r2,r2,1
   871a0:	f800283a 	ret

000871a4 <__lo0bits>:
   871a4:	20c00017 	ldw	r3,0(r4)
   871a8:	188001cc 	andi	r2,r3,7
   871ac:	10000826 	beq	r2,zero,871d0 <__lo0bits+0x2c>
   871b0:	1880004c 	andi	r2,r3,1
   871b4:	1000211e 	bne	r2,zero,8723c <__lo0bits+0x98>
   871b8:	1880008c 	andi	r2,r3,2
   871bc:	1000211e 	bne	r2,zero,87244 <__lo0bits+0xa0>
   871c0:	1806d0ba 	srli	r3,r3,2
   871c4:	00800084 	movi	r2,2
   871c8:	20c00015 	stw	r3,0(r4)
   871cc:	f800283a 	ret
   871d0:	18bfffcc 	andi	r2,r3,65535
   871d4:	10001326 	beq	r2,zero,87224 <__lo0bits+0x80>
   871d8:	0005883a 	mov	r2,zero
   871dc:	19403fcc 	andi	r5,r3,255
   871e0:	2800021e 	bne	r5,zero,871ec <__lo0bits+0x48>
   871e4:	1806d23a 	srli	r3,r3,8
   871e8:	10800204 	addi	r2,r2,8
   871ec:	194003cc 	andi	r5,r3,15
   871f0:	2800021e 	bne	r5,zero,871fc <__lo0bits+0x58>
   871f4:	1806d13a 	srli	r3,r3,4
   871f8:	10800104 	addi	r2,r2,4
   871fc:	194000cc 	andi	r5,r3,3
   87200:	2800021e 	bne	r5,zero,8720c <__lo0bits+0x68>
   87204:	1806d0ba 	srli	r3,r3,2
   87208:	10800084 	addi	r2,r2,2
   8720c:	1940004c 	andi	r5,r3,1
   87210:	2800081e 	bne	r5,zero,87234 <__lo0bits+0x90>
   87214:	1806d07a 	srli	r3,r3,1
   87218:	1800051e 	bne	r3,zero,87230 <__lo0bits+0x8c>
   8721c:	00800804 	movi	r2,32
   87220:	f800283a 	ret
   87224:	1806d43a 	srli	r3,r3,16
   87228:	00800404 	movi	r2,16
   8722c:	003feb06 	br	871dc <__alt_data_end+0xfffbddfc>
   87230:	10800044 	addi	r2,r2,1
   87234:	20c00015 	stw	r3,0(r4)
   87238:	f800283a 	ret
   8723c:	0005883a 	mov	r2,zero
   87240:	f800283a 	ret
   87244:	1806d07a 	srli	r3,r3,1
   87248:	00800044 	movi	r2,1
   8724c:	20c00015 	stw	r3,0(r4)
   87250:	f800283a 	ret

00087254 <__i2b>:
   87254:	defffd04 	addi	sp,sp,-12
   87258:	dc000015 	stw	r16,0(sp)
   8725c:	04000044 	movi	r16,1
   87260:	dc400115 	stw	r17,4(sp)
   87264:	2823883a 	mov	r17,r5
   87268:	800b883a 	mov	r5,r16
   8726c:	dfc00215 	stw	ra,8(sp)
   87270:	0086e200 	call	86e20 <_Balloc>
   87274:	14400515 	stw	r17,20(r2)
   87278:	14000415 	stw	r16,16(r2)
   8727c:	dfc00217 	ldw	ra,8(sp)
   87280:	dc400117 	ldw	r17,4(sp)
   87284:	dc000017 	ldw	r16,0(sp)
   87288:	dec00304 	addi	sp,sp,12
   8728c:	f800283a 	ret

00087290 <__multiply>:
   87290:	deffef04 	addi	sp,sp,-68
   87294:	dc400815 	stw	r17,32(sp)
   87298:	dc000715 	stw	r16,28(sp)
   8729c:	2c400417 	ldw	r17,16(r5)
   872a0:	34000417 	ldw	r16,16(r6)
   872a4:	dd800d15 	stw	r22,52(sp)
   872a8:	dc800915 	stw	r18,36(sp)
   872ac:	dfc01015 	stw	ra,64(sp)
   872b0:	df000f15 	stw	fp,60(sp)
   872b4:	ddc00e15 	stw	r23,56(sp)
   872b8:	dd400c15 	stw	r21,48(sp)
   872bc:	dd000b15 	stw	r20,44(sp)
   872c0:	dcc00a15 	stw	r19,40(sp)
   872c4:	2825883a 	mov	r18,r5
   872c8:	302d883a 	mov	r22,r6
   872cc:	8c009116 	blt	r17,r16,87514 <__multiply+0x284>
   872d0:	8005883a 	mov	r2,r16
   872d4:	8821883a 	mov	r16,r17
   872d8:	1023883a 	mov	r17,r2
   872dc:	90800217 	ldw	r2,8(r18)
   872e0:	8447883a 	add	r3,r16,r17
   872e4:	d8c00215 	stw	r3,8(sp)
   872e8:	91400117 	ldw	r5,4(r18)
   872ec:	10c0010e 	bge	r2,r3,872f4 <__multiply+0x64>
   872f0:	29400044 	addi	r5,r5,1
   872f4:	0086e200 	call	86e20 <_Balloc>
   872f8:	d8c00217 	ldw	r3,8(sp)
   872fc:	d8800615 	stw	r2,24(sp)
   87300:	18eb883a 	add	r21,r3,r3
   87304:	ad6b883a 	add	r21,r21,r21
   87308:	10c00504 	addi	r3,r2,20
   8730c:	1d6b883a 	add	r21,r3,r21
   87310:	d8c00115 	stw	r3,4(sp)
   87314:	dd400315 	stw	r21,12(sp)
   87318:	1805883a 	mov	r2,r3
   8731c:	1d40042e 	bgeu	r3,r21,87330 <__multiply+0xa0>
   87320:	d8c00317 	ldw	r3,12(sp)
   87324:	10000015 	stw	zero,0(r2)
   87328:	10800104 	addi	r2,r2,4
   8732c:	10fffc36 	bltu	r2,r3,87320 <__alt_data_end+0xfffbdf40>
   87330:	8c63883a 	add	r17,r17,r17
   87334:	b5800504 	addi	r22,r22,20
   87338:	8c63883a 	add	r17,r17,r17
   8733c:	94800504 	addi	r18,r18,20
   87340:	8421883a 	add	r16,r16,r16
   87344:	b463883a 	add	r17,r22,r17
   87348:	8421883a 	add	r16,r16,r16
   8734c:	dd800015 	stw	r22,0(sp)
   87350:	dc800415 	stw	r18,16(sp)
   87354:	dc400515 	stw	r17,20(sp)
   87358:	9429883a 	add	r20,r18,r16
   8735c:	b4404f2e 	bgeu	r22,r17,8749c <__multiply+0x20c>
   87360:	d8c00017 	ldw	r3,0(sp)
   87364:	1c800017 	ldw	r18,0(r3)
   87368:	943fffcc 	andi	r16,r18,65535
   8736c:	80001e26 	beq	r16,zero,873e8 <__multiply+0x158>
   87370:	dd800117 	ldw	r22,4(sp)
   87374:	dd400417 	ldw	r21,16(sp)
   87378:	0025883a 	mov	r18,zero
   8737c:	adc00017 	ldw	r23,0(r21)
   87380:	b4c00017 	ldw	r19,0(r22)
   87384:	800b883a 	mov	r5,r16
   87388:	b93fffcc 	andi	r4,r23,65535
   8738c:	008b0d80 	call	8b0d8 <__mulsi3>
   87390:	9c7fffcc 	andi	r17,r19,65535
   87394:	8885883a 	add	r2,r17,r2
   87398:	b808d43a 	srli	r4,r23,16
   8739c:	14a3883a 	add	r17,r2,r18
   873a0:	9826d43a 	srli	r19,r19,16
   873a4:	8824d43a 	srli	r18,r17,16
   873a8:	800b883a 	mov	r5,r16
   873ac:	008b0d80 	call	8b0d8 <__mulsi3>
   873b0:	9885883a 	add	r2,r19,r2
   873b4:	14a7883a 	add	r19,r2,r18
   873b8:	88ffffcc 	andi	r3,r17,65535
   873bc:	9822943a 	slli	r17,r19,16
   873c0:	ad400104 	addi	r21,r21,4
   873c4:	b005883a 	mov	r2,r22
   873c8:	88c6b03a 	or	r3,r17,r3
   873cc:	b0c00015 	stw	r3,0(r22)
   873d0:	9824d43a 	srli	r18,r19,16
   873d4:	b5800104 	addi	r22,r22,4
   873d8:	ad3fe836 	bltu	r21,r20,8737c <__alt_data_end+0xfffbdf9c>
   873dc:	d8c00017 	ldw	r3,0(sp)
   873e0:	14800115 	stw	r18,4(r2)
   873e4:	1c800017 	ldw	r18,0(r3)
   873e8:	9024d43a 	srli	r18,r18,16
   873ec:	90002226 	beq	r18,zero,87478 <__multiply+0x1e8>
   873f0:	d8c00117 	ldw	r3,4(sp)
   873f4:	dd800417 	ldw	r22,16(sp)
   873f8:	002f883a 	mov	r23,zero
   873fc:	1f000017 	ldw	fp,0(r3)
   87400:	1823883a 	mov	r17,r3
   87404:	182b883a 	mov	r21,r3
   87408:	e021883a 	mov	r16,fp
   8740c:	00000106 	br	87414 <__multiply+0x184>
   87410:	982b883a 	mov	r21,r19
   87414:	b100000b 	ldhu	r4,0(r22)
   87418:	8020d43a 	srli	r16,r16,16
   8741c:	900b883a 	mov	r5,r18
   87420:	008b0d80 	call	8b0d8 <__mulsi3>
   87424:	1405883a 	add	r2,r2,r16
   87428:	15ef883a 	add	r23,r2,r23
   8742c:	b804943a 	slli	r2,r23,16
   87430:	e0ffffcc 	andi	r3,fp,65535
   87434:	8c400104 	addi	r17,r17,4
   87438:	10c6b03a 	or	r3,r2,r3
   8743c:	88ffff15 	stw	r3,-4(r17)
   87440:	b5800104 	addi	r22,r22,4
   87444:	b13fff17 	ldw	r4,-4(r22)
   87448:	acc00104 	addi	r19,r21,4
   8744c:	900b883a 	mov	r5,r18
   87450:	2008d43a 	srli	r4,r4,16
   87454:	9c000017 	ldw	r16,0(r19)
   87458:	008b0d80 	call	8b0d8 <__mulsi3>
   8745c:	b806d43a 	srli	r3,r23,16
   87460:	813fffcc 	andi	r4,r16,65535
   87464:	1105883a 	add	r2,r2,r4
   87468:	10f9883a 	add	fp,r2,r3
   8746c:	e02ed43a 	srli	r23,fp,16
   87470:	b53fe736 	bltu	r22,r20,87410 <__alt_data_end+0xfffbe030>
   87474:	af000115 	stw	fp,4(r21)
   87478:	d8c00017 	ldw	r3,0(sp)
   8747c:	d9000517 	ldw	r4,20(sp)
   87480:	18c00104 	addi	r3,r3,4
   87484:	d8c00015 	stw	r3,0(sp)
   87488:	d8c00117 	ldw	r3,4(sp)
   8748c:	18c00104 	addi	r3,r3,4
   87490:	d8c00115 	stw	r3,4(sp)
   87494:	d8c00017 	ldw	r3,0(sp)
   87498:	193fb136 	bltu	r3,r4,87360 <__alt_data_end+0xfffbdf80>
   8749c:	d8c00217 	ldw	r3,8(sp)
   874a0:	00c00c0e 	bge	zero,r3,874d4 <__multiply+0x244>
   874a4:	d8c00317 	ldw	r3,12(sp)
   874a8:	18bfff17 	ldw	r2,-4(r3)
   874ac:	1d7fff04 	addi	r21,r3,-4
   874b0:	10000326 	beq	r2,zero,874c0 <__multiply+0x230>
   874b4:	00000706 	br	874d4 <__multiply+0x244>
   874b8:	a8800017 	ldw	r2,0(r21)
   874bc:	1000051e 	bne	r2,zero,874d4 <__multiply+0x244>
   874c0:	d8c00217 	ldw	r3,8(sp)
   874c4:	ad7fff04 	addi	r21,r21,-4
   874c8:	18ffffc4 	addi	r3,r3,-1
   874cc:	d8c00215 	stw	r3,8(sp)
   874d0:	183ff91e 	bne	r3,zero,874b8 <__alt_data_end+0xfffbe0d8>
   874d4:	d8c00617 	ldw	r3,24(sp)
   874d8:	d9000217 	ldw	r4,8(sp)
   874dc:	1805883a 	mov	r2,r3
   874e0:	19000415 	stw	r4,16(r3)
   874e4:	dfc01017 	ldw	ra,64(sp)
   874e8:	df000f17 	ldw	fp,60(sp)
   874ec:	ddc00e17 	ldw	r23,56(sp)
   874f0:	dd800d17 	ldw	r22,52(sp)
   874f4:	dd400c17 	ldw	r21,48(sp)
   874f8:	dd000b17 	ldw	r20,44(sp)
   874fc:	dcc00a17 	ldw	r19,40(sp)
   87500:	dc800917 	ldw	r18,36(sp)
   87504:	dc400817 	ldw	r17,32(sp)
   87508:	dc000717 	ldw	r16,28(sp)
   8750c:	dec01104 	addi	sp,sp,68
   87510:	f800283a 	ret
   87514:	3025883a 	mov	r18,r6
   87518:	282d883a 	mov	r22,r5
   8751c:	003f6f06 	br	872dc <__alt_data_end+0xfffbdefc>

00087520 <__pow5mult>:
   87520:	defffa04 	addi	sp,sp,-24
   87524:	dcc00315 	stw	r19,12(sp)
   87528:	dc800215 	stw	r18,8(sp)
   8752c:	dc000015 	stw	r16,0(sp)
   87530:	dfc00515 	stw	ra,20(sp)
   87534:	dd000415 	stw	r20,16(sp)
   87538:	dc400115 	stw	r17,4(sp)
   8753c:	308000cc 	andi	r2,r6,3
   87540:	3021883a 	mov	r16,r6
   87544:	2027883a 	mov	r19,r4
   87548:	2825883a 	mov	r18,r5
   8754c:	10002e1e 	bne	r2,zero,87608 <__pow5mult+0xe8>
   87550:	8021d0ba 	srai	r16,r16,2
   87554:	80001a26 	beq	r16,zero,875c0 <__pow5mult+0xa0>
   87558:	9c401217 	ldw	r17,72(r19)
   8755c:	8800061e 	bne	r17,zero,87578 <__pow5mult+0x58>
   87560:	00003406 	br	87634 <__pow5mult+0x114>
   87564:	8021d07a 	srai	r16,r16,1
   87568:	80001526 	beq	r16,zero,875c0 <__pow5mult+0xa0>
   8756c:	88800017 	ldw	r2,0(r17)
   87570:	10001c26 	beq	r2,zero,875e4 <__pow5mult+0xc4>
   87574:	1023883a 	mov	r17,r2
   87578:	80c0004c 	andi	r3,r16,1
   8757c:	183ff926 	beq	r3,zero,87564 <__alt_data_end+0xfffbe184>
   87580:	900b883a 	mov	r5,r18
   87584:	880d883a 	mov	r6,r17
   87588:	9809883a 	mov	r4,r19
   8758c:	00872900 	call	87290 <__multiply>
   87590:	90001b26 	beq	r18,zero,87600 <__pow5mult+0xe0>
   87594:	91c00117 	ldw	r7,4(r18)
   87598:	98c01317 	ldw	r3,76(r19)
   8759c:	8021d07a 	srai	r16,r16,1
   875a0:	39cf883a 	add	r7,r7,r7
   875a4:	39cf883a 	add	r7,r7,r7
   875a8:	19c7883a 	add	r3,r3,r7
   875ac:	19000017 	ldw	r4,0(r3)
   875b0:	91000015 	stw	r4,0(r18)
   875b4:	1c800015 	stw	r18,0(r3)
   875b8:	1025883a 	mov	r18,r2
   875bc:	803feb1e 	bne	r16,zero,8756c <__alt_data_end+0xfffbe18c>
   875c0:	9005883a 	mov	r2,r18
   875c4:	dfc00517 	ldw	ra,20(sp)
   875c8:	dd000417 	ldw	r20,16(sp)
   875cc:	dcc00317 	ldw	r19,12(sp)
   875d0:	dc800217 	ldw	r18,8(sp)
   875d4:	dc400117 	ldw	r17,4(sp)
   875d8:	dc000017 	ldw	r16,0(sp)
   875dc:	dec00604 	addi	sp,sp,24
   875e0:	f800283a 	ret
   875e4:	9809883a 	mov	r4,r19
   875e8:	880b883a 	mov	r5,r17
   875ec:	880d883a 	mov	r6,r17
   875f0:	00872900 	call	87290 <__multiply>
   875f4:	88800015 	stw	r2,0(r17)
   875f8:	10000015 	stw	zero,0(r2)
   875fc:	003fdd06 	br	87574 <__alt_data_end+0xfffbe194>
   87600:	1025883a 	mov	r18,r2
   87604:	003fd706 	br	87564 <__alt_data_end+0xfffbe184>
   87608:	10bfffc4 	addi	r2,r2,-1
   8760c:	1085883a 	add	r2,r2,r2
   87610:	00c00274 	movhi	r3,9
   87614:	18c3d904 	addi	r3,r3,3940
   87618:	1085883a 	add	r2,r2,r2
   8761c:	1885883a 	add	r2,r3,r2
   87620:	11800017 	ldw	r6,0(r2)
   87624:	000f883a 	mov	r7,zero
   87628:	0086ef00 	call	86ef0 <__multadd>
   8762c:	1025883a 	mov	r18,r2
   87630:	003fc706 	br	87550 <__alt_data_end+0xfffbe170>
   87634:	05000044 	movi	r20,1
   87638:	9809883a 	mov	r4,r19
   8763c:	a00b883a 	mov	r5,r20
   87640:	0086e200 	call	86e20 <_Balloc>
   87644:	1023883a 	mov	r17,r2
   87648:	00809c44 	movi	r2,625
   8764c:	88800515 	stw	r2,20(r17)
   87650:	8d000415 	stw	r20,16(r17)
   87654:	9c401215 	stw	r17,72(r19)
   87658:	88000015 	stw	zero,0(r17)
   8765c:	003fc606 	br	87578 <__alt_data_end+0xfffbe198>

00087660 <__lshift>:
   87660:	defff904 	addi	sp,sp,-28
   87664:	dd000415 	stw	r20,16(sp)
   87668:	dcc00315 	stw	r19,12(sp)
   8766c:	3029d17a 	srai	r20,r6,5
   87670:	2cc00417 	ldw	r19,16(r5)
   87674:	28800217 	ldw	r2,8(r5)
   87678:	dd400515 	stw	r21,20(sp)
   8767c:	a4e7883a 	add	r19,r20,r19
   87680:	dc800215 	stw	r18,8(sp)
   87684:	dc400115 	stw	r17,4(sp)
   87688:	dc000015 	stw	r16,0(sp)
   8768c:	dfc00615 	stw	ra,24(sp)
   87690:	9c000044 	addi	r16,r19,1
   87694:	2823883a 	mov	r17,r5
   87698:	302b883a 	mov	r21,r6
   8769c:	2025883a 	mov	r18,r4
   876a0:	29400117 	ldw	r5,4(r5)
   876a4:	1400030e 	bge	r2,r16,876b4 <__lshift+0x54>
   876a8:	1085883a 	add	r2,r2,r2
   876ac:	29400044 	addi	r5,r5,1
   876b0:	143ffd16 	blt	r2,r16,876a8 <__alt_data_end+0xfffbe2c8>
   876b4:	9009883a 	mov	r4,r18
   876b8:	0086e200 	call	86e20 <_Balloc>
   876bc:	11c00504 	addi	r7,r2,20
   876c0:	0500090e 	bge	zero,r20,876e8 <__lshift+0x88>
   876c4:	3811883a 	mov	r8,r7
   876c8:	0007883a 	mov	r3,zero
   876cc:	40000015 	stw	zero,0(r8)
   876d0:	18c00044 	addi	r3,r3,1
   876d4:	42000104 	addi	r8,r8,4
   876d8:	1d3ffc1e 	bne	r3,r20,876cc <__alt_data_end+0xfffbe2ec>
   876dc:	18c7883a 	add	r3,r3,r3
   876e0:	18c7883a 	add	r3,r3,r3
   876e4:	38cf883a 	add	r7,r7,r3
   876e8:	89000417 	ldw	r4,16(r17)
   876ec:	88c00504 	addi	r3,r17,20
   876f0:	a98007cc 	andi	r6,r21,31
   876f4:	2109883a 	add	r4,r4,r4
   876f8:	2109883a 	add	r4,r4,r4
   876fc:	1909883a 	add	r4,r3,r4
   87700:	30002326 	beq	r6,zero,87790 <__lshift+0x130>
   87704:	01400804 	movi	r5,32
   87708:	298bc83a 	sub	r5,r5,r6
   8770c:	0013883a 	mov	r9,zero
   87710:	1a000017 	ldw	r8,0(r3)
   87714:	3815883a 	mov	r10,r7
   87718:	39c00104 	addi	r7,r7,4
   8771c:	4190983a 	sll	r8,r8,r6
   87720:	18c00104 	addi	r3,r3,4
   87724:	4a10b03a 	or	r8,r9,r8
   87728:	3a3fff15 	stw	r8,-4(r7)
   8772c:	1a3fff17 	ldw	r8,-4(r3)
   87730:	4152d83a 	srl	r9,r8,r5
   87734:	193ff636 	bltu	r3,r4,87710 <__alt_data_end+0xfffbe330>
   87738:	52400115 	stw	r9,4(r10)
   8773c:	48001a1e 	bne	r9,zero,877a8 <__lshift+0x148>
   87740:	843fffc4 	addi	r16,r16,-1
   87744:	14000415 	stw	r16,16(r2)
   87748:	88000826 	beq	r17,zero,8776c <__lshift+0x10c>
   8774c:	89000117 	ldw	r4,4(r17)
   87750:	90c01317 	ldw	r3,76(r18)
   87754:	2109883a 	add	r4,r4,r4
   87758:	2109883a 	add	r4,r4,r4
   8775c:	1907883a 	add	r3,r3,r4
   87760:	19000017 	ldw	r4,0(r3)
   87764:	89000015 	stw	r4,0(r17)
   87768:	1c400015 	stw	r17,0(r3)
   8776c:	dfc00617 	ldw	ra,24(sp)
   87770:	dd400517 	ldw	r21,20(sp)
   87774:	dd000417 	ldw	r20,16(sp)
   87778:	dcc00317 	ldw	r19,12(sp)
   8777c:	dc800217 	ldw	r18,8(sp)
   87780:	dc400117 	ldw	r17,4(sp)
   87784:	dc000017 	ldw	r16,0(sp)
   87788:	dec00704 	addi	sp,sp,28
   8778c:	f800283a 	ret
   87790:	19400017 	ldw	r5,0(r3)
   87794:	39c00104 	addi	r7,r7,4
   87798:	18c00104 	addi	r3,r3,4
   8779c:	397fff15 	stw	r5,-4(r7)
   877a0:	193ffb36 	bltu	r3,r4,87790 <__alt_data_end+0xfffbe3b0>
   877a4:	003fe606 	br	87740 <__alt_data_end+0xfffbe360>
   877a8:	9c000084 	addi	r16,r19,2
   877ac:	003fe406 	br	87740 <__alt_data_end+0xfffbe360>

000877b0 <__mcmp>:
   877b0:	20800417 	ldw	r2,16(r4)
   877b4:	28c00417 	ldw	r3,16(r5)
   877b8:	10c5c83a 	sub	r2,r2,r3
   877bc:	1000111e 	bne	r2,zero,87804 <__mcmp+0x54>
   877c0:	18c7883a 	add	r3,r3,r3
   877c4:	18c7883a 	add	r3,r3,r3
   877c8:	21000504 	addi	r4,r4,20
   877cc:	29400504 	addi	r5,r5,20
   877d0:	20c5883a 	add	r2,r4,r3
   877d4:	28cb883a 	add	r5,r5,r3
   877d8:	00000106 	br	877e0 <__mcmp+0x30>
   877dc:	20800a2e 	bgeu	r4,r2,87808 <__mcmp+0x58>
   877e0:	10bfff04 	addi	r2,r2,-4
   877e4:	297fff04 	addi	r5,r5,-4
   877e8:	11800017 	ldw	r6,0(r2)
   877ec:	28c00017 	ldw	r3,0(r5)
   877f0:	30fffa26 	beq	r6,r3,877dc <__alt_data_end+0xfffbe3fc>
   877f4:	30c00236 	bltu	r6,r3,87800 <__mcmp+0x50>
   877f8:	00800044 	movi	r2,1
   877fc:	f800283a 	ret
   87800:	00bfffc4 	movi	r2,-1
   87804:	f800283a 	ret
   87808:	0005883a 	mov	r2,zero
   8780c:	f800283a 	ret

00087810 <__mdiff>:
   87810:	defffb04 	addi	sp,sp,-20
   87814:	dc000015 	stw	r16,0(sp)
   87818:	2821883a 	mov	r16,r5
   8781c:	dcc00315 	stw	r19,12(sp)
   87820:	300b883a 	mov	r5,r6
   87824:	2027883a 	mov	r19,r4
   87828:	8009883a 	mov	r4,r16
   8782c:	dc800215 	stw	r18,8(sp)
   87830:	dfc00415 	stw	ra,16(sp)
   87834:	dc400115 	stw	r17,4(sp)
   87838:	3025883a 	mov	r18,r6
   8783c:	00877b00 	call	877b0 <__mcmp>
   87840:	10005226 	beq	r2,zero,8798c <__mdiff+0x17c>
   87844:	10004c16 	blt	r2,zero,87978 <__mdiff+0x168>
   87848:	0023883a 	mov	r17,zero
   8784c:	81400117 	ldw	r5,4(r16)
   87850:	9809883a 	mov	r4,r19
   87854:	0086e200 	call	86e20 <_Balloc>
   87858:	83400417 	ldw	r13,16(r16)
   8785c:	93800417 	ldw	r14,16(r18)
   87860:	81000504 	addi	r4,r16,20
   87864:	6b59883a 	add	r12,r13,r13
   87868:	739d883a 	add	r14,r14,r14
   8786c:	6319883a 	add	r12,r12,r12
   87870:	91800504 	addi	r6,r18,20
   87874:	739d883a 	add	r14,r14,r14
   87878:	14400315 	stw	r17,12(r2)
   8787c:	2319883a 	add	r12,r4,r12
   87880:	339d883a 	add	r14,r6,r14
   87884:	12400504 	addi	r9,r2,20
   87888:	0007883a 	mov	r3,zero
   8788c:	22000017 	ldw	r8,0(r4)
   87890:	32800017 	ldw	r10,0(r6)
   87894:	4ac00104 	addi	r11,r9,4
   87898:	41ffffcc 	andi	r7,r8,65535
   8789c:	38c7883a 	add	r3,r7,r3
   878a0:	51ffffcc 	andi	r7,r10,65535
   878a4:	19cfc83a 	sub	r7,r3,r7
   878a8:	4010d43a 	srli	r8,r8,16
   878ac:	5014d43a 	srli	r10,r10,16
   878b0:	3807d43a 	srai	r3,r7,16
   878b4:	39ffffcc 	andi	r7,r7,65535
   878b8:	4291c83a 	sub	r8,r8,r10
   878bc:	40c7883a 	add	r3,r8,r3
   878c0:	1810943a 	slli	r8,r3,16
   878c4:	31800104 	addi	r6,r6,4
   878c8:	21000104 	addi	r4,r4,4
   878cc:	41ceb03a 	or	r7,r8,r7
   878d0:	49c00015 	stw	r7,0(r9)
   878d4:	1807d43a 	srai	r3,r3,16
   878d8:	580b883a 	mov	r5,r11
   878dc:	5813883a 	mov	r9,r11
   878e0:	33bfea36 	bltu	r6,r14,8788c <__alt_data_end+0xfffbe4ac>
   878e4:	2011883a 	mov	r8,r4
   878e8:	2300152e 	bgeu	r4,r12,87940 <__mdiff+0x130>
   878ec:	21400017 	ldw	r5,0(r4)
   878f0:	4a400104 	addi	r9,r9,4
   878f4:	21000104 	addi	r4,r4,4
   878f8:	29ffffcc 	andi	r7,r5,65535
   878fc:	38c7883a 	add	r3,r7,r3
   87900:	280ad43a 	srli	r5,r5,16
   87904:	180dd43a 	srai	r6,r3,16
   87908:	19ffffcc 	andi	r7,r3,65535
   8790c:	3147883a 	add	r3,r6,r5
   87910:	180a943a 	slli	r5,r3,16
   87914:	1807d43a 	srai	r3,r3,16
   87918:	29ceb03a 	or	r7,r5,r7
   8791c:	49ffff15 	stw	r7,-4(r9)
   87920:	233ff236 	bltu	r4,r12,878ec <__alt_data_end+0xfffbe50c>
   87924:	0206303a 	nor	r3,zero,r8
   87928:	1b07883a 	add	r3,r3,r12
   8792c:	1806d0ba 	srli	r3,r3,2
   87930:	18c00044 	addi	r3,r3,1
   87934:	18c7883a 	add	r3,r3,r3
   87938:	18c7883a 	add	r3,r3,r3
   8793c:	58cb883a 	add	r5,r11,r3
   87940:	28ffff04 	addi	r3,r5,-4
   87944:	3800041e 	bne	r7,zero,87958 <__mdiff+0x148>
   87948:	18ffff04 	addi	r3,r3,-4
   8794c:	19000017 	ldw	r4,0(r3)
   87950:	6b7fffc4 	addi	r13,r13,-1
   87954:	203ffc26 	beq	r4,zero,87948 <__alt_data_end+0xfffbe568>
   87958:	13400415 	stw	r13,16(r2)
   8795c:	dfc00417 	ldw	ra,16(sp)
   87960:	dcc00317 	ldw	r19,12(sp)
   87964:	dc800217 	ldw	r18,8(sp)
   87968:	dc400117 	ldw	r17,4(sp)
   8796c:	dc000017 	ldw	r16,0(sp)
   87970:	dec00504 	addi	sp,sp,20
   87974:	f800283a 	ret
   87978:	8005883a 	mov	r2,r16
   8797c:	04400044 	movi	r17,1
   87980:	9021883a 	mov	r16,r18
   87984:	1025883a 	mov	r18,r2
   87988:	003fb006 	br	8784c <__alt_data_end+0xfffbe46c>
   8798c:	9809883a 	mov	r4,r19
   87990:	000b883a 	mov	r5,zero
   87994:	0086e200 	call	86e20 <_Balloc>
   87998:	00c00044 	movi	r3,1
   8799c:	10c00415 	stw	r3,16(r2)
   879a0:	10000515 	stw	zero,20(r2)
   879a4:	003fed06 	br	8795c <__alt_data_end+0xfffbe57c>

000879a8 <__ulp>:
   879a8:	295ffc2c 	andhi	r5,r5,32752
   879ac:	00bf3034 	movhi	r2,64704
   879b0:	2887883a 	add	r3,r5,r2
   879b4:	00c0020e 	bge	zero,r3,879c0 <__ulp+0x18>
   879b8:	0005883a 	mov	r2,zero
   879bc:	f800283a 	ret
   879c0:	00c7c83a 	sub	r3,zero,r3
   879c4:	180bd53a 	srai	r5,r3,20
   879c8:	008004c4 	movi	r2,19
   879cc:	11400a0e 	bge	r2,r5,879f8 <__ulp+0x50>
   879d0:	00800c84 	movi	r2,50
   879d4:	0007883a 	mov	r3,zero
   879d8:	11400516 	blt	r2,r5,879f0 <__ulp+0x48>
   879dc:	00800cc4 	movi	r2,51
   879e0:	114bc83a 	sub	r5,r2,r5
   879e4:	00800044 	movi	r2,1
   879e8:	1144983a 	sll	r2,r2,r5
   879ec:	f800283a 	ret
   879f0:	00800044 	movi	r2,1
   879f4:	f800283a 	ret
   879f8:	00800234 	movhi	r2,8
   879fc:	1147d83a 	sra	r3,r2,r5
   87a00:	0005883a 	mov	r2,zero
   87a04:	f800283a 	ret

00087a08 <__b2d>:
   87a08:	defffa04 	addi	sp,sp,-24
   87a0c:	dc000015 	stw	r16,0(sp)
   87a10:	24000417 	ldw	r16,16(r4)
   87a14:	dc400115 	stw	r17,4(sp)
   87a18:	24400504 	addi	r17,r4,20
   87a1c:	8421883a 	add	r16,r16,r16
   87a20:	8421883a 	add	r16,r16,r16
   87a24:	8c21883a 	add	r16,r17,r16
   87a28:	dc800215 	stw	r18,8(sp)
   87a2c:	84bfff17 	ldw	r18,-4(r16)
   87a30:	dd000415 	stw	r20,16(sp)
   87a34:	dcc00315 	stw	r19,12(sp)
   87a38:	9009883a 	mov	r4,r18
   87a3c:	2829883a 	mov	r20,r5
   87a40:	dfc00515 	stw	ra,20(sp)
   87a44:	008713c0 	call	8713c <__hi0bits>
   87a48:	00c00804 	movi	r3,32
   87a4c:	1887c83a 	sub	r3,r3,r2
   87a50:	a0c00015 	stw	r3,0(r20)
   87a54:	00c00284 	movi	r3,10
   87a58:	84ffff04 	addi	r19,r16,-4
   87a5c:	18801216 	blt	r3,r2,87aa8 <__b2d+0xa0>
   87a60:	014002c4 	movi	r5,11
   87a64:	2889c83a 	sub	r4,r5,r2
   87a68:	9106d83a 	srl	r3,r18,r4
   87a6c:	18cffc34 	orhi	r3,r3,16368
   87a70:	8cc0282e 	bgeu	r17,r19,87b14 <__b2d+0x10c>
   87a74:	817ffe17 	ldw	r5,-8(r16)
   87a78:	290ad83a 	srl	r5,r5,r4
   87a7c:	10800544 	addi	r2,r2,21
   87a80:	9084983a 	sll	r2,r18,r2
   87a84:	2884b03a 	or	r2,r5,r2
   87a88:	dfc00517 	ldw	ra,20(sp)
   87a8c:	dd000417 	ldw	r20,16(sp)
   87a90:	dcc00317 	ldw	r19,12(sp)
   87a94:	dc800217 	ldw	r18,8(sp)
   87a98:	dc400117 	ldw	r17,4(sp)
   87a9c:	dc000017 	ldw	r16,0(sp)
   87aa0:	dec00604 	addi	sp,sp,24
   87aa4:	f800283a 	ret
   87aa8:	113ffd44 	addi	r4,r2,-11
   87aac:	8cc00f2e 	bgeu	r17,r19,87aec <__b2d+0xe4>
   87ab0:	81bffe04 	addi	r6,r16,-8
   87ab4:	817ffe17 	ldw	r5,-8(r16)
   87ab8:	20001326 	beq	r4,zero,87b08 <__b2d+0x100>
   87abc:	00c00ac4 	movi	r3,43
   87ac0:	1885c83a 	sub	r2,r3,r2
   87ac4:	2886d83a 	srl	r3,r5,r2
   87ac8:	9124983a 	sll	r18,r18,r4
   87acc:	90e4b03a 	or	r18,r18,r3
   87ad0:	90cffc34 	orhi	r3,r18,16368
   87ad4:	8980112e 	bgeu	r17,r6,87b1c <__b2d+0x114>
   87ad8:	81bffd17 	ldw	r6,-12(r16)
   87adc:	308cd83a 	srl	r6,r6,r2
   87ae0:	2904983a 	sll	r2,r5,r4
   87ae4:	1184b03a 	or	r2,r2,r6
   87ae8:	003fe706 	br	87a88 <__alt_data_end+0xfffbe6a8>
   87aec:	20000526 	beq	r4,zero,87b04 <__b2d+0xfc>
   87af0:	9124983a 	sll	r18,r18,r4
   87af4:	000d883a 	mov	r6,zero
   87af8:	000b883a 	mov	r5,zero
   87afc:	90cffc34 	orhi	r3,r18,16368
   87b00:	003ff706 	br	87ae0 <__alt_data_end+0xfffbe700>
   87b04:	000b883a 	mov	r5,zero
   87b08:	90cffc34 	orhi	r3,r18,16368
   87b0c:	2805883a 	mov	r2,r5
   87b10:	003fdd06 	br	87a88 <__alt_data_end+0xfffbe6a8>
   87b14:	000b883a 	mov	r5,zero
   87b18:	003fd806 	br	87a7c <__alt_data_end+0xfffbe69c>
   87b1c:	000d883a 	mov	r6,zero
   87b20:	003fef06 	br	87ae0 <__alt_data_end+0xfffbe700>

00087b24 <__d2b>:
   87b24:	defff704 	addi	sp,sp,-36
   87b28:	dc000215 	stw	r16,8(sp)
   87b2c:	3021883a 	mov	r16,r6
   87b30:	dc400315 	stw	r17,12(sp)
   87b34:	8022907a 	slli	r17,r16,1
   87b38:	dd400715 	stw	r21,28(sp)
   87b3c:	282b883a 	mov	r21,r5
   87b40:	01400044 	movi	r5,1
   87b44:	dd000615 	stw	r20,24(sp)
   87b48:	dcc00515 	stw	r19,20(sp)
   87b4c:	dc800415 	stw	r18,16(sp)
   87b50:	dfc00815 	stw	ra,32(sp)
   87b54:	3829883a 	mov	r20,r7
   87b58:	dc800917 	ldw	r18,36(sp)
   87b5c:	8822d57a 	srli	r17,r17,21
   87b60:	0086e200 	call	86e20 <_Balloc>
   87b64:	1027883a 	mov	r19,r2
   87b68:	00800434 	movhi	r2,16
   87b6c:	10bfffc4 	addi	r2,r2,-1
   87b70:	808c703a 	and	r6,r16,r2
   87b74:	88000126 	beq	r17,zero,87b7c <__d2b+0x58>
   87b78:	31800434 	orhi	r6,r6,16
   87b7c:	d9800015 	stw	r6,0(sp)
   87b80:	a8001f26 	beq	r21,zero,87c00 <__d2b+0xdc>
   87b84:	d9000104 	addi	r4,sp,4
   87b88:	dd400115 	stw	r21,4(sp)
   87b8c:	00871a40 	call	871a4 <__lo0bits>
   87b90:	d8c00017 	ldw	r3,0(sp)
   87b94:	1000291e 	bne	r2,zero,87c3c <__d2b+0x118>
   87b98:	d9000117 	ldw	r4,4(sp)
   87b9c:	99000515 	stw	r4,20(r19)
   87ba0:	1820c03a 	cmpne	r16,r3,zero
   87ba4:	84000044 	addi	r16,r16,1
   87ba8:	98c00615 	stw	r3,24(r19)
   87bac:	9c000415 	stw	r16,16(r19)
   87bb0:	88001b1e 	bne	r17,zero,87c20 <__d2b+0xfc>
   87bb4:	800690ba 	slli	r3,r16,2
   87bb8:	10bef384 	addi	r2,r2,-1074
   87bbc:	a0800015 	stw	r2,0(r20)
   87bc0:	98c5883a 	add	r2,r19,r3
   87bc4:	11000417 	ldw	r4,16(r2)
   87bc8:	8020917a 	slli	r16,r16,5
   87bcc:	008713c0 	call	8713c <__hi0bits>
   87bd0:	8085c83a 	sub	r2,r16,r2
   87bd4:	90800015 	stw	r2,0(r18)
   87bd8:	9805883a 	mov	r2,r19
   87bdc:	dfc00817 	ldw	ra,32(sp)
   87be0:	dd400717 	ldw	r21,28(sp)
   87be4:	dd000617 	ldw	r20,24(sp)
   87be8:	dcc00517 	ldw	r19,20(sp)
   87bec:	dc800417 	ldw	r18,16(sp)
   87bf0:	dc400317 	ldw	r17,12(sp)
   87bf4:	dc000217 	ldw	r16,8(sp)
   87bf8:	dec00904 	addi	sp,sp,36
   87bfc:	f800283a 	ret
   87c00:	d809883a 	mov	r4,sp
   87c04:	00871a40 	call	871a4 <__lo0bits>
   87c08:	d8c00017 	ldw	r3,0(sp)
   87c0c:	04000044 	movi	r16,1
   87c10:	9c000415 	stw	r16,16(r19)
   87c14:	98c00515 	stw	r3,20(r19)
   87c18:	10800804 	addi	r2,r2,32
   87c1c:	883fe526 	beq	r17,zero,87bb4 <__alt_data_end+0xfffbe7d4>
   87c20:	8c7ef344 	addi	r17,r17,-1075
   87c24:	88a3883a 	add	r17,r17,r2
   87c28:	00c00d44 	movi	r3,53
   87c2c:	a4400015 	stw	r17,0(r20)
   87c30:	1885c83a 	sub	r2,r3,r2
   87c34:	90800015 	stw	r2,0(r18)
   87c38:	003fe706 	br	87bd8 <__alt_data_end+0xfffbe7f8>
   87c3c:	01000804 	movi	r4,32
   87c40:	2089c83a 	sub	r4,r4,r2
   87c44:	1908983a 	sll	r4,r3,r4
   87c48:	d9400117 	ldw	r5,4(sp)
   87c4c:	1886d83a 	srl	r3,r3,r2
   87c50:	2148b03a 	or	r4,r4,r5
   87c54:	99000515 	stw	r4,20(r19)
   87c58:	d8c00015 	stw	r3,0(sp)
   87c5c:	003fd006 	br	87ba0 <__alt_data_end+0xfffbe7c0>

00087c60 <__ratio>:
   87c60:	defff904 	addi	sp,sp,-28
   87c64:	dc400315 	stw	r17,12(sp)
   87c68:	2823883a 	mov	r17,r5
   87c6c:	d9400104 	addi	r5,sp,4
   87c70:	dfc00615 	stw	ra,24(sp)
   87c74:	dcc00515 	stw	r19,20(sp)
   87c78:	dc800415 	stw	r18,16(sp)
   87c7c:	2027883a 	mov	r19,r4
   87c80:	dc000215 	stw	r16,8(sp)
   87c84:	0087a080 	call	87a08 <__b2d>
   87c88:	8809883a 	mov	r4,r17
   87c8c:	d80b883a 	mov	r5,sp
   87c90:	1025883a 	mov	r18,r2
   87c94:	1821883a 	mov	r16,r3
   87c98:	0087a080 	call	87a08 <__b2d>
   87c9c:	8a400417 	ldw	r9,16(r17)
   87ca0:	9a000417 	ldw	r8,16(r19)
   87ca4:	100d883a 	mov	r6,r2
   87ca8:	d8800017 	ldw	r2,0(sp)
   87cac:	4251c83a 	sub	r8,r8,r9
   87cb0:	4012917a 	slli	r9,r8,5
   87cb4:	da000117 	ldw	r8,4(sp)
   87cb8:	4091c83a 	sub	r8,r8,r2
   87cbc:	4251883a 	add	r8,r8,r9
   87cc0:	02000d0e 	bge	zero,r8,87cf8 <__ratio+0x98>
   87cc4:	4010953a 	slli	r8,r8,20
   87cc8:	4421883a 	add	r16,r8,r16
   87ccc:	9009883a 	mov	r4,r18
   87cd0:	800b883a 	mov	r5,r16
   87cd4:	180f883a 	mov	r7,r3
   87cd8:	008b99c0 	call	8b99c <__divdf3>
   87cdc:	dfc00617 	ldw	ra,24(sp)
   87ce0:	dcc00517 	ldw	r19,20(sp)
   87ce4:	dc800417 	ldw	r18,16(sp)
   87ce8:	dc400317 	ldw	r17,12(sp)
   87cec:	dc000217 	ldw	r16,8(sp)
   87cf0:	dec00704 	addi	sp,sp,28
   87cf4:	f800283a 	ret
   87cf8:	4010953a 	slli	r8,r8,20
   87cfc:	1a07c83a 	sub	r3,r3,r8
   87d00:	003ff206 	br	87ccc <__alt_data_end+0xfffbe8ec>

00087d04 <_mprec_log10>:
   87d04:	defffe04 	addi	sp,sp,-8
   87d08:	dc000015 	stw	r16,0(sp)
   87d0c:	dfc00115 	stw	ra,4(sp)
   87d10:	008005c4 	movi	r2,23
   87d14:	2021883a 	mov	r16,r4
   87d18:	11000d0e 	bge	r2,r4,87d50 <_mprec_log10+0x4c>
   87d1c:	0005883a 	mov	r2,zero
   87d20:	00cffc34 	movhi	r3,16368
   87d24:	843fffc4 	addi	r16,r16,-1
   87d28:	1009883a 	mov	r4,r2
   87d2c:	180b883a 	mov	r5,r3
   87d30:	000d883a 	mov	r6,zero
   87d34:	01d00934 	movhi	r7,16420
   87d38:	008c5600 	call	8c560 <__muldf3>
   87d3c:	803ff91e 	bne	r16,zero,87d24 <__alt_data_end+0xfffbe944>
   87d40:	dfc00117 	ldw	ra,4(sp)
   87d44:	dc000017 	ldw	r16,0(sp)
   87d48:	dec00204 	addi	sp,sp,8
   87d4c:	f800283a 	ret
   87d50:	202090fa 	slli	r16,r4,3
   87d54:	00800274 	movhi	r2,9
   87d58:	1083f004 	addi	r2,r2,4032
   87d5c:	1421883a 	add	r16,r2,r16
   87d60:	80800017 	ldw	r2,0(r16)
   87d64:	80c00117 	ldw	r3,4(r16)
   87d68:	dfc00117 	ldw	ra,4(sp)
   87d6c:	dc000017 	ldw	r16,0(sp)
   87d70:	dec00204 	addi	sp,sp,8
   87d74:	f800283a 	ret

00087d78 <__copybits>:
   87d78:	297fffc4 	addi	r5,r5,-1
   87d7c:	280fd17a 	srai	r7,r5,5
   87d80:	30c00417 	ldw	r3,16(r6)
   87d84:	30800504 	addi	r2,r6,20
   87d88:	39c00044 	addi	r7,r7,1
   87d8c:	18c7883a 	add	r3,r3,r3
   87d90:	39cf883a 	add	r7,r7,r7
   87d94:	18c7883a 	add	r3,r3,r3
   87d98:	39cf883a 	add	r7,r7,r7
   87d9c:	10c7883a 	add	r3,r2,r3
   87da0:	21cf883a 	add	r7,r4,r7
   87da4:	10c00d2e 	bgeu	r2,r3,87ddc <__copybits+0x64>
   87da8:	200b883a 	mov	r5,r4
   87dac:	12000017 	ldw	r8,0(r2)
   87db0:	29400104 	addi	r5,r5,4
   87db4:	10800104 	addi	r2,r2,4
   87db8:	2a3fff15 	stw	r8,-4(r5)
   87dbc:	10fffb36 	bltu	r2,r3,87dac <__alt_data_end+0xfffbe9cc>
   87dc0:	1985c83a 	sub	r2,r3,r6
   87dc4:	10bffac4 	addi	r2,r2,-21
   87dc8:	1004d0ba 	srli	r2,r2,2
   87dcc:	10800044 	addi	r2,r2,1
   87dd0:	1085883a 	add	r2,r2,r2
   87dd4:	1085883a 	add	r2,r2,r2
   87dd8:	2089883a 	add	r4,r4,r2
   87ddc:	21c0032e 	bgeu	r4,r7,87dec <__copybits+0x74>
   87de0:	20000015 	stw	zero,0(r4)
   87de4:	21000104 	addi	r4,r4,4
   87de8:	21fffd36 	bltu	r4,r7,87de0 <__alt_data_end+0xfffbea00>
   87dec:	f800283a 	ret

00087df0 <__any_on>:
   87df0:	20c00417 	ldw	r3,16(r4)
   87df4:	2805d17a 	srai	r2,r5,5
   87df8:	21000504 	addi	r4,r4,20
   87dfc:	18800d0e 	bge	r3,r2,87e34 <__any_on+0x44>
   87e00:	18c7883a 	add	r3,r3,r3
   87e04:	18c7883a 	add	r3,r3,r3
   87e08:	20c7883a 	add	r3,r4,r3
   87e0c:	20c0192e 	bgeu	r4,r3,87e74 <__any_on+0x84>
   87e10:	18bfff17 	ldw	r2,-4(r3)
   87e14:	18ffff04 	addi	r3,r3,-4
   87e18:	1000041e 	bne	r2,zero,87e2c <__any_on+0x3c>
   87e1c:	20c0142e 	bgeu	r4,r3,87e70 <__any_on+0x80>
   87e20:	18ffff04 	addi	r3,r3,-4
   87e24:	19400017 	ldw	r5,0(r3)
   87e28:	283ffc26 	beq	r5,zero,87e1c <__alt_data_end+0xfffbea3c>
   87e2c:	00800044 	movi	r2,1
   87e30:	f800283a 	ret
   87e34:	10c00a0e 	bge	r2,r3,87e60 <__any_on+0x70>
   87e38:	1085883a 	add	r2,r2,r2
   87e3c:	1085883a 	add	r2,r2,r2
   87e40:	294007cc 	andi	r5,r5,31
   87e44:	2087883a 	add	r3,r4,r2
   87e48:	283ff026 	beq	r5,zero,87e0c <__alt_data_end+0xfffbea2c>
   87e4c:	19800017 	ldw	r6,0(r3)
   87e50:	3144d83a 	srl	r2,r6,r5
   87e54:	114a983a 	sll	r5,r2,r5
   87e58:	29bff41e 	bne	r5,r6,87e2c <__alt_data_end+0xfffbea4c>
   87e5c:	003feb06 	br	87e0c <__alt_data_end+0xfffbea2c>
   87e60:	1085883a 	add	r2,r2,r2
   87e64:	1085883a 	add	r2,r2,r2
   87e68:	2087883a 	add	r3,r4,r2
   87e6c:	003fe706 	br	87e0c <__alt_data_end+0xfffbea2c>
   87e70:	f800283a 	ret
   87e74:	0005883a 	mov	r2,zero
   87e78:	f800283a 	ret

00087e7c <_realloc_r>:
   87e7c:	defff604 	addi	sp,sp,-40
   87e80:	dd000415 	stw	r20,16(sp)
   87e84:	dc400115 	stw	r17,4(sp)
   87e88:	dfc00915 	stw	ra,36(sp)
   87e8c:	df000815 	stw	fp,32(sp)
   87e90:	ddc00715 	stw	r23,28(sp)
   87e94:	dd800615 	stw	r22,24(sp)
   87e98:	dd400515 	stw	r21,20(sp)
   87e9c:	dcc00315 	stw	r19,12(sp)
   87ea0:	dc800215 	stw	r18,8(sp)
   87ea4:	dc000015 	stw	r16,0(sp)
   87ea8:	2829883a 	mov	r20,r5
   87eac:	3023883a 	mov	r17,r6
   87eb0:	2800ad26 	beq	r5,zero,88168 <_realloc_r+0x2ec>
   87eb4:	2025883a 	mov	r18,r4
   87eb8:	008dedc0 	call	8dedc <__malloc_lock>
   87ebc:	a0ffff17 	ldw	r3,-4(r20)
   87ec0:	043fff04 	movi	r16,-4
   87ec4:	890002c4 	addi	r4,r17,11
   87ec8:	01c00584 	movi	r7,22
   87ecc:	a57ffe04 	addi	r21,r20,-8
   87ed0:	1c20703a 	and	r16,r3,r16
   87ed4:	39001d2e 	bgeu	r7,r4,87f4c <_realloc_r+0xd0>
   87ed8:	05bffe04 	movi	r22,-8
   87edc:	25ac703a 	and	r22,r4,r22
   87ee0:	b00f883a 	mov	r7,r22
   87ee4:	b0006516 	blt	r22,zero,8807c <_realloc_r+0x200>
   87ee8:	b4406436 	bltu	r22,r17,8807c <_realloc_r+0x200>
   87eec:	81c01a0e 	bge	r16,r7,87f58 <_realloc_r+0xdc>
   87ef0:	07000274 	movhi	fp,9
   87ef4:	e705a804 	addi	fp,fp,5792
   87ef8:	e1400217 	ldw	r5,8(fp)
   87efc:	ac11883a 	add	r8,r21,r16
   87f00:	2a006226 	beq	r5,r8,8808c <_realloc_r+0x210>
   87f04:	41800117 	ldw	r6,4(r8)
   87f08:	027fff84 	movi	r9,-2
   87f0c:	3252703a 	and	r9,r6,r9
   87f10:	4253883a 	add	r9,r8,r9
   87f14:	49000117 	ldw	r4,4(r9)
   87f18:	2100004c 	andi	r4,r4,1
   87f1c:	2000281e 	bne	r4,zero,87fc0 <_realloc_r+0x144>
   87f20:	00bfff04 	movi	r2,-4
   87f24:	3084703a 	and	r2,r6,r2
   87f28:	1409883a 	add	r4,r2,r16
   87f2c:	21c05e16 	blt	r4,r7,880a8 <_realloc_r+0x22c>
   87f30:	40800317 	ldw	r2,12(r8)
   87f34:	41400217 	ldw	r5,8(r8)
   87f38:	a023883a 	mov	r17,r20
   87f3c:	2021883a 	mov	r16,r4
   87f40:	28800315 	stw	r2,12(r5)
   87f44:	11400215 	stw	r5,8(r2)
   87f48:	00000406 	br	87f5c <_realloc_r+0xe0>
   87f4c:	01c00404 	movi	r7,16
   87f50:	382d883a 	mov	r22,r7
   87f54:	003fe406 	br	87ee8 <__alt_data_end+0xfffbeb08>
   87f58:	a023883a 	mov	r17,r20
   87f5c:	858fc83a 	sub	r7,r16,r22
   87f60:	008003c4 	movi	r2,15
   87f64:	18c0004c 	andi	r3,r3,1
   87f68:	11c07236 	bltu	r2,r7,88134 <_realloc_r+0x2b8>
   87f6c:	1c06b03a 	or	r3,r3,r16
   87f70:	a8c00115 	stw	r3,4(r21)
   87f74:	ac21883a 	add	r16,r21,r16
   87f78:	80800117 	ldw	r2,4(r16)
   87f7c:	10800054 	ori	r2,r2,1
   87f80:	80800115 	stw	r2,4(r16)
   87f84:	9009883a 	mov	r4,r18
   87f88:	008defc0 	call	8defc <__malloc_unlock>
   87f8c:	8805883a 	mov	r2,r17
   87f90:	dfc00917 	ldw	ra,36(sp)
   87f94:	df000817 	ldw	fp,32(sp)
   87f98:	ddc00717 	ldw	r23,28(sp)
   87f9c:	dd800617 	ldw	r22,24(sp)
   87fa0:	dd400517 	ldw	r21,20(sp)
   87fa4:	dd000417 	ldw	r20,16(sp)
   87fa8:	dcc00317 	ldw	r19,12(sp)
   87fac:	dc800217 	ldw	r18,8(sp)
   87fb0:	dc400117 	ldw	r17,4(sp)
   87fb4:	dc000017 	ldw	r16,0(sp)
   87fb8:	dec00a04 	addi	sp,sp,40
   87fbc:	f800283a 	ret
   87fc0:	18c0004c 	andi	r3,r3,1
   87fc4:	1800081e 	bne	r3,zero,87fe8 <_realloc_r+0x16c>
   87fc8:	a4fffe17 	ldw	r19,-8(r20)
   87fcc:	00bfff04 	movi	r2,-4
   87fd0:	ace7c83a 	sub	r19,r21,r19
   87fd4:	98c00117 	ldw	r3,4(r19)
   87fd8:	1886703a 	and	r3,r3,r2
   87fdc:	98000226 	beq	r19,zero,87fe8 <_realloc_r+0x16c>
   87fe0:	1c2f883a 	add	r23,r3,r16
   87fe4:	b9c06d0e 	bge	r23,r7,8819c <_realloc_r+0x320>
   87fe8:	880b883a 	mov	r5,r17
   87fec:	9009883a 	mov	r4,r18
   87ff0:	00861d80 	call	861d8 <_malloc_r>
   87ff4:	1023883a 	mov	r17,r2
   87ff8:	1000ef26 	beq	r2,zero,883b8 <_realloc_r+0x53c>
   87ffc:	a0ffff17 	ldw	r3,-4(r20)
   88000:	113ffe04 	addi	r4,r2,-8
   88004:	00bfff84 	movi	r2,-2
   88008:	1884703a 	and	r2,r3,r2
   8800c:	a885883a 	add	r2,r21,r2
   88010:	2080bf26 	beq	r4,r2,88310 <_realloc_r+0x494>
   88014:	81bfff04 	addi	r6,r16,-4
   88018:	00800904 	movi	r2,36
   8801c:	11808936 	bltu	r2,r6,88244 <_realloc_r+0x3c8>
   88020:	00c004c4 	movi	r3,19
   88024:	19806c2e 	bgeu	r3,r6,881d8 <_realloc_r+0x35c>
   88028:	a0c00017 	ldw	r3,0(r20)
   8802c:	88c00015 	stw	r3,0(r17)
   88030:	a0c00117 	ldw	r3,4(r20)
   88034:	88c00115 	stw	r3,4(r17)
   88038:	00c006c4 	movi	r3,27
   8803c:	1980ac36 	bltu	r3,r6,882f0 <_realloc_r+0x474>
   88040:	88800204 	addi	r2,r17,8
   88044:	a0c00204 	addi	r3,r20,8
   88048:	19000017 	ldw	r4,0(r3)
   8804c:	11000015 	stw	r4,0(r2)
   88050:	19000117 	ldw	r4,4(r3)
   88054:	11000115 	stw	r4,4(r2)
   88058:	18c00217 	ldw	r3,8(r3)
   8805c:	10c00215 	stw	r3,8(r2)
   88060:	a00b883a 	mov	r5,r20
   88064:	9009883a 	mov	r4,r18
   88068:	00855fc0 	call	855fc <_free_r>
   8806c:	9009883a 	mov	r4,r18
   88070:	008defc0 	call	8defc <__malloc_unlock>
   88074:	8805883a 	mov	r2,r17
   88078:	003fc506 	br	87f90 <__alt_data_end+0xfffbebb0>
   8807c:	00800304 	movi	r2,12
   88080:	90800015 	stw	r2,0(r18)
   88084:	0005883a 	mov	r2,zero
   88088:	003fc106 	br	87f90 <__alt_data_end+0xfffbebb0>
   8808c:	29800117 	ldw	r6,4(r5)
   88090:	00bfff04 	movi	r2,-4
   88094:	b1000404 	addi	r4,r22,16
   88098:	3084703a 	and	r2,r6,r2
   8809c:	140d883a 	add	r6,r2,r16
   880a0:	31005b0e 	bge	r6,r4,88210 <_realloc_r+0x394>
   880a4:	2811883a 	mov	r8,r5
   880a8:	18c0004c 	andi	r3,r3,1
   880ac:	183fce1e 	bne	r3,zero,87fe8 <__alt_data_end+0xfffbec08>
   880b0:	a4fffe17 	ldw	r19,-8(r20)
   880b4:	00ffff04 	movi	r3,-4
   880b8:	ace7c83a 	sub	r19,r21,r19
   880bc:	99000117 	ldw	r4,4(r19)
   880c0:	20c6703a 	and	r3,r4,r3
   880c4:	403fc526 	beq	r8,zero,87fdc <__alt_data_end+0xfffbebfc>
   880c8:	1c2f883a 	add	r23,r3,r16
   880cc:	b8af883a 	add	r23,r23,r2
   880d0:	41406026 	beq	r8,r5,88254 <_realloc_r+0x3d8>
   880d4:	b9ffc116 	blt	r23,r7,87fdc <__alt_data_end+0xfffbebfc>
   880d8:	40c00217 	ldw	r3,8(r8)
   880dc:	40800317 	ldw	r2,12(r8)
   880e0:	81bfff04 	addi	r6,r16,-4
   880e4:	01000904 	movi	r4,36
   880e8:	18800315 	stw	r2,12(r3)
   880ec:	10c00215 	stw	r3,8(r2)
   880f0:	99400217 	ldw	r5,8(r19)
   880f4:	98c00317 	ldw	r3,12(r19)
   880f8:	9c400204 	addi	r17,r19,8
   880fc:	28c00315 	stw	r3,12(r5)
   88100:	19400215 	stw	r5,8(r3)
   88104:	21802d36 	bltu	r4,r6,881bc <_realloc_r+0x340>
   88108:	008004c4 	movi	r2,19
   8810c:	1180352e 	bgeu	r2,r6,881e4 <_realloc_r+0x368>
   88110:	a0800017 	ldw	r2,0(r20)
   88114:	98800215 	stw	r2,8(r19)
   88118:	a0800117 	ldw	r2,4(r20)
   8811c:	98800315 	stw	r2,12(r19)
   88120:	008006c4 	movi	r2,27
   88124:	11808036 	bltu	r2,r6,88328 <_realloc_r+0x4ac>
   88128:	98c00404 	addi	r3,r19,16
   8812c:	a5000204 	addi	r20,r20,8
   88130:	00002d06 	br	881e8 <_realloc_r+0x36c>
   88134:	1d86b03a 	or	r3,r3,r22
   88138:	ad8b883a 	add	r5,r21,r22
   8813c:	a8c00115 	stw	r3,4(r21)
   88140:	38800054 	ori	r2,r7,1
   88144:	28800115 	stw	r2,4(r5)
   88148:	29cf883a 	add	r7,r5,r7
   8814c:	38800117 	ldw	r2,4(r7)
   88150:	9009883a 	mov	r4,r18
   88154:	29400204 	addi	r5,r5,8
   88158:	10800054 	ori	r2,r2,1
   8815c:	38800115 	stw	r2,4(r7)
   88160:	00855fc0 	call	855fc <_free_r>
   88164:	003f8706 	br	87f84 <__alt_data_end+0xfffbeba4>
   88168:	300b883a 	mov	r5,r6
   8816c:	dfc00917 	ldw	ra,36(sp)
   88170:	df000817 	ldw	fp,32(sp)
   88174:	ddc00717 	ldw	r23,28(sp)
   88178:	dd800617 	ldw	r22,24(sp)
   8817c:	dd400517 	ldw	r21,20(sp)
   88180:	dd000417 	ldw	r20,16(sp)
   88184:	dcc00317 	ldw	r19,12(sp)
   88188:	dc800217 	ldw	r18,8(sp)
   8818c:	dc400117 	ldw	r17,4(sp)
   88190:	dc000017 	ldw	r16,0(sp)
   88194:	dec00a04 	addi	sp,sp,40
   88198:	00861d81 	jmpi	861d8 <_malloc_r>
   8819c:	98800317 	ldw	r2,12(r19)
   881a0:	98c00217 	ldw	r3,8(r19)
   881a4:	81bfff04 	addi	r6,r16,-4
   881a8:	01000904 	movi	r4,36
   881ac:	18800315 	stw	r2,12(r3)
   881b0:	10c00215 	stw	r3,8(r2)
   881b4:	9c400204 	addi	r17,r19,8
   881b8:	21bfd32e 	bgeu	r4,r6,88108 <__alt_data_end+0xfffbed28>
   881bc:	8809883a 	mov	r4,r17
   881c0:	a00b883a 	mov	r5,r20
   881c4:	0086ba00 	call	86ba0 <memmove>
   881c8:	98c00117 	ldw	r3,4(r19)
   881cc:	b821883a 	mov	r16,r23
   881d0:	982b883a 	mov	r21,r19
   881d4:	003f6106 	br	87f5c <__alt_data_end+0xfffbeb7c>
   881d8:	8805883a 	mov	r2,r17
   881dc:	a007883a 	mov	r3,r20
   881e0:	003f9906 	br	88048 <__alt_data_end+0xfffbec68>
   881e4:	8807883a 	mov	r3,r17
   881e8:	a0800017 	ldw	r2,0(r20)
   881ec:	b821883a 	mov	r16,r23
   881f0:	982b883a 	mov	r21,r19
   881f4:	18800015 	stw	r2,0(r3)
   881f8:	a0800117 	ldw	r2,4(r20)
   881fc:	18800115 	stw	r2,4(r3)
   88200:	a0800217 	ldw	r2,8(r20)
   88204:	18800215 	stw	r2,8(r3)
   88208:	98c00117 	ldw	r3,4(r19)
   8820c:	003f5306 	br	87f5c <__alt_data_end+0xfffbeb7c>
   88210:	adab883a 	add	r21,r21,r22
   88214:	3585c83a 	sub	r2,r6,r22
   88218:	e5400215 	stw	r21,8(fp)
   8821c:	10800054 	ori	r2,r2,1
   88220:	a8800115 	stw	r2,4(r21)
   88224:	a0bfff17 	ldw	r2,-4(r20)
   88228:	9009883a 	mov	r4,r18
   8822c:	1080004c 	andi	r2,r2,1
   88230:	b0acb03a 	or	r22,r22,r2
   88234:	a5bfff15 	stw	r22,-4(r20)
   88238:	008defc0 	call	8defc <__malloc_unlock>
   8823c:	a005883a 	mov	r2,r20
   88240:	003f5306 	br	87f90 <__alt_data_end+0xfffbebb0>
   88244:	8809883a 	mov	r4,r17
   88248:	a00b883a 	mov	r5,r20
   8824c:	0086ba00 	call	86ba0 <memmove>
   88250:	003f8306 	br	88060 <__alt_data_end+0xfffbec80>
   88254:	b0800404 	addi	r2,r22,16
   88258:	b8bf6016 	blt	r23,r2,87fdc <__alt_data_end+0xfffbebfc>
   8825c:	98800317 	ldw	r2,12(r19)
   88260:	98c00217 	ldw	r3,8(r19)
   88264:	81bfff04 	addi	r6,r16,-4
   88268:	01000904 	movi	r4,36
   8826c:	18800315 	stw	r2,12(r3)
   88270:	10c00215 	stw	r3,8(r2)
   88274:	9c400204 	addi	r17,r19,8
   88278:	21804336 	bltu	r4,r6,88388 <_realloc_r+0x50c>
   8827c:	008004c4 	movi	r2,19
   88280:	11803f2e 	bgeu	r2,r6,88380 <_realloc_r+0x504>
   88284:	a0800017 	ldw	r2,0(r20)
   88288:	98800215 	stw	r2,8(r19)
   8828c:	a0800117 	ldw	r2,4(r20)
   88290:	98800315 	stw	r2,12(r19)
   88294:	008006c4 	movi	r2,27
   88298:	11803f36 	bltu	r2,r6,88398 <_realloc_r+0x51c>
   8829c:	98800404 	addi	r2,r19,16
   882a0:	a5000204 	addi	r20,r20,8
   882a4:	a0c00017 	ldw	r3,0(r20)
   882a8:	10c00015 	stw	r3,0(r2)
   882ac:	a0c00117 	ldw	r3,4(r20)
   882b0:	10c00115 	stw	r3,4(r2)
   882b4:	a0c00217 	ldw	r3,8(r20)
   882b8:	10c00215 	stw	r3,8(r2)
   882bc:	9d87883a 	add	r3,r19,r22
   882c0:	bd85c83a 	sub	r2,r23,r22
   882c4:	e0c00215 	stw	r3,8(fp)
   882c8:	10800054 	ori	r2,r2,1
   882cc:	18800115 	stw	r2,4(r3)
   882d0:	98800117 	ldw	r2,4(r19)
   882d4:	9009883a 	mov	r4,r18
   882d8:	1080004c 	andi	r2,r2,1
   882dc:	b0acb03a 	or	r22,r22,r2
   882e0:	9d800115 	stw	r22,4(r19)
   882e4:	008defc0 	call	8defc <__malloc_unlock>
   882e8:	8805883a 	mov	r2,r17
   882ec:	003f2806 	br	87f90 <__alt_data_end+0xfffbebb0>
   882f0:	a0c00217 	ldw	r3,8(r20)
   882f4:	88c00215 	stw	r3,8(r17)
   882f8:	a0c00317 	ldw	r3,12(r20)
   882fc:	88c00315 	stw	r3,12(r17)
   88300:	30801126 	beq	r6,r2,88348 <_realloc_r+0x4cc>
   88304:	88800404 	addi	r2,r17,16
   88308:	a0c00404 	addi	r3,r20,16
   8830c:	003f4e06 	br	88048 <__alt_data_end+0xfffbec68>
   88310:	893fff17 	ldw	r4,-4(r17)
   88314:	00bfff04 	movi	r2,-4
   88318:	a023883a 	mov	r17,r20
   8831c:	2084703a 	and	r2,r4,r2
   88320:	80a1883a 	add	r16,r16,r2
   88324:	003f0d06 	br	87f5c <__alt_data_end+0xfffbeb7c>
   88328:	a0800217 	ldw	r2,8(r20)
   8832c:	98800415 	stw	r2,16(r19)
   88330:	a0800317 	ldw	r2,12(r20)
   88334:	98800515 	stw	r2,20(r19)
   88338:	31000a26 	beq	r6,r4,88364 <_realloc_r+0x4e8>
   8833c:	98c00604 	addi	r3,r19,24
   88340:	a5000404 	addi	r20,r20,16
   88344:	003fa806 	br	881e8 <__alt_data_end+0xfffbee08>
   88348:	a1000417 	ldw	r4,16(r20)
   8834c:	88800604 	addi	r2,r17,24
   88350:	a0c00604 	addi	r3,r20,24
   88354:	89000415 	stw	r4,16(r17)
   88358:	a1000517 	ldw	r4,20(r20)
   8835c:	89000515 	stw	r4,20(r17)
   88360:	003f3906 	br	88048 <__alt_data_end+0xfffbec68>
   88364:	a0800417 	ldw	r2,16(r20)
   88368:	a5000604 	addi	r20,r20,24
   8836c:	98c00804 	addi	r3,r19,32
   88370:	98800615 	stw	r2,24(r19)
   88374:	a0bfff17 	ldw	r2,-4(r20)
   88378:	98800715 	stw	r2,28(r19)
   8837c:	003f9a06 	br	881e8 <__alt_data_end+0xfffbee08>
   88380:	8805883a 	mov	r2,r17
   88384:	003fc706 	br	882a4 <__alt_data_end+0xfffbeec4>
   88388:	8809883a 	mov	r4,r17
   8838c:	a00b883a 	mov	r5,r20
   88390:	0086ba00 	call	86ba0 <memmove>
   88394:	003fc906 	br	882bc <__alt_data_end+0xfffbeedc>
   88398:	a0800217 	ldw	r2,8(r20)
   8839c:	98800415 	stw	r2,16(r19)
   883a0:	a0800317 	ldw	r2,12(r20)
   883a4:	98800515 	stw	r2,20(r19)
   883a8:	31000726 	beq	r6,r4,883c8 <_realloc_r+0x54c>
   883ac:	98800604 	addi	r2,r19,24
   883b0:	a5000404 	addi	r20,r20,16
   883b4:	003fbb06 	br	882a4 <__alt_data_end+0xfffbeec4>
   883b8:	9009883a 	mov	r4,r18
   883bc:	008defc0 	call	8defc <__malloc_unlock>
   883c0:	0005883a 	mov	r2,zero
   883c4:	003ef206 	br	87f90 <__alt_data_end+0xfffbebb0>
   883c8:	a0c00417 	ldw	r3,16(r20)
   883cc:	a5000604 	addi	r20,r20,24
   883d0:	98800804 	addi	r2,r19,32
   883d4:	98c00615 	stw	r3,24(r19)
   883d8:	a0ffff17 	ldw	r3,-4(r20)
   883dc:	98c00715 	stw	r3,28(r19)
   883e0:	003fb006 	br	882a4 <__alt_data_end+0xfffbeec4>

000883e4 <__fpclassifyd>:
   883e4:	00a00034 	movhi	r2,32768
   883e8:	10bfffc4 	addi	r2,r2,-1
   883ec:	2884703a 	and	r2,r5,r2
   883f0:	10000726 	beq	r2,zero,88410 <__fpclassifyd+0x2c>
   883f4:	00fffc34 	movhi	r3,65520
   883f8:	019ff834 	movhi	r6,32736
   883fc:	28c7883a 	add	r3,r5,r3
   88400:	31bfffc4 	addi	r6,r6,-1
   88404:	30c00536 	bltu	r6,r3,8841c <__fpclassifyd+0x38>
   88408:	00800104 	movi	r2,4
   8840c:	f800283a 	ret
   88410:	2000021e 	bne	r4,zero,8841c <__fpclassifyd+0x38>
   88414:	00800084 	movi	r2,2
   88418:	f800283a 	ret
   8841c:	00dffc34 	movhi	r3,32752
   88420:	019ff834 	movhi	r6,32736
   88424:	28cb883a 	add	r5,r5,r3
   88428:	31bfffc4 	addi	r6,r6,-1
   8842c:	317ff62e 	bgeu	r6,r5,88408 <__alt_data_end+0xfffbf028>
   88430:	01400434 	movhi	r5,16
   88434:	297fffc4 	addi	r5,r5,-1
   88438:	28800236 	bltu	r5,r2,88444 <__fpclassifyd+0x60>
   8843c:	008000c4 	movi	r2,3
   88440:	f800283a 	ret
   88444:	10c00226 	beq	r2,r3,88450 <__fpclassifyd+0x6c>
   88448:	0005883a 	mov	r2,zero
   8844c:	f800283a 	ret
   88450:	2005003a 	cmpeq	r2,r4,zero
   88454:	f800283a 	ret

00088458 <_sbrk_r>:
   88458:	defffd04 	addi	sp,sp,-12
   8845c:	dc000015 	stw	r16,0(sp)
   88460:	04000274 	movhi	r16,9
   88464:	dc400115 	stw	r17,4(sp)
   88468:	84123704 	addi	r16,r16,18652
   8846c:	2023883a 	mov	r17,r4
   88470:	2809883a 	mov	r4,r5
   88474:	dfc00215 	stw	ra,8(sp)
   88478:	80000015 	stw	zero,0(r16)
   8847c:	008e0f00 	call	8e0f0 <sbrk>
   88480:	00ffffc4 	movi	r3,-1
   88484:	10c00526 	beq	r2,r3,8849c <_sbrk_r+0x44>
   88488:	dfc00217 	ldw	ra,8(sp)
   8848c:	dc400117 	ldw	r17,4(sp)
   88490:	dc000017 	ldw	r16,0(sp)
   88494:	dec00304 	addi	sp,sp,12
   88498:	f800283a 	ret
   8849c:	80c00017 	ldw	r3,0(r16)
   884a0:	183ff926 	beq	r3,zero,88488 <__alt_data_end+0xfffbf0a8>
   884a4:	88c00015 	stw	r3,0(r17)
   884a8:	003ff706 	br	88488 <__alt_data_end+0xfffbf0a8>

000884ac <__sread>:
   884ac:	defffe04 	addi	sp,sp,-8
   884b0:	dc000015 	stw	r16,0(sp)
   884b4:	2821883a 	mov	r16,r5
   884b8:	2940038f 	ldh	r5,14(r5)
   884bc:	dfc00115 	stw	ra,4(sp)
   884c0:	008a0e40 	call	8a0e4 <_read_r>
   884c4:	10000716 	blt	r2,zero,884e4 <__sread+0x38>
   884c8:	80c01417 	ldw	r3,80(r16)
   884cc:	1887883a 	add	r3,r3,r2
   884d0:	80c01415 	stw	r3,80(r16)
   884d4:	dfc00117 	ldw	ra,4(sp)
   884d8:	dc000017 	ldw	r16,0(sp)
   884dc:	dec00204 	addi	sp,sp,8
   884e0:	f800283a 	ret
   884e4:	80c0030b 	ldhu	r3,12(r16)
   884e8:	18fbffcc 	andi	r3,r3,61439
   884ec:	80c0030d 	sth	r3,12(r16)
   884f0:	dfc00117 	ldw	ra,4(sp)
   884f4:	dc000017 	ldw	r16,0(sp)
   884f8:	dec00204 	addi	sp,sp,8
   884fc:	f800283a 	ret

00088500 <__seofread>:
   88500:	0005883a 	mov	r2,zero
   88504:	f800283a 	ret

00088508 <__swrite>:
   88508:	2880030b 	ldhu	r2,12(r5)
   8850c:	defffb04 	addi	sp,sp,-20
   88510:	dcc00315 	stw	r19,12(sp)
   88514:	dc800215 	stw	r18,8(sp)
   88518:	dc400115 	stw	r17,4(sp)
   8851c:	dc000015 	stw	r16,0(sp)
   88520:	dfc00415 	stw	ra,16(sp)
   88524:	10c0400c 	andi	r3,r2,256
   88528:	2821883a 	mov	r16,r5
   8852c:	2027883a 	mov	r19,r4
   88530:	3025883a 	mov	r18,r6
   88534:	3823883a 	mov	r17,r7
   88538:	18000526 	beq	r3,zero,88550 <__swrite+0x48>
   8853c:	2940038f 	ldh	r5,14(r5)
   88540:	000d883a 	mov	r6,zero
   88544:	01c00084 	movi	r7,2
   88548:	008a0880 	call	8a088 <_lseek_r>
   8854c:	8080030b 	ldhu	r2,12(r16)
   88550:	8140038f 	ldh	r5,14(r16)
   88554:	10bbffcc 	andi	r2,r2,61439
   88558:	9809883a 	mov	r4,r19
   8855c:	900d883a 	mov	r6,r18
   88560:	880f883a 	mov	r7,r17
   88564:	8080030d 	sth	r2,12(r16)
   88568:	dfc00417 	ldw	ra,16(sp)
   8856c:	dcc00317 	ldw	r19,12(sp)
   88570:	dc800217 	ldw	r18,8(sp)
   88574:	dc400117 	ldw	r17,4(sp)
   88578:	dc000017 	ldw	r16,0(sp)
   8857c:	dec00504 	addi	sp,sp,20
   88580:	0089b701 	jmpi	89b70 <_write_r>

00088584 <__sseek>:
   88584:	defffe04 	addi	sp,sp,-8
   88588:	dc000015 	stw	r16,0(sp)
   8858c:	2821883a 	mov	r16,r5
   88590:	2940038f 	ldh	r5,14(r5)
   88594:	dfc00115 	stw	ra,4(sp)
   88598:	008a0880 	call	8a088 <_lseek_r>
   8859c:	00ffffc4 	movi	r3,-1
   885a0:	10c00826 	beq	r2,r3,885c4 <__sseek+0x40>
   885a4:	80c0030b 	ldhu	r3,12(r16)
   885a8:	80801415 	stw	r2,80(r16)
   885ac:	18c40014 	ori	r3,r3,4096
   885b0:	80c0030d 	sth	r3,12(r16)
   885b4:	dfc00117 	ldw	ra,4(sp)
   885b8:	dc000017 	ldw	r16,0(sp)
   885bc:	dec00204 	addi	sp,sp,8
   885c0:	f800283a 	ret
   885c4:	80c0030b 	ldhu	r3,12(r16)
   885c8:	18fbffcc 	andi	r3,r3,61439
   885cc:	80c0030d 	sth	r3,12(r16)
   885d0:	dfc00117 	ldw	ra,4(sp)
   885d4:	dc000017 	ldw	r16,0(sp)
   885d8:	dec00204 	addi	sp,sp,8
   885dc:	f800283a 	ret

000885e0 <__sclose>:
   885e0:	2940038f 	ldh	r5,14(r5)
   885e4:	0089bcc1 	jmpi	89bcc <_close_r>

000885e8 <strcmp>:
   885e8:	2144b03a 	or	r2,r4,r5
   885ec:	108000cc 	andi	r2,r2,3
   885f0:	1000171e 	bne	r2,zero,88650 <strcmp+0x68>
   885f4:	20800017 	ldw	r2,0(r4)
   885f8:	28c00017 	ldw	r3,0(r5)
   885fc:	10c0141e 	bne	r2,r3,88650 <strcmp+0x68>
   88600:	027fbff4 	movhi	r9,65279
   88604:	4a7fbfc4 	addi	r9,r9,-257
   88608:	0086303a 	nor	r3,zero,r2
   8860c:	02202074 	movhi	r8,32897
   88610:	1245883a 	add	r2,r2,r9
   88614:	42202004 	addi	r8,r8,-32640
   88618:	10c4703a 	and	r2,r2,r3
   8861c:	1204703a 	and	r2,r2,r8
   88620:	10000226 	beq	r2,zero,8862c <strcmp+0x44>
   88624:	00001706 	br	88684 <strcmp+0x9c>
   88628:	1000161e 	bne	r2,zero,88684 <strcmp+0x9c>
   8862c:	21000104 	addi	r4,r4,4
   88630:	20c00017 	ldw	r3,0(r4)
   88634:	29400104 	addi	r5,r5,4
   88638:	29800017 	ldw	r6,0(r5)
   8863c:	1a4f883a 	add	r7,r3,r9
   88640:	00c4303a 	nor	r2,zero,r3
   88644:	3884703a 	and	r2,r7,r2
   88648:	1204703a 	and	r2,r2,r8
   8864c:	19bff626 	beq	r3,r6,88628 <__alt_data_end+0xfffbf248>
   88650:	20800007 	ldb	r2,0(r4)
   88654:	1000051e 	bne	r2,zero,8866c <strcmp+0x84>
   88658:	00000606 	br	88674 <strcmp+0x8c>
   8865c:	21000044 	addi	r4,r4,1
   88660:	20800007 	ldb	r2,0(r4)
   88664:	29400044 	addi	r5,r5,1
   88668:	10000226 	beq	r2,zero,88674 <strcmp+0x8c>
   8866c:	28c00007 	ldb	r3,0(r5)
   88670:	10fffa26 	beq	r2,r3,8865c <__alt_data_end+0xfffbf27c>
   88674:	20800003 	ldbu	r2,0(r4)
   88678:	28c00003 	ldbu	r3,0(r5)
   8867c:	10c5c83a 	sub	r2,r2,r3
   88680:	f800283a 	ret
   88684:	0005883a 	mov	r2,zero
   88688:	f800283a 	ret

0008868c <__sprint_r.part.0>:
   8868c:	28801917 	ldw	r2,100(r5)
   88690:	defff604 	addi	sp,sp,-40
   88694:	dd400515 	stw	r21,20(sp)
   88698:	dcc00315 	stw	r19,12(sp)
   8869c:	dfc00915 	stw	ra,36(sp)
   886a0:	df000815 	stw	fp,32(sp)
   886a4:	ddc00715 	stw	r23,28(sp)
   886a8:	dd800615 	stw	r22,24(sp)
   886ac:	dd000415 	stw	r20,16(sp)
   886b0:	dc800215 	stw	r18,8(sp)
   886b4:	dc400115 	stw	r17,4(sp)
   886b8:	dc000015 	stw	r16,0(sp)
   886bc:	1088000c 	andi	r2,r2,8192
   886c0:	2827883a 	mov	r19,r5
   886c4:	302b883a 	mov	r21,r6
   886c8:	10002d26 	beq	r2,zero,88780 <__sprint_r.part.0+0xf4>
   886cc:	30800217 	ldw	r2,8(r6)
   886d0:	35800017 	ldw	r22,0(r6)
   886d4:	10002826 	beq	r2,zero,88778 <__sprint_r.part.0+0xec>
   886d8:	2029883a 	mov	r20,r4
   886dc:	b5c00104 	addi	r23,r22,4
   886e0:	04bfffc4 	movi	r18,-1
   886e4:	bc400017 	ldw	r17,0(r23)
   886e8:	b4000017 	ldw	r16,0(r22)
   886ec:	0039883a 	mov	fp,zero
   886f0:	8822d0ba 	srli	r17,r17,2
   886f4:	04400316 	blt	zero,r17,88704 <__sprint_r.part.0+0x78>
   886f8:	00001806 	br	8875c <__sprint_r.part.0+0xd0>
   886fc:	84000104 	addi	r16,r16,4
   88700:	8f001526 	beq	r17,fp,88758 <__sprint_r.part.0+0xcc>
   88704:	81400017 	ldw	r5,0(r16)
   88708:	a009883a 	mov	r4,r20
   8870c:	980d883a 	mov	r6,r19
   88710:	0089dfc0 	call	89dfc <_fputwc_r>
   88714:	e7000044 	addi	fp,fp,1
   88718:	14bff81e 	bne	r2,r18,886fc <__alt_data_end+0xfffbf31c>
   8871c:	9005883a 	mov	r2,r18
   88720:	a8000215 	stw	zero,8(r21)
   88724:	a8000115 	stw	zero,4(r21)
   88728:	dfc00917 	ldw	ra,36(sp)
   8872c:	df000817 	ldw	fp,32(sp)
   88730:	ddc00717 	ldw	r23,28(sp)
   88734:	dd800617 	ldw	r22,24(sp)
   88738:	dd400517 	ldw	r21,20(sp)
   8873c:	dd000417 	ldw	r20,16(sp)
   88740:	dcc00317 	ldw	r19,12(sp)
   88744:	dc800217 	ldw	r18,8(sp)
   88748:	dc400117 	ldw	r17,4(sp)
   8874c:	dc000017 	ldw	r16,0(sp)
   88750:	dec00a04 	addi	sp,sp,40
   88754:	f800283a 	ret
   88758:	a8800217 	ldw	r2,8(r21)
   8875c:	8c63883a 	add	r17,r17,r17
   88760:	8c63883a 	add	r17,r17,r17
   88764:	1445c83a 	sub	r2,r2,r17
   88768:	a8800215 	stw	r2,8(r21)
   8876c:	b5800204 	addi	r22,r22,8
   88770:	bdc00204 	addi	r23,r23,8
   88774:	103fdb1e 	bne	r2,zero,886e4 <__alt_data_end+0xfffbf304>
   88778:	0005883a 	mov	r2,zero
   8877c:	003fe806 	br	88720 <__alt_data_end+0xfffbf340>
   88780:	00858ec0 	call	858ec <__sfvwrite_r>
   88784:	003fe606 	br	88720 <__alt_data_end+0xfffbf340>

00088788 <__sprint_r>:
   88788:	30c00217 	ldw	r3,8(r6)
   8878c:	18000126 	beq	r3,zero,88794 <__sprint_r+0xc>
   88790:	008868c1 	jmpi	8868c <__sprint_r.part.0>
   88794:	30000115 	stw	zero,4(r6)
   88798:	0005883a 	mov	r2,zero
   8879c:	f800283a 	ret

000887a0 <___vfiprintf_internal_r>:
   887a0:	deffca04 	addi	sp,sp,-216
   887a4:	dcc02f15 	stw	r19,188(sp)
   887a8:	dfc03515 	stw	ra,212(sp)
   887ac:	df003415 	stw	fp,208(sp)
   887b0:	ddc03315 	stw	r23,204(sp)
   887b4:	dd803215 	stw	r22,200(sp)
   887b8:	dd403115 	stw	r21,196(sp)
   887bc:	dd003015 	stw	r20,192(sp)
   887c0:	dc802e15 	stw	r18,184(sp)
   887c4:	dc402d15 	stw	r17,180(sp)
   887c8:	dc002c15 	stw	r16,176(sp)
   887cc:	d9002215 	stw	r4,136(sp)
   887d0:	d9402115 	stw	r5,132(sp)
   887d4:	d9c02315 	stw	r7,140(sp)
   887d8:	3027883a 	mov	r19,r6
   887dc:	20000226 	beq	r4,zero,887e8 <___vfiprintf_internal_r+0x48>
   887e0:	20800e17 	ldw	r2,56(r4)
   887e4:	10018d26 	beq	r2,zero,88e1c <___vfiprintf_internal_r+0x67c>
   887e8:	d8c02117 	ldw	r3,132(sp)
   887ec:	1880030b 	ldhu	r2,12(r3)
   887f0:	10c8000c 	andi	r3,r2,8192
   887f4:	1800071e 	bne	r3,zero,88814 <___vfiprintf_internal_r+0x74>
   887f8:	d9402117 	ldw	r5,132(sp)
   887fc:	00f7ffc4 	movi	r3,-8193
   88800:	10880014 	ori	r2,r2,8192
   88804:	29001917 	ldw	r4,100(r5)
   88808:	2880030d 	sth	r2,12(r5)
   8880c:	20c6703a 	and	r3,r4,r3
   88810:	28c01915 	stw	r3,100(r5)
   88814:	10c0020c 	andi	r3,r2,8
   88818:	18016126 	beq	r3,zero,88da0 <___vfiprintf_internal_r+0x600>
   8881c:	d9002117 	ldw	r4,132(sp)
   88820:	20c00417 	ldw	r3,16(r4)
   88824:	18015e26 	beq	r3,zero,88da0 <___vfiprintf_internal_r+0x600>
   88828:	1080068c 	andi	r2,r2,26
   8882c:	00c00284 	movi	r3,10
   88830:	10c16426 	beq	r2,r3,88dc4 <___vfiprintf_internal_r+0x624>
   88834:	d9001a04 	addi	r4,sp,104
   88838:	d94019c4 	addi	r5,sp,103
   8883c:	04400274 	movhi	r17,9
   88840:	2145c83a 	sub	r2,r4,r5
   88844:	8c442204 	addi	r17,r17,4232
   88848:	d9001e15 	stw	r4,120(sp)
   8884c:	d9401f15 	stw	r5,124(sp)
   88850:	dec01a15 	stw	sp,104(sp)
   88854:	d8001c15 	stw	zero,112(sp)
   88858:	d8001b15 	stw	zero,108(sp)
   8885c:	d8002715 	stw	zero,156(sp)
   88860:	d8002515 	stw	zero,148(sp)
   88864:	d8802815 	stw	r2,160(sp)
   88868:	d829883a 	mov	r20,sp
   8886c:	982d883a 	mov	r22,r19
   88870:	b0800007 	ldb	r2,0(r22)
   88874:	10038126 	beq	r2,zero,8967c <___vfiprintf_internal_r+0xedc>
   88878:	01000944 	movi	r4,37
   8887c:	11037f26 	beq	r2,r4,8967c <___vfiprintf_internal_r+0xedc>
   88880:	b005883a 	mov	r2,r22
   88884:	00000106 	br	8888c <___vfiprintf_internal_r+0xec>
   88888:	19000326 	beq	r3,r4,88898 <___vfiprintf_internal_r+0xf8>
   8888c:	10800044 	addi	r2,r2,1
   88890:	10c00007 	ldb	r3,0(r2)
   88894:	183ffc1e 	bne	r3,zero,88888 <__alt_data_end+0xfffbf4a8>
   88898:	15a1c83a 	sub	r16,r2,r22
   8889c:	102b883a 	mov	r21,r2
   888a0:	80001026 	beq	r16,zero,888e4 <___vfiprintf_internal_r+0x144>
   888a4:	d8c01c17 	ldw	r3,112(sp)
   888a8:	d8801b17 	ldw	r2,108(sp)
   888ac:	a5800015 	stw	r22,0(r20)
   888b0:	80c7883a 	add	r3,r16,r3
   888b4:	10800044 	addi	r2,r2,1
   888b8:	a4000115 	stw	r16,4(r20)
   888bc:	d8c01c15 	stw	r3,112(sp)
   888c0:	d8801b15 	stw	r2,108(sp)
   888c4:	010001c4 	movi	r4,7
   888c8:	2080730e 	bge	r4,r2,88a98 <___vfiprintf_internal_r+0x2f8>
   888cc:	1803781e 	bne	r3,zero,896b0 <___vfiprintf_internal_r+0xf10>
   888d0:	d8c02517 	ldw	r3,148(sp)
   888d4:	d8001b15 	stw	zero,108(sp)
   888d8:	d829883a 	mov	r20,sp
   888dc:	1c07883a 	add	r3,r3,r16
   888e0:	d8c02515 	stw	r3,148(sp)
   888e4:	a8800007 	ldb	r2,0(r21)
   888e8:	1002a126 	beq	r2,zero,89370 <___vfiprintf_internal_r+0xbd0>
   888ec:	a8800044 	addi	r2,r21,1
   888f0:	a9800047 	ldb	r6,1(r21)
   888f4:	d8001d85 	stb	zero,118(sp)
   888f8:	d8002005 	stb	zero,128(sp)
   888fc:	043fffc4 	movi	r16,-1
   88900:	d8002415 	stw	zero,144(sp)
   88904:	0025883a 	mov	r18,zero
   88908:	05401604 	movi	r21,88
   8890c:	04c00244 	movi	r19,9
   88910:	15800044 	addi	r22,r2,1
   88914:	30bff804 	addi	r2,r6,-32
   88918:	a8823d36 	bltu	r21,r2,89210 <___vfiprintf_internal_r+0xa70>
   8891c:	100490ba 	slli	r2,r2,2
   88920:	01000274 	movhi	r4,9
   88924:	21224d04 	addi	r4,r4,-30412
   88928:	1105883a 	add	r2,r2,r4
   8892c:	10800017 	ldw	r2,0(r2)
   88930:	1000683a 	jmp	r2
   88934:	00089050 	cmplti	zero,zero,8769
   88938:	00089210 	cmplti	zero,zero,8776
   8893c:	00089210 	cmplti	zero,zero,8776
   88940:	0008906c 	andhi	zero,zero,8769
   88944:	00089210 	cmplti	zero,zero,8776
   88948:	00089210 	cmplti	zero,zero,8776
   8894c:	00089210 	cmplti	zero,zero,8776
   88950:	00089210 	cmplti	zero,zero,8776
   88954:	00089210 	cmplti	zero,zero,8776
   88958:	00089210 	cmplti	zero,zero,8776
   8895c:	0008907c 	xorhi	zero,zero,8769
   88960:	000890a4 	muli	zero,zero,8770
   88964:	00089210 	cmplti	zero,zero,8776
   88968:	00088e24 	muli	zero,zero,8760
   8896c:	00088fa8 	cmpgeui	zero,zero,8766
   88970:	00089210 	cmplti	zero,zero,8776
   88974:	00088f18 	cmpnei	zero,zero,8764
   88978:	00088f28 	cmpgeui	zero,zero,8764
   8897c:	00088f28 	cmpgeui	zero,zero,8764
   88980:	00088f28 	cmpgeui	zero,zero,8764
   88984:	00088f28 	cmpgeui	zero,zero,8764
   88988:	00088f28 	cmpgeui	zero,zero,8764
   8898c:	00088f28 	cmpgeui	zero,zero,8764
   88990:	00088f28 	cmpgeui	zero,zero,8764
   88994:	00088f28 	cmpgeui	zero,zero,8764
   88998:	00088f28 	cmpgeui	zero,zero,8764
   8899c:	00089210 	cmplti	zero,zero,8776
   889a0:	00089210 	cmplti	zero,zero,8776
   889a4:	00089210 	cmplti	zero,zero,8776
   889a8:	00089210 	cmplti	zero,zero,8776
   889ac:	00089210 	cmplti	zero,zero,8776
   889b0:	00089210 	cmplti	zero,zero,8776
   889b4:	00089210 	cmplti	zero,zero,8776
   889b8:	00089210 	cmplti	zero,zero,8776
   889bc:	00089210 	cmplti	zero,zero,8776
   889c0:	00089210 	cmplti	zero,zero,8776
   889c4:	00088f60 	cmpeqi	zero,zero,8765
   889c8:	00089210 	cmplti	zero,zero,8776
   889cc:	00089210 	cmplti	zero,zero,8776
   889d0:	00089210 	cmplti	zero,zero,8776
   889d4:	00089210 	cmplti	zero,zero,8776
   889d8:	00089210 	cmplti	zero,zero,8776
   889dc:	00089210 	cmplti	zero,zero,8776
   889e0:	00089210 	cmplti	zero,zero,8776
   889e4:	00089210 	cmplti	zero,zero,8776
   889e8:	00089210 	cmplti	zero,zero,8776
   889ec:	00089210 	cmplti	zero,zero,8776
   889f0:	00088ae0 	cmpeqi	zero,zero,8747
   889f4:	00089210 	cmplti	zero,zero,8776
   889f8:	00089210 	cmplti	zero,zero,8776
   889fc:	00089210 	cmplti	zero,zero,8776
   88a00:	00089210 	cmplti	zero,zero,8776
   88a04:	00089210 	cmplti	zero,zero,8776
   88a08:	00088aac 	andhi	zero,zero,8746
   88a0c:	00089210 	cmplti	zero,zero,8776
   88a10:	00089210 	cmplti	zero,zero,8776
   88a14:	00088e94 	movui	zero,8762
   88a18:	00089210 	cmplti	zero,zero,8776
   88a1c:	00089210 	cmplti	zero,zero,8776
   88a20:	00089210 	cmplti	zero,zero,8776
   88a24:	00089210 	cmplti	zero,zero,8776
   88a28:	00089210 	cmplti	zero,zero,8776
   88a2c:	00089210 	cmplti	zero,zero,8776
   88a30:	00089210 	cmplti	zero,zero,8776
   88a34:	00089210 	cmplti	zero,zero,8776
   88a38:	00089210 	cmplti	zero,zero,8776
   88a3c:	00089210 	cmplti	zero,zero,8776
   88a40:	00088eec 	andhi	zero,zero,8763
   88a44:	000890b8 	rdprs	zero,zero,8770
   88a48:	00089210 	cmplti	zero,zero,8776
   88a4c:	00089210 	cmplti	zero,zero,8776
   88a50:	00089210 	cmplti	zero,zero,8776
   88a54:	00089174 	movhi	zero,8773
   88a58:	000890b8 	rdprs	zero,zero,8770
   88a5c:	00089210 	cmplti	zero,zero,8776
   88a60:	00089210 	cmplti	zero,zero,8776
   88a64:	00089184 	movi	zero,8774
   88a68:	00089210 	cmplti	zero,zero,8776
   88a6c:	00088ff8 	rdprs	zero,zero,8767
   88a70:	00088ae4 	muli	zero,zero,8747
   88a74:	0008919c 	xori	zero,zero,8774
   88a78:	000891dc 	xori	zero,zero,8775
   88a7c:	00089210 	cmplti	zero,zero,8776
   88a80:	000890f0 	cmpltui	zero,zero,8771
   88a84:	00089210 	cmplti	zero,zero,8776
   88a88:	00088ab0 	cmpltui	zero,zero,8746
   88a8c:	00089210 	cmplti	zero,zero,8776
   88a90:	00089210 	cmplti	zero,zero,8776
   88a94:	00089138 	rdprs	zero,zero,8772
   88a98:	a5000204 	addi	r20,r20,8
   88a9c:	d8c02517 	ldw	r3,148(sp)
   88aa0:	1c07883a 	add	r3,r3,r16
   88aa4:	d8c02515 	stw	r3,148(sp)
   88aa8:	003f8e06 	br	888e4 <__alt_data_end+0xfffbf504>
   88aac:	94800414 	ori	r18,r18,16
   88ab0:	9080080c 	andi	r2,r18,32
   88ab4:	1001cd1e 	bne	r2,zero,891ec <___vfiprintf_internal_r+0xa4c>
   88ab8:	9080040c 	andi	r2,r18,16
   88abc:	10034e26 	beq	r2,zero,897f8 <___vfiprintf_internal_r+0x1058>
   88ac0:	d9002317 	ldw	r4,140(sp)
   88ac4:	002f883a 	mov	r23,zero
   88ac8:	00800044 	movi	r2,1
   88acc:	24c00017 	ldw	r19,0(r4)
   88ad0:	21000104 	addi	r4,r4,4
   88ad4:	d9002315 	stw	r4,140(sp)
   88ad8:	9807883a 	mov	r3,r19
   88adc:	00000c06 	br	88b10 <___vfiprintf_internal_r+0x370>
   88ae0:	94800414 	ori	r18,r18,16
   88ae4:	9080080c 	andi	r2,r18,32
   88ae8:	1001501e 	bne	r2,zero,8902c <___vfiprintf_internal_r+0x88c>
   88aec:	9080040c 	andi	r2,r18,16
   88af0:	10033726 	beq	r2,zero,897d0 <___vfiprintf_internal_r+0x1030>
   88af4:	d9002317 	ldw	r4,140(sp)
   88af8:	002f883a 	mov	r23,zero
   88afc:	0005883a 	mov	r2,zero
   88b00:	24c00017 	ldw	r19,0(r4)
   88b04:	21000104 	addi	r4,r4,4
   88b08:	d9002315 	stw	r4,140(sp)
   88b0c:	9807883a 	mov	r3,r19
   88b10:	d8001d85 	stb	zero,118(sp)
   88b14:	dc002015 	stw	r16,128(sp)
   88b18:	0015883a 	mov	r10,zero
   88b1c:	80000216 	blt	r16,zero,88b28 <___vfiprintf_internal_r+0x388>
   88b20:	013fdfc4 	movi	r4,-129
   88b24:	9124703a 	and	r18,r18,r4
   88b28:	1801ec1e 	bne	r3,zero,892dc <___vfiprintf_internal_r+0xb3c>
   88b2c:	8002b826 	beq	r16,zero,89610 <___vfiprintf_internal_r+0xe70>
   88b30:	10803fcc 	andi	r2,r2,255
   88b34:	00c00044 	movi	r3,1
   88b38:	10c20726 	beq	r2,r3,89358 <___vfiprintf_internal_r+0xbb8>
   88b3c:	00c00084 	movi	r3,2
   88b40:	df001a04 	addi	fp,sp,104
   88b44:	10c0bb1e 	bne	r2,r3,88e34 <___vfiprintf_internal_r+0x694>
   88b48:	d9002717 	ldw	r4,156(sp)
   88b4c:	988003cc 	andi	r2,r19,15
   88b50:	b806973a 	slli	r3,r23,28
   88b54:	2085883a 	add	r2,r4,r2
   88b58:	9826d13a 	srli	r19,r19,4
   88b5c:	10800003 	ldbu	r2,0(r2)
   88b60:	b82ed13a 	srli	r23,r23,4
   88b64:	e73fffc4 	addi	fp,fp,-1
   88b68:	1ce6b03a 	or	r19,r3,r19
   88b6c:	e0800005 	stb	r2,0(fp)
   88b70:	9dc4b03a 	or	r2,r19,r23
   88b74:	103ff51e 	bne	r2,zero,88b4c <__alt_data_end+0xfffbf76c>
   88b78:	d8c01e17 	ldw	r3,120(sp)
   88b7c:	1f07c83a 	sub	r3,r3,fp
   88b80:	d8c02015 	stw	r3,128(sp)
   88b84:	dd402017 	ldw	r21,128(sp)
   88b88:	ac00010e 	bge	r21,r16,88b90 <___vfiprintf_internal_r+0x3f0>
   88b8c:	802b883a 	mov	r21,r16
   88b90:	52803fcc 	andi	r10,r10,255
   88b94:	5280201c 	xori	r10,r10,128
   88b98:	52bfe004 	addi	r10,r10,-128
   88b9c:	50000126 	beq	r10,zero,88ba4 <___vfiprintf_internal_r+0x404>
   88ba0:	ad400044 	addi	r21,r21,1
   88ba4:	91c0008c 	andi	r7,r18,2
   88ba8:	38000126 	beq	r7,zero,88bb0 <___vfiprintf_internal_r+0x410>
   88bac:	ad400084 	addi	r21,r21,2
   88bb0:	95c0210c 	andi	r23,r18,132
   88bb4:	b801ad1e 	bne	r23,zero,8926c <___vfiprintf_internal_r+0xacc>
   88bb8:	d9002417 	ldw	r4,144(sp)
   88bbc:	2567c83a 	sub	r19,r4,r21
   88bc0:	04c1aa0e 	bge	zero,r19,8926c <___vfiprintf_internal_r+0xacc>
   88bc4:	00c00404 	movi	r3,16
   88bc8:	d8801c17 	ldw	r2,112(sp)
   88bcc:	1cc37f0e 	bge	r3,r19,899cc <___vfiprintf_internal_r+0x122c>
   88bd0:	01000274 	movhi	r4,9
   88bd4:	21042604 	addi	r4,r4,4248
   88bd8:	dc002915 	stw	r16,164(sp)
   88bdc:	d9801b17 	ldw	r6,108(sp)
   88be0:	9821883a 	mov	r16,r19
   88be4:	d9002615 	stw	r4,152(sp)
   88be8:	02c001c4 	movi	r11,7
   88bec:	3827883a 	mov	r19,r7
   88bf0:	00000506 	br	88c08 <___vfiprintf_internal_r+0x468>
   88bf4:	31400084 	addi	r5,r6,2
   88bf8:	a5000204 	addi	r20,r20,8
   88bfc:	200d883a 	mov	r6,r4
   88c00:	843ffc04 	addi	r16,r16,-16
   88c04:	1c000f0e 	bge	r3,r16,88c44 <___vfiprintf_internal_r+0x4a4>
   88c08:	01400274 	movhi	r5,9
   88c0c:	10800404 	addi	r2,r2,16
   88c10:	31000044 	addi	r4,r6,1
   88c14:	29442604 	addi	r5,r5,4248
   88c18:	a1400015 	stw	r5,0(r20)
   88c1c:	a0c00115 	stw	r3,4(r20)
   88c20:	d8801c15 	stw	r2,112(sp)
   88c24:	d9001b15 	stw	r4,108(sp)
   88c28:	593ff20e 	bge	r11,r4,88bf4 <__alt_data_end+0xfffbf814>
   88c2c:	1001811e 	bne	r2,zero,89234 <___vfiprintf_internal_r+0xa94>
   88c30:	843ffc04 	addi	r16,r16,-16
   88c34:	000d883a 	mov	r6,zero
   88c38:	01400044 	movi	r5,1
   88c3c:	d829883a 	mov	r20,sp
   88c40:	1c3ff116 	blt	r3,r16,88c08 <__alt_data_end+0xfffbf828>
   88c44:	980f883a 	mov	r7,r19
   88c48:	8027883a 	mov	r19,r16
   88c4c:	dc002917 	ldw	r16,164(sp)
   88c50:	d8c02617 	ldw	r3,152(sp)
   88c54:	9885883a 	add	r2,r19,r2
   88c58:	a4c00115 	stw	r19,4(r20)
   88c5c:	a0c00015 	stw	r3,0(r20)
   88c60:	d8801c15 	stw	r2,112(sp)
   88c64:	d9401b15 	stw	r5,108(sp)
   88c68:	00c001c4 	movi	r3,7
   88c6c:	19427416 	blt	r3,r5,89640 <___vfiprintf_internal_r+0xea0>
   88c70:	d8c01d87 	ldb	r3,118(sp)
   88c74:	a5000204 	addi	r20,r20,8
   88c78:	29000044 	addi	r4,r5,1
   88c7c:	1801801e 	bne	r3,zero,89280 <___vfiprintf_internal_r+0xae0>
   88c80:	38000c26 	beq	r7,zero,88cb4 <___vfiprintf_internal_r+0x514>
   88c84:	d8c01d04 	addi	r3,sp,116
   88c88:	10800084 	addi	r2,r2,2
   88c8c:	a0c00015 	stw	r3,0(r20)
   88c90:	00c00084 	movi	r3,2
   88c94:	a0c00115 	stw	r3,4(r20)
   88c98:	d8801c15 	stw	r2,112(sp)
   88c9c:	d9001b15 	stw	r4,108(sp)
   88ca0:	00c001c4 	movi	r3,7
   88ca4:	19025516 	blt	r3,r4,895fc <___vfiprintf_internal_r+0xe5c>
   88ca8:	200b883a 	mov	r5,r4
   88cac:	a5000204 	addi	r20,r20,8
   88cb0:	21000044 	addi	r4,r4,1
   88cb4:	00c02004 	movi	r3,128
   88cb8:	b8c21326 	beq	r23,r3,89508 <___vfiprintf_internal_r+0xd68>
   88cbc:	d8c02017 	ldw	r3,128(sp)
   88cc0:	80e1c83a 	sub	r16,r16,r3
   88cc4:	0400230e 	bge	zero,r16,88d54 <___vfiprintf_internal_r+0x5b4>
   88cc8:	04c00404 	movi	r19,16
   88ccc:	9c03240e 	bge	r19,r16,89960 <___vfiprintf_internal_r+0x11c0>
   88cd0:	00c00274 	movhi	r3,9
   88cd4:	18c42204 	addi	r3,r3,4232
   88cd8:	d8c02615 	stw	r3,152(sp)
   88cdc:	05c001c4 	movi	r23,7
   88ce0:	00000506 	br	88cf8 <___vfiprintf_internal_r+0x558>
   88ce4:	29000084 	addi	r4,r5,2
   88ce8:	a5000204 	addi	r20,r20,8
   88cec:	180b883a 	mov	r5,r3
   88cf0:	843ffc04 	addi	r16,r16,-16
   88cf4:	9c000d0e 	bge	r19,r16,88d2c <___vfiprintf_internal_r+0x58c>
   88cf8:	10800404 	addi	r2,r2,16
   88cfc:	28c00044 	addi	r3,r5,1
   88d00:	a4400015 	stw	r17,0(r20)
   88d04:	a4c00115 	stw	r19,4(r20)
   88d08:	d8801c15 	stw	r2,112(sp)
   88d0c:	d8c01b15 	stw	r3,108(sp)
   88d10:	b8fff40e 	bge	r23,r3,88ce4 <__alt_data_end+0xfffbf904>
   88d14:	1001671e 	bne	r2,zero,892b4 <___vfiprintf_internal_r+0xb14>
   88d18:	843ffc04 	addi	r16,r16,-16
   88d1c:	01000044 	movi	r4,1
   88d20:	000b883a 	mov	r5,zero
   88d24:	d829883a 	mov	r20,sp
   88d28:	9c3ff316 	blt	r19,r16,88cf8 <__alt_data_end+0xfffbf918>
   88d2c:	d8c02617 	ldw	r3,152(sp)
   88d30:	1405883a 	add	r2,r2,r16
   88d34:	a4000115 	stw	r16,4(r20)
   88d38:	a0c00015 	stw	r3,0(r20)
   88d3c:	d8801c15 	stw	r2,112(sp)
   88d40:	d9001b15 	stw	r4,108(sp)
   88d44:	00c001c4 	movi	r3,7
   88d48:	19019516 	blt	r3,r4,893a0 <___vfiprintf_internal_r+0xc00>
   88d4c:	a5000204 	addi	r20,r20,8
   88d50:	21000044 	addi	r4,r4,1
   88d54:	d8c02017 	ldw	r3,128(sp)
   88d58:	a7000015 	stw	fp,0(r20)
   88d5c:	d9001b15 	stw	r4,108(sp)
   88d60:	10c5883a 	add	r2,r2,r3
   88d64:	a0c00115 	stw	r3,4(r20)
   88d68:	d8801c15 	stw	r2,112(sp)
   88d6c:	00c001c4 	movi	r3,7
   88d70:	1901930e 	bge	r3,r4,893c0 <___vfiprintf_internal_r+0xc20>
   88d74:	1002431e 	bne	r2,zero,89684 <___vfiprintf_internal_r+0xee4>
   88d78:	d8001b15 	stw	zero,108(sp)
   88d7c:	9480010c 	andi	r18,r18,4
   88d80:	9002391e 	bne	r18,zero,89668 <___vfiprintf_internal_r+0xec8>
   88d84:	d8802417 	ldw	r2,144(sp)
   88d88:	a880010e 	bge	r21,r2,88d90 <___vfiprintf_internal_r+0x5f0>
   88d8c:	102b883a 	mov	r21,r2
   88d90:	d8c02517 	ldw	r3,148(sp)
   88d94:	1d47883a 	add	r3,r3,r21
   88d98:	d8c02515 	stw	r3,148(sp)
   88d9c:	0001cd06 	br	894d4 <___vfiprintf_internal_r+0xd34>
   88da0:	d9002217 	ldw	r4,136(sp)
   88da4:	d9402117 	ldw	r5,132(sp)
   88da8:	00833f00 	call	833f0 <__swsetup_r>
   88dac:	10000e1e 	bne	r2,zero,88de8 <___vfiprintf_internal_r+0x648>
   88db0:	d9402117 	ldw	r5,132(sp)
   88db4:	00c00284 	movi	r3,10
   88db8:	2880030b 	ldhu	r2,12(r5)
   88dbc:	1080068c 	andi	r2,r2,26
   88dc0:	10fe9c1e 	bne	r2,r3,88834 <__alt_data_end+0xfffbf454>
   88dc4:	d8c02117 	ldw	r3,132(sp)
   88dc8:	1880038f 	ldh	r2,14(r3)
   88dcc:	103e9916 	blt	r2,zero,88834 <__alt_data_end+0xfffbf454>
   88dd0:	d9002217 	ldw	r4,136(sp)
   88dd4:	d9c02317 	ldw	r7,140(sp)
   88dd8:	180b883a 	mov	r5,r3
   88ddc:	980d883a 	mov	r6,r19
   88de0:	0089ab40 	call	89ab4 <__sbprintf>
   88de4:	00000106 	br	88dec <___vfiprintf_internal_r+0x64c>
   88de8:	00bfffc4 	movi	r2,-1
   88dec:	dfc03517 	ldw	ra,212(sp)
   88df0:	df003417 	ldw	fp,208(sp)
   88df4:	ddc03317 	ldw	r23,204(sp)
   88df8:	dd803217 	ldw	r22,200(sp)
   88dfc:	dd403117 	ldw	r21,196(sp)
   88e00:	dd003017 	ldw	r20,192(sp)
   88e04:	dcc02f17 	ldw	r19,188(sp)
   88e08:	dc802e17 	ldw	r18,184(sp)
   88e0c:	dc402d17 	ldw	r17,180(sp)
   88e10:	dc002c17 	ldw	r16,176(sp)
   88e14:	dec03604 	addi	sp,sp,216
   88e18:	f800283a 	ret
   88e1c:	00854880 	call	85488 <__sinit>
   88e20:	003e7106 	br	887e8 <__alt_data_end+0xfffbf408>
   88e24:	b005883a 	mov	r2,r22
   88e28:	94800114 	ori	r18,r18,4
   88e2c:	b1800007 	ldb	r6,0(r22)
   88e30:	003eb706 	br	88910 <__alt_data_end+0xfffbf530>
   88e34:	9806d0fa 	srli	r3,r19,3
   88e38:	b808977a 	slli	r4,r23,29
   88e3c:	b82ed0fa 	srli	r23,r23,3
   88e40:	9cc001cc 	andi	r19,r19,7
   88e44:	98800c04 	addi	r2,r19,48
   88e48:	e73fffc4 	addi	fp,fp,-1
   88e4c:	20e6b03a 	or	r19,r4,r3
   88e50:	e0800005 	stb	r2,0(fp)
   88e54:	9dc6b03a 	or	r3,r19,r23
   88e58:	183ff61e 	bne	r3,zero,88e34 <__alt_data_end+0xfffbfa54>
   88e5c:	90c0004c 	andi	r3,r18,1
   88e60:	e009883a 	mov	r4,fp
   88e64:	183f4426 	beq	r3,zero,88b78 <__alt_data_end+0xfffbf798>
   88e68:	10803fcc 	andi	r2,r2,255
   88e6c:	1080201c 	xori	r2,r2,128
   88e70:	10bfe004 	addi	r2,r2,-128
   88e74:	00c00c04 	movi	r3,48
   88e78:	10ff3f26 	beq	r2,r3,88b78 <__alt_data_end+0xfffbf798>
   88e7c:	20ffffc5 	stb	r3,-1(r4)
   88e80:	d8c01e17 	ldw	r3,120(sp)
   88e84:	e73fffc4 	addi	fp,fp,-1
   88e88:	1f07c83a 	sub	r3,r3,fp
   88e8c:	d8c02015 	stw	r3,128(sp)
   88e90:	003f3c06 	br	88b84 <__alt_data_end+0xfffbf7a4>
   88e94:	d8c02003 	ldbu	r3,128(sp)
   88e98:	01000274 	movhi	r4,9
   88e9c:	2103bc04 	addi	r4,r4,3824
   88ea0:	d8c01d85 	stb	r3,118(sp)
   88ea4:	d9002715 	stw	r4,156(sp)
   88ea8:	9080080c 	andi	r2,r18,32
   88eac:	1000a926 	beq	r2,zero,89154 <___vfiprintf_internal_r+0x9b4>
   88eb0:	d9002317 	ldw	r4,140(sp)
   88eb4:	24c00017 	ldw	r19,0(r4)
   88eb8:	25c00117 	ldw	r23,4(r4)
   88ebc:	21000204 	addi	r4,r4,8
   88ec0:	d9002315 	stw	r4,140(sp)
   88ec4:	9080004c 	andi	r2,r18,1
   88ec8:	1001f626 	beq	r2,zero,896a4 <___vfiprintf_internal_r+0xf04>
   88ecc:	9dc6b03a 	or	r3,r19,r23
   88ed0:	18023d26 	beq	r3,zero,897c8 <___vfiprintf_internal_r+0x1028>
   88ed4:	00800c04 	movi	r2,48
   88ed8:	d8801d05 	stb	r2,116(sp)
   88edc:	d9801d45 	stb	r6,117(sp)
   88ee0:	94800094 	ori	r18,r18,2
   88ee4:	00800084 	movi	r2,2
   88ee8:	003f0906 	br	88b10 <__alt_data_end+0xfffbf730>
   88eec:	d9002317 	ldw	r4,140(sp)
   88ef0:	05400044 	movi	r21,1
   88ef4:	d8001d85 	stb	zero,118(sp)
   88ef8:	20800017 	ldw	r2,0(r4)
   88efc:	21000104 	addi	r4,r4,4
   88f00:	d9002315 	stw	r4,140(sp)
   88f04:	d8801005 	stb	r2,64(sp)
   88f08:	dd402015 	stw	r21,128(sp)
   88f0c:	df001004 	addi	fp,sp,64
   88f10:	0021883a 	mov	r16,zero
   88f14:	003f2306 	br	88ba4 <__alt_data_end+0xfffbf7c4>
   88f18:	94802014 	ori	r18,r18,128
   88f1c:	b005883a 	mov	r2,r22
   88f20:	b1800007 	ldb	r6,0(r22)
   88f24:	003e7a06 	br	88910 <__alt_data_end+0xfffbf530>
   88f28:	b039883a 	mov	fp,r22
   88f2c:	d8002415 	stw	zero,144(sp)
   88f30:	35fff404 	addi	r23,r6,-48
   88f34:	0009883a 	mov	r4,zero
   88f38:	01400284 	movi	r5,10
   88f3c:	008b0d80 	call	8b0d8 <__mulsi3>
   88f40:	e1800007 	ldb	r6,0(fp)
   88f44:	15c9883a 	add	r4,r2,r23
   88f48:	b5800044 	addi	r22,r22,1
   88f4c:	35fff404 	addi	r23,r6,-48
   88f50:	b039883a 	mov	fp,r22
   88f54:	9dfff82e 	bgeu	r19,r23,88f38 <__alt_data_end+0xfffbfb58>
   88f58:	d9002415 	stw	r4,144(sp)
   88f5c:	003e6d06 	br	88914 <__alt_data_end+0xfffbf534>
   88f60:	d8c02003 	ldbu	r3,128(sp)
   88f64:	94800414 	ori	r18,r18,16
   88f68:	9080080c 	andi	r2,r18,32
   88f6c:	d8c01d85 	stb	r3,118(sp)
   88f70:	d8c02317 	ldw	r3,140(sp)
   88f74:	10005526 	beq	r2,zero,890cc <___vfiprintf_internal_r+0x92c>
   88f78:	d9002317 	ldw	r4,140(sp)
   88f7c:	18800117 	ldw	r2,4(r3)
   88f80:	1cc00017 	ldw	r19,0(r3)
   88f84:	21000204 	addi	r4,r4,8
   88f88:	d9002315 	stw	r4,140(sp)
   88f8c:	102f883a 	mov	r23,r2
   88f90:	1001f716 	blt	r2,zero,89770 <___vfiprintf_internal_r+0xfd0>
   88f94:	da801d83 	ldbu	r10,118(sp)
   88f98:	dc002015 	stw	r16,128(sp)
   88f9c:	00800044 	movi	r2,1
   88fa0:	9dc6b03a 	or	r3,r19,r23
   88fa4:	003edd06 	br	88b1c <__alt_data_end+0xfffbf73c>
   88fa8:	b1800007 	ldb	r6,0(r22)
   88fac:	01000a84 	movi	r4,42
   88fb0:	b0800044 	addi	r2,r22,1
   88fb4:	3102ae26 	beq	r6,r4,89a70 <___vfiprintf_internal_r+0x12d0>
   88fb8:	35fff404 	addi	r23,r6,-48
   88fbc:	102d883a 	mov	r22,r2
   88fc0:	0021883a 	mov	r16,zero
   88fc4:	9dfe5336 	bltu	r19,r23,88914 <__alt_data_end+0xfffbf534>
   88fc8:	0009883a 	mov	r4,zero
   88fcc:	01400284 	movi	r5,10
   88fd0:	008b0d80 	call	8b0d8 <__mulsi3>
   88fd4:	b1800007 	ldb	r6,0(r22)
   88fd8:	b889883a 	add	r4,r23,r2
   88fdc:	b5800044 	addi	r22,r22,1
   88fe0:	35fff404 	addi	r23,r6,-48
   88fe4:	9dfff92e 	bgeu	r19,r23,88fcc <__alt_data_end+0xfffbfbec>
   88fe8:	2021883a 	mov	r16,r4
   88fec:	203e490e 	bge	r4,zero,88914 <__alt_data_end+0xfffbf534>
   88ff0:	043fffc4 	movi	r16,-1
   88ff4:	003e4706 	br	88914 <__alt_data_end+0xfffbf534>
   88ff8:	d8c02003 	ldbu	r3,128(sp)
   88ffc:	9080080c 	andi	r2,r18,32
   89000:	d8c01d85 	stb	r3,118(sp)
   89004:	10020e26 	beq	r2,zero,89840 <___vfiprintf_internal_r+0x10a0>
   89008:	d9002317 	ldw	r4,140(sp)
   8900c:	d9402517 	ldw	r5,148(sp)
   89010:	20800017 	ldw	r2,0(r4)
   89014:	2807d7fa 	srai	r3,r5,31
   89018:	21000104 	addi	r4,r4,4
   8901c:	d9002315 	stw	r4,140(sp)
   89020:	11400015 	stw	r5,0(r2)
   89024:	10c00115 	stw	r3,4(r2)
   89028:	003e1106 	br	88870 <__alt_data_end+0xfffbf490>
   8902c:	d8802317 	ldw	r2,140(sp)
   89030:	d8c02317 	ldw	r3,140(sp)
   89034:	14c00017 	ldw	r19,0(r2)
   89038:	15c00117 	ldw	r23,4(r2)
   8903c:	18c00204 	addi	r3,r3,8
   89040:	d8c02315 	stw	r3,140(sp)
   89044:	0005883a 	mov	r2,zero
   89048:	9dc6b03a 	or	r3,r19,r23
   8904c:	003eb006 	br	88b10 <__alt_data_end+0xfffbf730>
   89050:	d8802007 	ldb	r2,128(sp)
   89054:	1001d91e 	bne	r2,zero,897bc <___vfiprintf_internal_r+0x101c>
   89058:	00c00804 	movi	r3,32
   8905c:	d8c02005 	stb	r3,128(sp)
   89060:	b005883a 	mov	r2,r22
   89064:	b1800007 	ldb	r6,0(r22)
   89068:	003e2906 	br	88910 <__alt_data_end+0xfffbf530>
   8906c:	94800054 	ori	r18,r18,1
   89070:	b005883a 	mov	r2,r22
   89074:	b1800007 	ldb	r6,0(r22)
   89078:	003e2506 	br	88910 <__alt_data_end+0xfffbf530>
   8907c:	d9002317 	ldw	r4,140(sp)
   89080:	d9402317 	ldw	r5,140(sp)
   89084:	21000017 	ldw	r4,0(r4)
   89088:	28c00104 	addi	r3,r5,4
   8908c:	d9002415 	stw	r4,144(sp)
   89090:	20023b16 	blt	r4,zero,89980 <___vfiprintf_internal_r+0x11e0>
   89094:	d8c02315 	stw	r3,140(sp)
   89098:	b005883a 	mov	r2,r22
   8909c:	b1800007 	ldb	r6,0(r22)
   890a0:	003e1b06 	br	88910 <__alt_data_end+0xfffbf530>
   890a4:	00c00ac4 	movi	r3,43
   890a8:	d8c02005 	stb	r3,128(sp)
   890ac:	b005883a 	mov	r2,r22
   890b0:	b1800007 	ldb	r6,0(r22)
   890b4:	003e1606 	br	88910 <__alt_data_end+0xfffbf530>
   890b8:	d8c02003 	ldbu	r3,128(sp)
   890bc:	9080080c 	andi	r2,r18,32
   890c0:	d8c01d85 	stb	r3,118(sp)
   890c4:	d8c02317 	ldw	r3,140(sp)
   890c8:	103fab1e 	bne	r2,zero,88f78 <__alt_data_end+0xfffbfb98>
   890cc:	9080040c 	andi	r2,r18,16
   890d0:	1001e626 	beq	r2,zero,8986c <___vfiprintf_internal_r+0x10cc>
   890d4:	1cc00017 	ldw	r19,0(r3)
   890d8:	d9402317 	ldw	r5,140(sp)
   890dc:	982fd7fa 	srai	r23,r19,31
   890e0:	29400104 	addi	r5,r5,4
   890e4:	d9402315 	stw	r5,140(sp)
   890e8:	b805883a 	mov	r2,r23
   890ec:	003fa806 	br	88f90 <__alt_data_end+0xfffbfbb0>
   890f0:	d9402317 	ldw	r5,140(sp)
   890f4:	d8001d85 	stb	zero,118(sp)
   890f8:	2f000017 	ldw	fp,0(r5)
   890fc:	2cc00104 	addi	r19,r5,4
   89100:	e0023826 	beq	fp,zero,899e4 <___vfiprintf_internal_r+0x1244>
   89104:	e009883a 	mov	r4,fp
   89108:	80022316 	blt	r16,zero,89998 <___vfiprintf_internal_r+0x11f8>
   8910c:	000b883a 	mov	r5,zero
   89110:	800d883a 	mov	r6,r16
   89114:	00869800 	call	86980 <memchr>
   89118:	10024e26 	beq	r2,zero,89a54 <___vfiprintf_internal_r+0x12b4>
   8911c:	1705c83a 	sub	r2,r2,fp
   89120:	d8802015 	stw	r2,128(sp)
   89124:	8081e816 	blt	r16,r2,898c8 <___vfiprintf_internal_r+0x1128>
   89128:	da801d83 	ldbu	r10,118(sp)
   8912c:	dcc02315 	stw	r19,140(sp)
   89130:	0021883a 	mov	r16,zero
   89134:	003e9306 	br	88b84 <__alt_data_end+0xfffbf7a4>
   89138:	00c00274 	movhi	r3,9
   8913c:	18c3c104 	addi	r3,r3,3844
   89140:	d8c02715 	stw	r3,156(sp)
   89144:	d8c02003 	ldbu	r3,128(sp)
   89148:	9080080c 	andi	r2,r18,32
   8914c:	d8c01d85 	stb	r3,118(sp)
   89150:	103f571e 	bne	r2,zero,88eb0 <__alt_data_end+0xfffbfad0>
   89154:	9080040c 	andi	r2,r18,16
   89158:	1001b126 	beq	r2,zero,89820 <___vfiprintf_internal_r+0x1080>
   8915c:	d9402317 	ldw	r5,140(sp)
   89160:	002f883a 	mov	r23,zero
   89164:	2cc00017 	ldw	r19,0(r5)
   89168:	29400104 	addi	r5,r5,4
   8916c:	d9402315 	stw	r5,140(sp)
   89170:	003f5406 	br	88ec4 <__alt_data_end+0xfffbfae4>
   89174:	94801014 	ori	r18,r18,64
   89178:	b005883a 	mov	r2,r22
   8917c:	b1800007 	ldb	r6,0(r22)
   89180:	003de306 	br	88910 <__alt_data_end+0xfffbf530>
   89184:	b1800007 	ldb	r6,0(r22)
   89188:	00c01b04 	movi	r3,108
   8918c:	b005883a 	mov	r2,r22
   89190:	30c1f726 	beq	r6,r3,89970 <___vfiprintf_internal_r+0x11d0>
   89194:	94800414 	ori	r18,r18,16
   89198:	003ddd06 	br	88910 <__alt_data_end+0xfffbf530>
   8919c:	d8c02317 	ldw	r3,140(sp)
   891a0:	00800c04 	movi	r2,48
   891a4:	01000274 	movhi	r4,9
   891a8:	1cc00017 	ldw	r19,0(r3)
   891ac:	d8801d05 	stb	r2,116(sp)
   891b0:	18c00104 	addi	r3,r3,4
   891b4:	00801e04 	movi	r2,120
   891b8:	2103c104 	addi	r4,r4,3844
   891bc:	d8801d45 	stb	r2,117(sp)
   891c0:	d8c02315 	stw	r3,140(sp)
   891c4:	002f883a 	mov	r23,zero
   891c8:	94800094 	ori	r18,r18,2
   891cc:	d9002715 	stw	r4,156(sp)
   891d0:	00800084 	movi	r2,2
   891d4:	9807883a 	mov	r3,r19
   891d8:	003e4d06 	br	88b10 <__alt_data_end+0xfffbf730>
   891dc:	94800814 	ori	r18,r18,32
   891e0:	b005883a 	mov	r2,r22
   891e4:	b1800007 	ldb	r6,0(r22)
   891e8:	003dc906 	br	88910 <__alt_data_end+0xfffbf530>
   891ec:	d8802317 	ldw	r2,140(sp)
   891f0:	d8c02317 	ldw	r3,140(sp)
   891f4:	14c00017 	ldw	r19,0(r2)
   891f8:	15c00117 	ldw	r23,4(r2)
   891fc:	18c00204 	addi	r3,r3,8
   89200:	d8c02315 	stw	r3,140(sp)
   89204:	00800044 	movi	r2,1
   89208:	9dc6b03a 	or	r3,r19,r23
   8920c:	003e4006 	br	88b10 <__alt_data_end+0xfffbf730>
   89210:	d8c02003 	ldbu	r3,128(sp)
   89214:	d8c01d85 	stb	r3,118(sp)
   89218:	30005526 	beq	r6,zero,89370 <___vfiprintf_internal_r+0xbd0>
   8921c:	05400044 	movi	r21,1
   89220:	d9801005 	stb	r6,64(sp)
   89224:	d8001d85 	stb	zero,118(sp)
   89228:	dd402015 	stw	r21,128(sp)
   8922c:	df001004 	addi	fp,sp,64
   89230:	003f3706 	br	88f10 <__alt_data_end+0xfffbfb30>
   89234:	d9002217 	ldw	r4,136(sp)
   89238:	d9402117 	ldw	r5,132(sp)
   8923c:	d9801a04 	addi	r6,sp,104
   89240:	d8c02a15 	stw	r3,168(sp)
   89244:	dac02b15 	stw	r11,172(sp)
   89248:	008868c0 	call	8868c <__sprint_r.part.0>
   8924c:	d8c02a17 	ldw	r3,168(sp)
   89250:	dac02b17 	ldw	r11,172(sp)
   89254:	10004c1e 	bne	r2,zero,89388 <___vfiprintf_internal_r+0xbe8>
   89258:	d9801b17 	ldw	r6,108(sp)
   8925c:	d8801c17 	ldw	r2,112(sp)
   89260:	d829883a 	mov	r20,sp
   89264:	31400044 	addi	r5,r6,1
   89268:	003e6506 	br	88c00 <__alt_data_end+0xfffbf820>
   8926c:	d9401b17 	ldw	r5,108(sp)
   89270:	d8801c17 	ldw	r2,112(sp)
   89274:	29000044 	addi	r4,r5,1
   89278:	d8c01d87 	ldb	r3,118(sp)
   8927c:	183e8026 	beq	r3,zero,88c80 <__alt_data_end+0xfffbf8a0>
   89280:	00c00044 	movi	r3,1
   89284:	d9401d84 	addi	r5,sp,118
   89288:	10c5883a 	add	r2,r2,r3
   8928c:	a1400015 	stw	r5,0(r20)
   89290:	a0c00115 	stw	r3,4(r20)
   89294:	d8801c15 	stw	r2,112(sp)
   89298:	d9001b15 	stw	r4,108(sp)
   8929c:	014001c4 	movi	r5,7
   892a0:	2900cd16 	blt	r5,r4,895d8 <___vfiprintf_internal_r+0xe38>
   892a4:	200b883a 	mov	r5,r4
   892a8:	a5000204 	addi	r20,r20,8
   892ac:	21000044 	addi	r4,r4,1
   892b0:	003e7306 	br	88c80 <__alt_data_end+0xfffbf8a0>
   892b4:	d9002217 	ldw	r4,136(sp)
   892b8:	d9402117 	ldw	r5,132(sp)
   892bc:	d9801a04 	addi	r6,sp,104
   892c0:	008868c0 	call	8868c <__sprint_r.part.0>
   892c4:	1000301e 	bne	r2,zero,89388 <___vfiprintf_internal_r+0xbe8>
   892c8:	d9401b17 	ldw	r5,108(sp)
   892cc:	d8801c17 	ldw	r2,112(sp)
   892d0:	d829883a 	mov	r20,sp
   892d4:	29000044 	addi	r4,r5,1
   892d8:	003e8506 	br	88cf0 <__alt_data_end+0xfffbf910>
   892dc:	10803fcc 	andi	r2,r2,255
   892e0:	00c00044 	movi	r3,1
   892e4:	10fe151e 	bne	r2,r3,88b3c <__alt_data_end+0xfffbf75c>
   892e8:	b800021e 	bne	r23,zero,892f4 <___vfiprintf_internal_r+0xb54>
   892ec:	00800244 	movi	r2,9
   892f0:	14c0192e 	bgeu	r2,r19,89358 <___vfiprintf_internal_r+0xbb8>
   892f4:	dd401a04 	addi	r21,sp,104
   892f8:	5039883a 	mov	fp,r10
   892fc:	9809883a 	mov	r4,r19
   89300:	b80b883a 	mov	r5,r23
   89304:	01800284 	movi	r6,10
   89308:	000f883a 	mov	r7,zero
   8930c:	008aabc0 	call	8aabc <__umoddi3>
   89310:	10800c04 	addi	r2,r2,48
   89314:	ad7fffc4 	addi	r21,r21,-1
   89318:	9809883a 	mov	r4,r19
   8931c:	b80b883a 	mov	r5,r23
   89320:	01800284 	movi	r6,10
   89324:	000f883a 	mov	r7,zero
   89328:	a8800005 	stb	r2,0(r21)
   8932c:	008a47c0 	call	8a47c <__udivdi3>
   89330:	1027883a 	mov	r19,r2
   89334:	10c4b03a 	or	r2,r2,r3
   89338:	182f883a 	mov	r23,r3
   8933c:	103fef1e 	bne	r2,zero,892fc <__alt_data_end+0xfffbff1c>
   89340:	d8c01e17 	ldw	r3,120(sp)
   89344:	e015883a 	mov	r10,fp
   89348:	a839883a 	mov	fp,r21
   8934c:	1d47c83a 	sub	r3,r3,r21
   89350:	d8c02015 	stw	r3,128(sp)
   89354:	003e0b06 	br	88b84 <__alt_data_end+0xfffbf7a4>
   89358:	d9002817 	ldw	r4,160(sp)
   8935c:	9cc00c04 	addi	r19,r19,48
   89360:	dcc019c5 	stb	r19,103(sp)
   89364:	d9002015 	stw	r4,128(sp)
   89368:	df0019c4 	addi	fp,sp,103
   8936c:	003e0506 	br	88b84 <__alt_data_end+0xfffbf7a4>
   89370:	d8801c17 	ldw	r2,112(sp)
   89374:	10000426 	beq	r2,zero,89388 <___vfiprintf_internal_r+0xbe8>
   89378:	d9002217 	ldw	r4,136(sp)
   8937c:	d9402117 	ldw	r5,132(sp)
   89380:	d9801a04 	addi	r6,sp,104
   89384:	008868c0 	call	8868c <__sprint_r.part.0>
   89388:	d8c02117 	ldw	r3,132(sp)
   8938c:	1880030b 	ldhu	r2,12(r3)
   89390:	1080100c 	andi	r2,r2,64
   89394:	103e941e 	bne	r2,zero,88de8 <__alt_data_end+0xfffbfa08>
   89398:	d8802517 	ldw	r2,148(sp)
   8939c:	003e9306 	br	88dec <__alt_data_end+0xfffbfa0c>
   893a0:	1000e91e 	bne	r2,zero,89748 <___vfiprintf_internal_r+0xfa8>
   893a4:	d8802017 	ldw	r2,128(sp)
   893a8:	00c00044 	movi	r3,1
   893ac:	df000015 	stw	fp,0(sp)
   893b0:	d8800115 	stw	r2,4(sp)
   893b4:	d8801c15 	stw	r2,112(sp)
   893b8:	d8c01b15 	stw	r3,108(sp)
   893bc:	d829883a 	mov	r20,sp
   893c0:	a2000204 	addi	r8,r20,8
   893c4:	9480010c 	andi	r18,r18,4
   893c8:	90003626 	beq	r18,zero,894a4 <___vfiprintf_internal_r+0xd04>
   893cc:	d9002417 	ldw	r4,144(sp)
   893d0:	2565c83a 	sub	r18,r4,r21
   893d4:	0480330e 	bge	zero,r18,894a4 <___vfiprintf_internal_r+0xd04>
   893d8:	04000404 	movi	r16,16
   893dc:	84818b0e 	bge	r16,r18,89a0c <___vfiprintf_internal_r+0x126c>
   893e0:	00c00274 	movhi	r3,9
   893e4:	18c42604 	addi	r3,r3,4248
   893e8:	d9001b17 	ldw	r4,108(sp)
   893ec:	d8c02615 	stw	r3,152(sp)
   893f0:	04c001c4 	movi	r19,7
   893f4:	dd002217 	ldw	r20,136(sp)
   893f8:	ddc02117 	ldw	r23,132(sp)
   893fc:	00000506 	br	89414 <___vfiprintf_internal_r+0xc74>
   89400:	21400084 	addi	r5,r4,2
   89404:	42000204 	addi	r8,r8,8
   89408:	1809883a 	mov	r4,r3
   8940c:	94bffc04 	addi	r18,r18,-16
   89410:	84800f0e 	bge	r16,r18,89450 <___vfiprintf_internal_r+0xcb0>
   89414:	01400274 	movhi	r5,9
   89418:	10800404 	addi	r2,r2,16
   8941c:	20c00044 	addi	r3,r4,1
   89420:	29442604 	addi	r5,r5,4248
   89424:	41400015 	stw	r5,0(r8)
   89428:	44000115 	stw	r16,4(r8)
   8942c:	d8801c15 	stw	r2,112(sp)
   89430:	d8c01b15 	stw	r3,108(sp)
   89434:	98fff20e 	bge	r19,r3,89400 <__alt_data_end+0xfffc0020>
   89438:	1000291e 	bne	r2,zero,894e0 <___vfiprintf_internal_r+0xd40>
   8943c:	94bffc04 	addi	r18,r18,-16
   89440:	01400044 	movi	r5,1
   89444:	0009883a 	mov	r4,zero
   89448:	d811883a 	mov	r8,sp
   8944c:	84bff116 	blt	r16,r18,89414 <__alt_data_end+0xfffc0034>
   89450:	d8c02617 	ldw	r3,152(sp)
   89454:	1485883a 	add	r2,r2,r18
   89458:	44800115 	stw	r18,4(r8)
   8945c:	40c00015 	stw	r3,0(r8)
   89460:	d8801c15 	stw	r2,112(sp)
   89464:	d9401b15 	stw	r5,108(sp)
   89468:	00c001c4 	movi	r3,7
   8946c:	19400d0e 	bge	r3,r5,894a4 <___vfiprintf_internal_r+0xd04>
   89470:	1000061e 	bne	r2,zero,8948c <___vfiprintf_internal_r+0xcec>
   89474:	d9002417 	ldw	r4,144(sp)
   89478:	a9011116 	blt	r21,r4,898c0 <___vfiprintf_internal_r+0x1120>
   8947c:	d9402517 	ldw	r5,148(sp)
   89480:	2d4b883a 	add	r5,r5,r21
   89484:	d9402515 	stw	r5,148(sp)
   89488:	00001206 	br	894d4 <___vfiprintf_internal_r+0xd34>
   8948c:	d9002217 	ldw	r4,136(sp)
   89490:	d9402117 	ldw	r5,132(sp)
   89494:	d9801a04 	addi	r6,sp,104
   89498:	008868c0 	call	8868c <__sprint_r.part.0>
   8949c:	103fba1e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   894a0:	d8801c17 	ldw	r2,112(sp)
   894a4:	d9002417 	ldw	r4,144(sp)
   894a8:	a900010e 	bge	r21,r4,894b0 <___vfiprintf_internal_r+0xd10>
   894ac:	202b883a 	mov	r21,r4
   894b0:	d9402517 	ldw	r5,148(sp)
   894b4:	2d4b883a 	add	r5,r5,r21
   894b8:	d9402515 	stw	r5,148(sp)
   894bc:	10000526 	beq	r2,zero,894d4 <___vfiprintf_internal_r+0xd34>
   894c0:	d9002217 	ldw	r4,136(sp)
   894c4:	d9402117 	ldw	r5,132(sp)
   894c8:	d9801a04 	addi	r6,sp,104
   894cc:	008868c0 	call	8868c <__sprint_r.part.0>
   894d0:	103fad1e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   894d4:	d8001b15 	stw	zero,108(sp)
   894d8:	d829883a 	mov	r20,sp
   894dc:	003ce406 	br	88870 <__alt_data_end+0xfffbf490>
   894e0:	a009883a 	mov	r4,r20
   894e4:	b80b883a 	mov	r5,r23
   894e8:	d9801a04 	addi	r6,sp,104
   894ec:	008868c0 	call	8868c <__sprint_r.part.0>
   894f0:	103fa51e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   894f4:	d9001b17 	ldw	r4,108(sp)
   894f8:	d8801c17 	ldw	r2,112(sp)
   894fc:	d811883a 	mov	r8,sp
   89500:	21400044 	addi	r5,r4,1
   89504:	003fc106 	br	8940c <__alt_data_end+0xfffc002c>
   89508:	d8c02417 	ldw	r3,144(sp)
   8950c:	1d6fc83a 	sub	r23,r3,r21
   89510:	05fdea0e 	bge	zero,r23,88cbc <__alt_data_end+0xfffbf8dc>
   89514:	04c00404 	movi	r19,16
   89518:	9dc1490e 	bge	r19,r23,89a40 <___vfiprintf_internal_r+0x12a0>
   8951c:	01000274 	movhi	r4,9
   89520:	21042204 	addi	r4,r4,4232
   89524:	d9002615 	stw	r4,152(sp)
   89528:	028001c4 	movi	r10,7
   8952c:	00000506 	br	89544 <___vfiprintf_internal_r+0xda4>
   89530:	29800084 	addi	r6,r5,2
   89534:	a5000204 	addi	r20,r20,8
   89538:	180b883a 	mov	r5,r3
   8953c:	bdfffc04 	addi	r23,r23,-16
   89540:	9dc00d0e 	bge	r19,r23,89578 <___vfiprintf_internal_r+0xdd8>
   89544:	10800404 	addi	r2,r2,16
   89548:	28c00044 	addi	r3,r5,1
   8954c:	a4400015 	stw	r17,0(r20)
   89550:	a4c00115 	stw	r19,4(r20)
   89554:	d8801c15 	stw	r2,112(sp)
   89558:	d8c01b15 	stw	r3,108(sp)
   8955c:	50fff40e 	bge	r10,r3,89530 <__alt_data_end+0xfffc0150>
   89560:	1000111e 	bne	r2,zero,895a8 <___vfiprintf_internal_r+0xe08>
   89564:	bdfffc04 	addi	r23,r23,-16
   89568:	01800044 	movi	r6,1
   8956c:	000b883a 	mov	r5,zero
   89570:	d829883a 	mov	r20,sp
   89574:	9dfff316 	blt	r19,r23,89544 <__alt_data_end+0xfffc0164>
   89578:	d8c02617 	ldw	r3,152(sp)
   8957c:	15c5883a 	add	r2,r2,r23
   89580:	a5c00115 	stw	r23,4(r20)
   89584:	a0c00015 	stw	r3,0(r20)
   89588:	d8801c15 	stw	r2,112(sp)
   8958c:	d9801b15 	stw	r6,108(sp)
   89590:	00c001c4 	movi	r3,7
   89594:	19806716 	blt	r3,r6,89734 <___vfiprintf_internal_r+0xf94>
   89598:	a5000204 	addi	r20,r20,8
   8959c:	31000044 	addi	r4,r6,1
   895a0:	300b883a 	mov	r5,r6
   895a4:	003dc506 	br	88cbc <__alt_data_end+0xfffbf8dc>
   895a8:	d9002217 	ldw	r4,136(sp)
   895ac:	d9402117 	ldw	r5,132(sp)
   895b0:	d9801a04 	addi	r6,sp,104
   895b4:	da802a15 	stw	r10,168(sp)
   895b8:	008868c0 	call	8868c <__sprint_r.part.0>
   895bc:	da802a17 	ldw	r10,168(sp)
   895c0:	103f711e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   895c4:	d9401b17 	ldw	r5,108(sp)
   895c8:	d8801c17 	ldw	r2,112(sp)
   895cc:	d829883a 	mov	r20,sp
   895d0:	29800044 	addi	r6,r5,1
   895d4:	003fd906 	br	8953c <__alt_data_end+0xfffc015c>
   895d8:	1000401e 	bne	r2,zero,896dc <___vfiprintf_internal_r+0xf3c>
   895dc:	38003b26 	beq	r7,zero,896cc <___vfiprintf_internal_r+0xf2c>
   895e0:	d9001d04 	addi	r4,sp,116
   895e4:	00800084 	movi	r2,2
   895e8:	d9000015 	stw	r4,0(sp)
   895ec:	d8800115 	stw	r2,4(sp)
   895f0:	1809883a 	mov	r4,r3
   895f4:	d829883a 	mov	r20,sp
   895f8:	003dab06 	br	88ca8 <__alt_data_end+0xfffbf8c8>
   895fc:	1000431e 	bne	r2,zero,8970c <___vfiprintf_internal_r+0xf6c>
   89600:	01000044 	movi	r4,1
   89604:	000b883a 	mov	r5,zero
   89608:	d829883a 	mov	r20,sp
   8960c:	003da906 	br	88cb4 <__alt_data_end+0xfffbf8d4>
   89610:	10803fcc 	andi	r2,r2,255
   89614:	1000081e 	bne	r2,zero,89638 <___vfiprintf_internal_r+0xe98>
   89618:	9080004c 	andi	r2,r18,1
   8961c:	10000626 	beq	r2,zero,89638 <___vfiprintf_internal_r+0xe98>
   89620:	d9002817 	ldw	r4,160(sp)
   89624:	00800c04 	movi	r2,48
   89628:	d88019c5 	stb	r2,103(sp)
   8962c:	d9002015 	stw	r4,128(sp)
   89630:	df0019c4 	addi	fp,sp,103
   89634:	003d5306 	br	88b84 <__alt_data_end+0xfffbf7a4>
   89638:	df001a04 	addi	fp,sp,104
   8963c:	003d5106 	br	88b84 <__alt_data_end+0xfffbf7a4>
   89640:	1000931e 	bne	r2,zero,89890 <___vfiprintf_internal_r+0x10f0>
   89644:	d8c01d87 	ldb	r3,118(sp)
   89648:	18005326 	beq	r3,zero,89798 <___vfiprintf_internal_r+0xff8>
   8964c:	00800044 	movi	r2,1
   89650:	d8c01d84 	addi	r3,sp,118
   89654:	1009883a 	mov	r4,r2
   89658:	d8c00015 	stw	r3,0(sp)
   8965c:	d8800115 	stw	r2,4(sp)
   89660:	d829883a 	mov	r20,sp
   89664:	003f0f06 	br	892a4 <__alt_data_end+0xfffbfec4>
   89668:	d8c02417 	ldw	r3,144(sp)
   8966c:	d811883a 	mov	r8,sp
   89670:	1d65c83a 	sub	r18,r3,r21
   89674:	04bf5816 	blt	zero,r18,893d8 <__alt_data_end+0xfffbfff8>
   89678:	003f7e06 	br	89474 <__alt_data_end+0xfffc0094>
   8967c:	b02b883a 	mov	r21,r22
   89680:	003c9806 	br	888e4 <__alt_data_end+0xfffbf504>
   89684:	d9002217 	ldw	r4,136(sp)
   89688:	d9402117 	ldw	r5,132(sp)
   8968c:	d9801a04 	addi	r6,sp,104
   89690:	008868c0 	call	8868c <__sprint_r.part.0>
   89694:	103f3c1e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   89698:	d8801c17 	ldw	r2,112(sp)
   8969c:	d811883a 	mov	r8,sp
   896a0:	003f4806 	br	893c4 <__alt_data_end+0xfffbffe4>
   896a4:	00800084 	movi	r2,2
   896a8:	9dc6b03a 	or	r3,r19,r23
   896ac:	003d1806 	br	88b10 <__alt_data_end+0xfffbf730>
   896b0:	d9002217 	ldw	r4,136(sp)
   896b4:	d9402117 	ldw	r5,132(sp)
   896b8:	d9801a04 	addi	r6,sp,104
   896bc:	008868c0 	call	8868c <__sprint_r.part.0>
   896c0:	103f311e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   896c4:	d829883a 	mov	r20,sp
   896c8:	003cf406 	br	88a9c <__alt_data_end+0xfffbf6bc>
   896cc:	000b883a 	mov	r5,zero
   896d0:	1809883a 	mov	r4,r3
   896d4:	d829883a 	mov	r20,sp
   896d8:	003d7606 	br	88cb4 <__alt_data_end+0xfffbf8d4>
   896dc:	d9002217 	ldw	r4,136(sp)
   896e0:	d9402117 	ldw	r5,132(sp)
   896e4:	d9801a04 	addi	r6,sp,104
   896e8:	d9c02a15 	stw	r7,168(sp)
   896ec:	008868c0 	call	8868c <__sprint_r.part.0>
   896f0:	d9c02a17 	ldw	r7,168(sp)
   896f4:	103f241e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   896f8:	d9401b17 	ldw	r5,108(sp)
   896fc:	d8801c17 	ldw	r2,112(sp)
   89700:	d829883a 	mov	r20,sp
   89704:	29000044 	addi	r4,r5,1
   89708:	003d5d06 	br	88c80 <__alt_data_end+0xfffbf8a0>
   8970c:	d9002217 	ldw	r4,136(sp)
   89710:	d9402117 	ldw	r5,132(sp)
   89714:	d9801a04 	addi	r6,sp,104
   89718:	008868c0 	call	8868c <__sprint_r.part.0>
   8971c:	103f1a1e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   89720:	d9401b17 	ldw	r5,108(sp)
   89724:	d8801c17 	ldw	r2,112(sp)
   89728:	d829883a 	mov	r20,sp
   8972c:	29000044 	addi	r4,r5,1
   89730:	003d6006 	br	88cb4 <__alt_data_end+0xfffbf8d4>
   89734:	10009b1e 	bne	r2,zero,899a4 <___vfiprintf_internal_r+0x1204>
   89738:	01000044 	movi	r4,1
   8973c:	000b883a 	mov	r5,zero
   89740:	d829883a 	mov	r20,sp
   89744:	003d5d06 	br	88cbc <__alt_data_end+0xfffbf8dc>
   89748:	d9002217 	ldw	r4,136(sp)
   8974c:	d9402117 	ldw	r5,132(sp)
   89750:	d9801a04 	addi	r6,sp,104
   89754:	008868c0 	call	8868c <__sprint_r.part.0>
   89758:	103f0b1e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   8975c:	d9001b17 	ldw	r4,108(sp)
   89760:	d8801c17 	ldw	r2,112(sp)
   89764:	d829883a 	mov	r20,sp
   89768:	21000044 	addi	r4,r4,1
   8976c:	003d7906 	br	88d54 <__alt_data_end+0xfffbf974>
   89770:	04e7c83a 	sub	r19,zero,r19
   89774:	9804c03a 	cmpne	r2,r19,zero
   89778:	05efc83a 	sub	r23,zero,r23
   8977c:	b8afc83a 	sub	r23,r23,r2
   89780:	02800b44 	movi	r10,45
   89784:	da801d85 	stb	r10,118(sp)
   89788:	dc002015 	stw	r16,128(sp)
   8978c:	00800044 	movi	r2,1
   89790:	9dc6b03a 	or	r3,r19,r23
   89794:	003ce106 	br	88b1c <__alt_data_end+0xfffbf73c>
   89798:	000b883a 	mov	r5,zero
   8979c:	01000044 	movi	r4,1
   897a0:	d829883a 	mov	r20,sp
   897a4:	383d4326 	beq	r7,zero,88cb4 <__alt_data_end+0xfffbf8d4>
   897a8:	00800084 	movi	r2,2
   897ac:	d8c01d04 	addi	r3,sp,116
   897b0:	d8c00015 	stw	r3,0(sp)
   897b4:	d8800115 	stw	r2,4(sp)
   897b8:	003d3b06 	br	88ca8 <__alt_data_end+0xfffbf8c8>
   897bc:	b1800007 	ldb	r6,0(r22)
   897c0:	b005883a 	mov	r2,r22
   897c4:	003c5206 	br	88910 <__alt_data_end+0xfffbf530>
   897c8:	00800084 	movi	r2,2
   897cc:	003cd006 	br	88b10 <__alt_data_end+0xfffbf730>
   897d0:	9080100c 	andi	r2,r18,64
   897d4:	10003e26 	beq	r2,zero,898d0 <___vfiprintf_internal_r+0x1130>
   897d8:	d9402317 	ldw	r5,140(sp)
   897dc:	002f883a 	mov	r23,zero
   897e0:	0005883a 	mov	r2,zero
   897e4:	2cc0000b 	ldhu	r19,0(r5)
   897e8:	29400104 	addi	r5,r5,4
   897ec:	d9402315 	stw	r5,140(sp)
   897f0:	9807883a 	mov	r3,r19
   897f4:	003cc606 	br	88b10 <__alt_data_end+0xfffbf730>
   897f8:	9080100c 	andi	r2,r18,64
   897fc:	10004226 	beq	r2,zero,89908 <___vfiprintf_internal_r+0x1168>
   89800:	d9402317 	ldw	r5,140(sp)
   89804:	002f883a 	mov	r23,zero
   89808:	00800044 	movi	r2,1
   8980c:	2cc0000b 	ldhu	r19,0(r5)
   89810:	29400104 	addi	r5,r5,4
   89814:	d9402315 	stw	r5,140(sp)
   89818:	9807883a 	mov	r3,r19
   8981c:	003cbc06 	br	88b10 <__alt_data_end+0xfffbf730>
   89820:	9080100c 	andi	r2,r18,64
   89824:	10003226 	beq	r2,zero,898f0 <___vfiprintf_internal_r+0x1150>
   89828:	d8802317 	ldw	r2,140(sp)
   8982c:	002f883a 	mov	r23,zero
   89830:	14c0000b 	ldhu	r19,0(r2)
   89834:	10800104 	addi	r2,r2,4
   89838:	d8802315 	stw	r2,140(sp)
   8983c:	003da106 	br	88ec4 <__alt_data_end+0xfffbfae4>
   89840:	9080040c 	andi	r2,r18,16
   89844:	10003f1e 	bne	r2,zero,89944 <___vfiprintf_internal_r+0x11a4>
   89848:	9480100c 	andi	r18,r18,64
   8984c:	90007526 	beq	r18,zero,89a24 <___vfiprintf_internal_r+0x1284>
   89850:	d9402317 	ldw	r5,140(sp)
   89854:	d8c02517 	ldw	r3,148(sp)
   89858:	28800017 	ldw	r2,0(r5)
   8985c:	29400104 	addi	r5,r5,4
   89860:	d9402315 	stw	r5,140(sp)
   89864:	10c0000d 	sth	r3,0(r2)
   89868:	003c0106 	br	88870 <__alt_data_end+0xfffbf490>
   8986c:	9080100c 	andi	r2,r18,64
   89870:	10002d26 	beq	r2,zero,89928 <___vfiprintf_internal_r+0x1188>
   89874:	1cc0000f 	ldh	r19,0(r3)
   89878:	d8802317 	ldw	r2,140(sp)
   8987c:	982fd7fa 	srai	r23,r19,31
   89880:	10800104 	addi	r2,r2,4
   89884:	d8802315 	stw	r2,140(sp)
   89888:	b805883a 	mov	r2,r23
   8988c:	003dc006 	br	88f90 <__alt_data_end+0xfffbfbb0>
   89890:	d9002217 	ldw	r4,136(sp)
   89894:	d9402117 	ldw	r5,132(sp)
   89898:	d9801a04 	addi	r6,sp,104
   8989c:	d9c02a15 	stw	r7,168(sp)
   898a0:	008868c0 	call	8868c <__sprint_r.part.0>
   898a4:	d9c02a17 	ldw	r7,168(sp)
   898a8:	103eb71e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   898ac:	d9401b17 	ldw	r5,108(sp)
   898b0:	d8801c17 	ldw	r2,112(sp)
   898b4:	d829883a 	mov	r20,sp
   898b8:	29000044 	addi	r4,r5,1
   898bc:	003e6e06 	br	89278 <__alt_data_end+0xfffbfe98>
   898c0:	202b883a 	mov	r21,r4
   898c4:	003eed06 	br	8947c <__alt_data_end+0xfffc009c>
   898c8:	dc002015 	stw	r16,128(sp)
   898cc:	003e1606 	br	89128 <__alt_data_end+0xfffbfd48>
   898d0:	d8802317 	ldw	r2,140(sp)
   898d4:	002f883a 	mov	r23,zero
   898d8:	14c00017 	ldw	r19,0(r2)
   898dc:	10800104 	addi	r2,r2,4
   898e0:	d8802315 	stw	r2,140(sp)
   898e4:	9807883a 	mov	r3,r19
   898e8:	0005883a 	mov	r2,zero
   898ec:	003c8806 	br	88b10 <__alt_data_end+0xfffbf730>
   898f0:	d8c02317 	ldw	r3,140(sp)
   898f4:	002f883a 	mov	r23,zero
   898f8:	1cc00017 	ldw	r19,0(r3)
   898fc:	18c00104 	addi	r3,r3,4
   89900:	d8c02315 	stw	r3,140(sp)
   89904:	003d6f06 	br	88ec4 <__alt_data_end+0xfffbfae4>
   89908:	d8802317 	ldw	r2,140(sp)
   8990c:	002f883a 	mov	r23,zero
   89910:	14c00017 	ldw	r19,0(r2)
   89914:	10800104 	addi	r2,r2,4
   89918:	d8802315 	stw	r2,140(sp)
   8991c:	9807883a 	mov	r3,r19
   89920:	00800044 	movi	r2,1
   89924:	003c7a06 	br	88b10 <__alt_data_end+0xfffbf730>
   89928:	1cc00017 	ldw	r19,0(r3)
   8992c:	d8c02317 	ldw	r3,140(sp)
   89930:	982fd7fa 	srai	r23,r19,31
   89934:	18c00104 	addi	r3,r3,4
   89938:	d8c02315 	stw	r3,140(sp)
   8993c:	b805883a 	mov	r2,r23
   89940:	003d9306 	br	88f90 <__alt_data_end+0xfffbfbb0>
   89944:	d8c02317 	ldw	r3,140(sp)
   89948:	d9002517 	ldw	r4,148(sp)
   8994c:	18800017 	ldw	r2,0(r3)
   89950:	18c00104 	addi	r3,r3,4
   89954:	d8c02315 	stw	r3,140(sp)
   89958:	11000015 	stw	r4,0(r2)
   8995c:	003bc406 	br	88870 <__alt_data_end+0xfffbf490>
   89960:	01400274 	movhi	r5,9
   89964:	29442204 	addi	r5,r5,4232
   89968:	d9402615 	stw	r5,152(sp)
   8996c:	003cef06 	br	88d2c <__alt_data_end+0xfffbf94c>
   89970:	b0800044 	addi	r2,r22,1
   89974:	94800814 	ori	r18,r18,32
   89978:	b1800047 	ldb	r6,1(r22)
   8997c:	003be406 	br	88910 <__alt_data_end+0xfffbf530>
   89980:	d8802417 	ldw	r2,144(sp)
   89984:	d8c02315 	stw	r3,140(sp)
   89988:	0085c83a 	sub	r2,zero,r2
   8998c:	d8802415 	stw	r2,144(sp)
   89990:	b005883a 	mov	r2,r22
   89994:	003d2406 	br	88e28 <__alt_data_end+0xfffbfa48>
   89998:	00812200 	call	81220 <strlen>
   8999c:	d8802015 	stw	r2,128(sp)
   899a0:	003de106 	br	89128 <__alt_data_end+0xfffbfd48>
   899a4:	d9002217 	ldw	r4,136(sp)
   899a8:	d9402117 	ldw	r5,132(sp)
   899ac:	d9801a04 	addi	r6,sp,104
   899b0:	008868c0 	call	8868c <__sprint_r.part.0>
   899b4:	103e741e 	bne	r2,zero,89388 <__alt_data_end+0xfffbffa8>
   899b8:	d9401b17 	ldw	r5,108(sp)
   899bc:	d8801c17 	ldw	r2,112(sp)
   899c0:	d829883a 	mov	r20,sp
   899c4:	29000044 	addi	r4,r5,1
   899c8:	003cbc06 	br	88cbc <__alt_data_end+0xfffbf8dc>
   899cc:	01400274 	movhi	r5,9
   899d0:	29442604 	addi	r5,r5,4248
   899d4:	d9402615 	stw	r5,152(sp)
   899d8:	d9401b17 	ldw	r5,108(sp)
   899dc:	29400044 	addi	r5,r5,1
   899e0:	003c9b06 	br	88c50 <__alt_data_end+0xfffbf870>
   899e4:	00800184 	movi	r2,6
   899e8:	1400012e 	bgeu	r2,r16,899f0 <___vfiprintf_internal_r+0x1250>
   899ec:	1021883a 	mov	r16,r2
   899f0:	dc002015 	stw	r16,128(sp)
   899f4:	802b883a 	mov	r21,r16
   899f8:	80001b16 	blt	r16,zero,89a68 <___vfiprintf_internal_r+0x12c8>
   899fc:	07000274 	movhi	fp,9
   89a00:	dcc02315 	stw	r19,140(sp)
   89a04:	e703c604 	addi	fp,fp,3864
   89a08:	003d4106 	br	88f10 <__alt_data_end+0xfffbfb30>
   89a0c:	01400274 	movhi	r5,9
   89a10:	29442604 	addi	r5,r5,4248
   89a14:	d9402615 	stw	r5,152(sp)
   89a18:	d9401b17 	ldw	r5,108(sp)
   89a1c:	29400044 	addi	r5,r5,1
   89a20:	003e8b06 	br	89450 <__alt_data_end+0xfffc0070>
   89a24:	d9002317 	ldw	r4,140(sp)
   89a28:	d9402517 	ldw	r5,148(sp)
   89a2c:	20800017 	ldw	r2,0(r4)
   89a30:	21000104 	addi	r4,r4,4
   89a34:	d9002315 	stw	r4,140(sp)
   89a38:	11400015 	stw	r5,0(r2)
   89a3c:	003b8c06 	br	88870 <__alt_data_end+0xfffbf490>
   89a40:	01400274 	movhi	r5,9
   89a44:	29442204 	addi	r5,r5,4232
   89a48:	d9402615 	stw	r5,152(sp)
   89a4c:	200d883a 	mov	r6,r4
   89a50:	003ec906 	br	89578 <__alt_data_end+0xfffc0198>
   89a54:	dc002015 	stw	r16,128(sp)
   89a58:	da801d83 	ldbu	r10,118(sp)
   89a5c:	dcc02315 	stw	r19,140(sp)
   89a60:	0021883a 	mov	r16,zero
   89a64:	003c4706 	br	88b84 <__alt_data_end+0xfffbf7a4>
   89a68:	002b883a 	mov	r21,zero
   89a6c:	003fe306 	br	899fc <__alt_data_end+0xfffc061c>
   89a70:	d9402317 	ldw	r5,140(sp)
   89a74:	2c000017 	ldw	r16,0(r5)
   89a78:	28c00104 	addi	r3,r5,4
   89a7c:	d8c02315 	stw	r3,140(sp)
   89a80:	803fbd0e 	bge	r16,zero,89978 <__alt_data_end+0xfffc0598>
   89a84:	043fffc4 	movi	r16,-1
   89a88:	b1800047 	ldb	r6,1(r22)
   89a8c:	003ba006 	br	88910 <__alt_data_end+0xfffbf530>

00089a90 <__vfiprintf_internal>:
   89a90:	2007883a 	mov	r3,r4
   89a94:	01000274 	movhi	r4,9
   89a98:	210b4704 	addi	r4,r4,11548
   89a9c:	21000017 	ldw	r4,0(r4)
   89aa0:	2805883a 	mov	r2,r5
   89aa4:	300f883a 	mov	r7,r6
   89aa8:	180b883a 	mov	r5,r3
   89aac:	100d883a 	mov	r6,r2
   89ab0:	00887a01 	jmpi	887a0 <___vfiprintf_internal_r>

00089ab4 <__sbprintf>:
   89ab4:	2880030b 	ldhu	r2,12(r5)
   89ab8:	2ac01917 	ldw	r11,100(r5)
   89abc:	2a80038b 	ldhu	r10,14(r5)
   89ac0:	2a400717 	ldw	r9,28(r5)
   89ac4:	2a000917 	ldw	r8,36(r5)
   89ac8:	defee204 	addi	sp,sp,-1144
   89acc:	00c10004 	movi	r3,1024
   89ad0:	dc011a15 	stw	r16,1128(sp)
   89ad4:	10bfff4c 	andi	r2,r2,65533
   89ad8:	2821883a 	mov	r16,r5
   89adc:	d8cb883a 	add	r5,sp,r3
   89ae0:	dc811c15 	stw	r18,1136(sp)
   89ae4:	dc411b15 	stw	r17,1132(sp)
   89ae8:	dfc11d15 	stw	ra,1140(sp)
   89aec:	2025883a 	mov	r18,r4
   89af0:	d881030d 	sth	r2,1036(sp)
   89af4:	dac11915 	stw	r11,1124(sp)
   89af8:	da81038d 	sth	r10,1038(sp)
   89afc:	da410715 	stw	r9,1052(sp)
   89b00:	da010915 	stw	r8,1060(sp)
   89b04:	dec10015 	stw	sp,1024(sp)
   89b08:	dec10415 	stw	sp,1040(sp)
   89b0c:	d8c10215 	stw	r3,1032(sp)
   89b10:	d8c10515 	stw	r3,1044(sp)
   89b14:	d8010615 	stw	zero,1048(sp)
   89b18:	00887a00 	call	887a0 <___vfiprintf_internal_r>
   89b1c:	1023883a 	mov	r17,r2
   89b20:	10000416 	blt	r2,zero,89b34 <__sbprintf+0x80>
   89b24:	9009883a 	mov	r4,r18
   89b28:	d9410004 	addi	r5,sp,1024
   89b2c:	008509c0 	call	8509c <_fflush_r>
   89b30:	10000d1e 	bne	r2,zero,89b68 <__sbprintf+0xb4>
   89b34:	d8c1030b 	ldhu	r3,1036(sp)
   89b38:	18c0100c 	andi	r3,r3,64
   89b3c:	18000326 	beq	r3,zero,89b4c <__sbprintf+0x98>
   89b40:	8080030b 	ldhu	r2,12(r16)
   89b44:	10801014 	ori	r2,r2,64
   89b48:	8080030d 	sth	r2,12(r16)
   89b4c:	8805883a 	mov	r2,r17
   89b50:	dfc11d17 	ldw	ra,1140(sp)
   89b54:	dc811c17 	ldw	r18,1136(sp)
   89b58:	dc411b17 	ldw	r17,1132(sp)
   89b5c:	dc011a17 	ldw	r16,1128(sp)
   89b60:	dec11e04 	addi	sp,sp,1144
   89b64:	f800283a 	ret
   89b68:	047fffc4 	movi	r17,-1
   89b6c:	003ff106 	br	89b34 <__alt_data_end+0xfffc0754>

00089b70 <_write_r>:
   89b70:	defffd04 	addi	sp,sp,-12
   89b74:	dc000015 	stw	r16,0(sp)
   89b78:	04000274 	movhi	r16,9
   89b7c:	dc400115 	stw	r17,4(sp)
   89b80:	84123704 	addi	r16,r16,18652
   89b84:	2023883a 	mov	r17,r4
   89b88:	2809883a 	mov	r4,r5
   89b8c:	300b883a 	mov	r5,r6
   89b90:	380d883a 	mov	r6,r7
   89b94:	dfc00215 	stw	ra,8(sp)
   89b98:	80000015 	stw	zero,0(r16)
   89b9c:	008e1f00 	call	8e1f0 <write>
   89ba0:	00ffffc4 	movi	r3,-1
   89ba4:	10c00526 	beq	r2,r3,89bbc <_write_r+0x4c>
   89ba8:	dfc00217 	ldw	ra,8(sp)
   89bac:	dc400117 	ldw	r17,4(sp)
   89bb0:	dc000017 	ldw	r16,0(sp)
   89bb4:	dec00304 	addi	sp,sp,12
   89bb8:	f800283a 	ret
   89bbc:	80c00017 	ldw	r3,0(r16)
   89bc0:	183ff926 	beq	r3,zero,89ba8 <__alt_data_end+0xfffc07c8>
   89bc4:	88c00015 	stw	r3,0(r17)
   89bc8:	003ff706 	br	89ba8 <__alt_data_end+0xfffc07c8>

00089bcc <_close_r>:
   89bcc:	defffd04 	addi	sp,sp,-12
   89bd0:	dc000015 	stw	r16,0(sp)
   89bd4:	04000274 	movhi	r16,9
   89bd8:	dc400115 	stw	r17,4(sp)
   89bdc:	84123704 	addi	r16,r16,18652
   89be0:	2023883a 	mov	r17,r4
   89be4:	2809883a 	mov	r4,r5
   89be8:	dfc00215 	stw	ra,8(sp)
   89bec:	80000015 	stw	zero,0(r16)
   89bf0:	008d94c0 	call	8d94c <close>
   89bf4:	00ffffc4 	movi	r3,-1
   89bf8:	10c00526 	beq	r2,r3,89c10 <_close_r+0x44>
   89bfc:	dfc00217 	ldw	ra,8(sp)
   89c00:	dc400117 	ldw	r17,4(sp)
   89c04:	dc000017 	ldw	r16,0(sp)
   89c08:	dec00304 	addi	sp,sp,12
   89c0c:	f800283a 	ret
   89c10:	80c00017 	ldw	r3,0(r16)
   89c14:	183ff926 	beq	r3,zero,89bfc <__alt_data_end+0xfffc081c>
   89c18:	88c00015 	stw	r3,0(r17)
   89c1c:	003ff706 	br	89bfc <__alt_data_end+0xfffc081c>

00089c20 <_calloc_r>:
   89c20:	defffe04 	addi	sp,sp,-8
   89c24:	dc000015 	stw	r16,0(sp)
   89c28:	2021883a 	mov	r16,r4
   89c2c:	2809883a 	mov	r4,r5
   89c30:	300b883a 	mov	r5,r6
   89c34:	dfc00115 	stw	ra,4(sp)
   89c38:	008b0d80 	call	8b0d8 <__mulsi3>
   89c3c:	8009883a 	mov	r4,r16
   89c40:	100b883a 	mov	r5,r2
   89c44:	00861d80 	call	861d8 <_malloc_r>
   89c48:	1021883a 	mov	r16,r2
   89c4c:	10002826 	beq	r2,zero,89cf0 <_calloc_r+0xd0>
   89c50:	11bfff17 	ldw	r6,-4(r2)
   89c54:	00bfff04 	movi	r2,-4
   89c58:	00c00904 	movi	r3,36
   89c5c:	308c703a 	and	r6,r6,r2
   89c60:	308d883a 	add	r6,r6,r2
   89c64:	19801436 	bltu	r3,r6,89cb8 <_calloc_r+0x98>
   89c68:	008004c4 	movi	r2,19
   89c6c:	11800936 	bltu	r2,r6,89c94 <_calloc_r+0x74>
   89c70:	8005883a 	mov	r2,r16
   89c74:	10000015 	stw	zero,0(r2)
   89c78:	10000115 	stw	zero,4(r2)
   89c7c:	10000215 	stw	zero,8(r2)
   89c80:	8005883a 	mov	r2,r16
   89c84:	dfc00117 	ldw	ra,4(sp)
   89c88:	dc000017 	ldw	r16,0(sp)
   89c8c:	dec00204 	addi	sp,sp,8
   89c90:	f800283a 	ret
   89c94:	80000015 	stw	zero,0(r16)
   89c98:	80000115 	stw	zero,4(r16)
   89c9c:	008006c4 	movi	r2,27
   89ca0:	11800d2e 	bgeu	r2,r6,89cd8 <_calloc_r+0xb8>
   89ca4:	80000215 	stw	zero,8(r16)
   89ca8:	80000315 	stw	zero,12(r16)
   89cac:	30c00c26 	beq	r6,r3,89ce0 <_calloc_r+0xc0>
   89cb0:	80800404 	addi	r2,r16,16
   89cb4:	003fef06 	br	89c74 <__alt_data_end+0xfffc0894>
   89cb8:	8009883a 	mov	r4,r16
   89cbc:	000b883a 	mov	r5,zero
   89cc0:	0086cfc0 	call	86cfc <memset>
   89cc4:	8005883a 	mov	r2,r16
   89cc8:	dfc00117 	ldw	ra,4(sp)
   89ccc:	dc000017 	ldw	r16,0(sp)
   89cd0:	dec00204 	addi	sp,sp,8
   89cd4:	f800283a 	ret
   89cd8:	80800204 	addi	r2,r16,8
   89cdc:	003fe506 	br	89c74 <__alt_data_end+0xfffc0894>
   89ce0:	80000415 	stw	zero,16(r16)
   89ce4:	80800604 	addi	r2,r16,24
   89ce8:	80000515 	stw	zero,20(r16)
   89cec:	003fe106 	br	89c74 <__alt_data_end+0xfffc0894>
   89cf0:	0005883a 	mov	r2,zero
   89cf4:	003fe306 	br	89c84 <__alt_data_end+0xfffc08a4>

00089cf8 <_fclose_r>:
   89cf8:	28003926 	beq	r5,zero,89de0 <_fclose_r+0xe8>
   89cfc:	defffc04 	addi	sp,sp,-16
   89d00:	dc400115 	stw	r17,4(sp)
   89d04:	dc000015 	stw	r16,0(sp)
   89d08:	dfc00315 	stw	ra,12(sp)
   89d0c:	dc800215 	stw	r18,8(sp)
   89d10:	2023883a 	mov	r17,r4
   89d14:	2821883a 	mov	r16,r5
   89d18:	20000226 	beq	r4,zero,89d24 <_fclose_r+0x2c>
   89d1c:	20800e17 	ldw	r2,56(r4)
   89d20:	10002726 	beq	r2,zero,89dc0 <_fclose_r+0xc8>
   89d24:	8080030f 	ldh	r2,12(r16)
   89d28:	1000071e 	bne	r2,zero,89d48 <_fclose_r+0x50>
   89d2c:	0005883a 	mov	r2,zero
   89d30:	dfc00317 	ldw	ra,12(sp)
   89d34:	dc800217 	ldw	r18,8(sp)
   89d38:	dc400117 	ldw	r17,4(sp)
   89d3c:	dc000017 	ldw	r16,0(sp)
   89d40:	dec00404 	addi	sp,sp,16
   89d44:	f800283a 	ret
   89d48:	8809883a 	mov	r4,r17
   89d4c:	800b883a 	mov	r5,r16
   89d50:	0084e940 	call	84e94 <__sflush_r>
   89d54:	1025883a 	mov	r18,r2
   89d58:	80800b17 	ldw	r2,44(r16)
   89d5c:	10000426 	beq	r2,zero,89d70 <_fclose_r+0x78>
   89d60:	81400717 	ldw	r5,28(r16)
   89d64:	8809883a 	mov	r4,r17
   89d68:	103ee83a 	callr	r2
   89d6c:	10001616 	blt	r2,zero,89dc8 <_fclose_r+0xd0>
   89d70:	8080030b 	ldhu	r2,12(r16)
   89d74:	1080200c 	andi	r2,r2,128
   89d78:	1000151e 	bne	r2,zero,89dd0 <_fclose_r+0xd8>
   89d7c:	81400c17 	ldw	r5,48(r16)
   89d80:	28000526 	beq	r5,zero,89d98 <_fclose_r+0xa0>
   89d84:	80801004 	addi	r2,r16,64
   89d88:	28800226 	beq	r5,r2,89d94 <_fclose_r+0x9c>
   89d8c:	8809883a 	mov	r4,r17
   89d90:	00855fc0 	call	855fc <_free_r>
   89d94:	80000c15 	stw	zero,48(r16)
   89d98:	81401117 	ldw	r5,68(r16)
   89d9c:	28000326 	beq	r5,zero,89dac <_fclose_r+0xb4>
   89da0:	8809883a 	mov	r4,r17
   89da4:	00855fc0 	call	855fc <_free_r>
   89da8:	80001115 	stw	zero,68(r16)
   89dac:	00854980 	call	85498 <__sfp_lock_acquire>
   89db0:	8000030d 	sth	zero,12(r16)
   89db4:	008549c0 	call	8549c <__sfp_lock_release>
   89db8:	9005883a 	mov	r2,r18
   89dbc:	003fdc06 	br	89d30 <__alt_data_end+0xfffc0950>
   89dc0:	00854880 	call	85488 <__sinit>
   89dc4:	003fd706 	br	89d24 <__alt_data_end+0xfffc0944>
   89dc8:	04bfffc4 	movi	r18,-1
   89dcc:	003fe806 	br	89d70 <__alt_data_end+0xfffc0990>
   89dd0:	81400417 	ldw	r5,16(r16)
   89dd4:	8809883a 	mov	r4,r17
   89dd8:	00855fc0 	call	855fc <_free_r>
   89ddc:	003fe706 	br	89d7c <__alt_data_end+0xfffc099c>
   89de0:	0005883a 	mov	r2,zero
   89de4:	f800283a 	ret

00089de8 <fclose>:
   89de8:	00800274 	movhi	r2,9
   89dec:	108b4704 	addi	r2,r2,11548
   89df0:	200b883a 	mov	r5,r4
   89df4:	11000017 	ldw	r4,0(r2)
   89df8:	0089cf81 	jmpi	89cf8 <_fclose_r>

00089dfc <_fputwc_r>:
   89dfc:	3080030b 	ldhu	r2,12(r6)
   89e00:	defff804 	addi	sp,sp,-32
   89e04:	dcc00415 	stw	r19,16(sp)
   89e08:	dc800315 	stw	r18,12(sp)
   89e0c:	dc000115 	stw	r16,4(sp)
   89e10:	dfc00715 	stw	ra,28(sp)
   89e14:	dd400615 	stw	r21,24(sp)
   89e18:	dd000515 	stw	r20,20(sp)
   89e1c:	dc400215 	stw	r17,8(sp)
   89e20:	10c8000c 	andi	r3,r2,8192
   89e24:	3021883a 	mov	r16,r6
   89e28:	2027883a 	mov	r19,r4
   89e2c:	2825883a 	mov	r18,r5
   89e30:	1800051e 	bne	r3,zero,89e48 <_fputwc_r+0x4c>
   89e34:	30c01917 	ldw	r3,100(r6)
   89e38:	10880014 	ori	r2,r2,8192
   89e3c:	3080030d 	sth	r2,12(r6)
   89e40:	18880014 	ori	r2,r3,8192
   89e44:	30801915 	stw	r2,100(r6)
   89e48:	0085fc80 	call	85fc8 <__locale_mb_cur_max>
   89e4c:	00c00044 	movi	r3,1
   89e50:	10c03e26 	beq	r2,r3,89f4c <_fputwc_r+0x150>
   89e54:	9809883a 	mov	r4,r19
   89e58:	d80b883a 	mov	r5,sp
   89e5c:	900d883a 	mov	r6,r18
   89e60:	81c01704 	addi	r7,r16,92
   89e64:	008a2940 	call	8a294 <_wcrtomb_r>
   89e68:	1029883a 	mov	r20,r2
   89e6c:	00bfffc4 	movi	r2,-1
   89e70:	a0802026 	beq	r20,r2,89ef4 <_fputwc_r+0xf8>
   89e74:	d9400003 	ldbu	r5,0(sp)
   89e78:	a0001c26 	beq	r20,zero,89eec <_fputwc_r+0xf0>
   89e7c:	0023883a 	mov	r17,zero
   89e80:	05400284 	movi	r21,10
   89e84:	00000906 	br	89eac <_fputwc_r+0xb0>
   89e88:	80800017 	ldw	r2,0(r16)
   89e8c:	11400005 	stb	r5,0(r2)
   89e90:	80c00017 	ldw	r3,0(r16)
   89e94:	18c00044 	addi	r3,r3,1
   89e98:	80c00015 	stw	r3,0(r16)
   89e9c:	8c400044 	addi	r17,r17,1
   89ea0:	dc45883a 	add	r2,sp,r17
   89ea4:	8d00112e 	bgeu	r17,r20,89eec <_fputwc_r+0xf0>
   89ea8:	11400003 	ldbu	r5,0(r2)
   89eac:	80c00217 	ldw	r3,8(r16)
   89eb0:	18ffffc4 	addi	r3,r3,-1
   89eb4:	80c00215 	stw	r3,8(r16)
   89eb8:	183ff30e 	bge	r3,zero,89e88 <__alt_data_end+0xfffc0aa8>
   89ebc:	80800617 	ldw	r2,24(r16)
   89ec0:	18801916 	blt	r3,r2,89f28 <_fputwc_r+0x12c>
   89ec4:	80800017 	ldw	r2,0(r16)
   89ec8:	11400005 	stb	r5,0(r2)
   89ecc:	80800017 	ldw	r2,0(r16)
   89ed0:	10c00003 	ldbu	r3,0(r2)
   89ed4:	10800044 	addi	r2,r2,1
   89ed8:	1d402326 	beq	r3,r21,89f68 <_fputwc_r+0x16c>
   89edc:	80800015 	stw	r2,0(r16)
   89ee0:	8c400044 	addi	r17,r17,1
   89ee4:	dc45883a 	add	r2,sp,r17
   89ee8:	8d3fef36 	bltu	r17,r20,89ea8 <__alt_data_end+0xfffc0ac8>
   89eec:	9005883a 	mov	r2,r18
   89ef0:	00000406 	br	89f04 <_fputwc_r+0x108>
   89ef4:	80c0030b 	ldhu	r3,12(r16)
   89ef8:	a005883a 	mov	r2,r20
   89efc:	18c01014 	ori	r3,r3,64
   89f00:	80c0030d 	sth	r3,12(r16)
   89f04:	dfc00717 	ldw	ra,28(sp)
   89f08:	dd400617 	ldw	r21,24(sp)
   89f0c:	dd000517 	ldw	r20,20(sp)
   89f10:	dcc00417 	ldw	r19,16(sp)
   89f14:	dc800317 	ldw	r18,12(sp)
   89f18:	dc400217 	ldw	r17,8(sp)
   89f1c:	dc000117 	ldw	r16,4(sp)
   89f20:	dec00804 	addi	sp,sp,32
   89f24:	f800283a 	ret
   89f28:	9809883a 	mov	r4,r19
   89f2c:	29403fcc 	andi	r5,r5,255
   89f30:	800d883a 	mov	r6,r16
   89f34:	008a1400 	call	8a140 <__swbuf_r>
   89f38:	10bfffe0 	cmpeqi	r2,r2,-1
   89f3c:	10803fcc 	andi	r2,r2,255
   89f40:	103fd626 	beq	r2,zero,89e9c <__alt_data_end+0xfffc0abc>
   89f44:	00bfffc4 	movi	r2,-1
   89f48:	003fee06 	br	89f04 <__alt_data_end+0xfffc0b24>
   89f4c:	90ffffc4 	addi	r3,r18,-1
   89f50:	01003f84 	movi	r4,254
   89f54:	20ffbf36 	bltu	r4,r3,89e54 <__alt_data_end+0xfffc0a74>
   89f58:	900b883a 	mov	r5,r18
   89f5c:	dc800005 	stb	r18,0(sp)
   89f60:	1029883a 	mov	r20,r2
   89f64:	003fc506 	br	89e7c <__alt_data_end+0xfffc0a9c>
   89f68:	9809883a 	mov	r4,r19
   89f6c:	a80b883a 	mov	r5,r21
   89f70:	800d883a 	mov	r6,r16
   89f74:	008a1400 	call	8a140 <__swbuf_r>
   89f78:	10bfffe0 	cmpeqi	r2,r2,-1
   89f7c:	003fef06 	br	89f3c <__alt_data_end+0xfffc0b5c>

00089f80 <fputwc>:
   89f80:	00800274 	movhi	r2,9
   89f84:	defffc04 	addi	sp,sp,-16
   89f88:	108b4704 	addi	r2,r2,11548
   89f8c:	dc000115 	stw	r16,4(sp)
   89f90:	14000017 	ldw	r16,0(r2)
   89f94:	dc400215 	stw	r17,8(sp)
   89f98:	dfc00315 	stw	ra,12(sp)
   89f9c:	2023883a 	mov	r17,r4
   89fa0:	280d883a 	mov	r6,r5
   89fa4:	80000626 	beq	r16,zero,89fc0 <fputwc+0x40>
   89fa8:	80800e17 	ldw	r2,56(r16)
   89fac:	1000041e 	bne	r2,zero,89fc0 <fputwc+0x40>
   89fb0:	8009883a 	mov	r4,r16
   89fb4:	d9400015 	stw	r5,0(sp)
   89fb8:	00854880 	call	85488 <__sinit>
   89fbc:	d9800017 	ldw	r6,0(sp)
   89fc0:	8009883a 	mov	r4,r16
   89fc4:	880b883a 	mov	r5,r17
   89fc8:	dfc00317 	ldw	ra,12(sp)
   89fcc:	dc400217 	ldw	r17,8(sp)
   89fd0:	dc000117 	ldw	r16,4(sp)
   89fd4:	dec00404 	addi	sp,sp,16
   89fd8:	0089dfc1 	jmpi	89dfc <_fputwc_r>

00089fdc <_fstat_r>:
   89fdc:	defffd04 	addi	sp,sp,-12
   89fe0:	dc000015 	stw	r16,0(sp)
   89fe4:	04000274 	movhi	r16,9
   89fe8:	dc400115 	stw	r17,4(sp)
   89fec:	84123704 	addi	r16,r16,18652
   89ff0:	2023883a 	mov	r17,r4
   89ff4:	2809883a 	mov	r4,r5
   89ff8:	300b883a 	mov	r5,r6
   89ffc:	dfc00215 	stw	ra,8(sp)
   8a000:	80000015 	stw	zero,0(r16)
   8a004:	008daa00 	call	8daa0 <fstat>
   8a008:	00ffffc4 	movi	r3,-1
   8a00c:	10c00526 	beq	r2,r3,8a024 <_fstat_r+0x48>
   8a010:	dfc00217 	ldw	ra,8(sp)
   8a014:	dc400117 	ldw	r17,4(sp)
   8a018:	dc000017 	ldw	r16,0(sp)
   8a01c:	dec00304 	addi	sp,sp,12
   8a020:	f800283a 	ret
   8a024:	80c00017 	ldw	r3,0(r16)
   8a028:	183ff926 	beq	r3,zero,8a010 <__alt_data_end+0xfffc0c30>
   8a02c:	88c00015 	stw	r3,0(r17)
   8a030:	003ff706 	br	8a010 <__alt_data_end+0xfffc0c30>

0008a034 <_isatty_r>:
   8a034:	defffd04 	addi	sp,sp,-12
   8a038:	dc000015 	stw	r16,0(sp)
   8a03c:	04000274 	movhi	r16,9
   8a040:	dc400115 	stw	r17,4(sp)
   8a044:	84123704 	addi	r16,r16,18652
   8a048:	2023883a 	mov	r17,r4
   8a04c:	2809883a 	mov	r4,r5
   8a050:	dfc00215 	stw	ra,8(sp)
   8a054:	80000015 	stw	zero,0(r16)
   8a058:	008dba80 	call	8dba8 <isatty>
   8a05c:	00ffffc4 	movi	r3,-1
   8a060:	10c00526 	beq	r2,r3,8a078 <_isatty_r+0x44>
   8a064:	dfc00217 	ldw	ra,8(sp)
   8a068:	dc400117 	ldw	r17,4(sp)
   8a06c:	dc000017 	ldw	r16,0(sp)
   8a070:	dec00304 	addi	sp,sp,12
   8a074:	f800283a 	ret
   8a078:	80c00017 	ldw	r3,0(r16)
   8a07c:	183ff926 	beq	r3,zero,8a064 <__alt_data_end+0xfffc0c84>
   8a080:	88c00015 	stw	r3,0(r17)
   8a084:	003ff706 	br	8a064 <__alt_data_end+0xfffc0c84>

0008a088 <_lseek_r>:
   8a088:	defffd04 	addi	sp,sp,-12
   8a08c:	dc000015 	stw	r16,0(sp)
   8a090:	04000274 	movhi	r16,9
   8a094:	dc400115 	stw	r17,4(sp)
   8a098:	84123704 	addi	r16,r16,18652
   8a09c:	2023883a 	mov	r17,r4
   8a0a0:	2809883a 	mov	r4,r5
   8a0a4:	300b883a 	mov	r5,r6
   8a0a8:	380d883a 	mov	r6,r7
   8a0ac:	dfc00215 	stw	ra,8(sp)
   8a0b0:	80000015 	stw	zero,0(r16)
   8a0b4:	008dd880 	call	8dd88 <lseek>
   8a0b8:	00ffffc4 	movi	r3,-1
   8a0bc:	10c00526 	beq	r2,r3,8a0d4 <_lseek_r+0x4c>
   8a0c0:	dfc00217 	ldw	ra,8(sp)
   8a0c4:	dc400117 	ldw	r17,4(sp)
   8a0c8:	dc000017 	ldw	r16,0(sp)
   8a0cc:	dec00304 	addi	sp,sp,12
   8a0d0:	f800283a 	ret
   8a0d4:	80c00017 	ldw	r3,0(r16)
   8a0d8:	183ff926 	beq	r3,zero,8a0c0 <__alt_data_end+0xfffc0ce0>
   8a0dc:	88c00015 	stw	r3,0(r17)
   8a0e0:	003ff706 	br	8a0c0 <__alt_data_end+0xfffc0ce0>

0008a0e4 <_read_r>:
   8a0e4:	defffd04 	addi	sp,sp,-12
   8a0e8:	dc000015 	stw	r16,0(sp)
   8a0ec:	04000274 	movhi	r16,9
   8a0f0:	dc400115 	stw	r17,4(sp)
   8a0f4:	84123704 	addi	r16,r16,18652
   8a0f8:	2023883a 	mov	r17,r4
   8a0fc:	2809883a 	mov	r4,r5
   8a100:	300b883a 	mov	r5,r6
   8a104:	380d883a 	mov	r6,r7
   8a108:	dfc00215 	stw	ra,8(sp)
   8a10c:	80000015 	stw	zero,0(r16)
   8a110:	008df6c0 	call	8df6c <read>
   8a114:	00ffffc4 	movi	r3,-1
   8a118:	10c00526 	beq	r2,r3,8a130 <_read_r+0x4c>
   8a11c:	dfc00217 	ldw	ra,8(sp)
   8a120:	dc400117 	ldw	r17,4(sp)
   8a124:	dc000017 	ldw	r16,0(sp)
   8a128:	dec00304 	addi	sp,sp,12
   8a12c:	f800283a 	ret
   8a130:	80c00017 	ldw	r3,0(r16)
   8a134:	183ff926 	beq	r3,zero,8a11c <__alt_data_end+0xfffc0d3c>
   8a138:	88c00015 	stw	r3,0(r17)
   8a13c:	003ff706 	br	8a11c <__alt_data_end+0xfffc0d3c>

0008a140 <__swbuf_r>:
   8a140:	defffc04 	addi	sp,sp,-16
   8a144:	dc800215 	stw	r18,8(sp)
   8a148:	dc400115 	stw	r17,4(sp)
   8a14c:	dc000015 	stw	r16,0(sp)
   8a150:	dfc00315 	stw	ra,12(sp)
   8a154:	2025883a 	mov	r18,r4
   8a158:	2823883a 	mov	r17,r5
   8a15c:	3021883a 	mov	r16,r6
   8a160:	20000226 	beq	r4,zero,8a16c <__swbuf_r+0x2c>
   8a164:	20800e17 	ldw	r2,56(r4)
   8a168:	10004126 	beq	r2,zero,8a270 <__swbuf_r+0x130>
   8a16c:	80c00617 	ldw	r3,24(r16)
   8a170:	8180030b 	ldhu	r6,12(r16)
   8a174:	80c00215 	stw	r3,8(r16)
   8a178:	30c0020c 	andi	r3,r6,8
   8a17c:	18003526 	beq	r3,zero,8a254 <__swbuf_r+0x114>
   8a180:	80c00417 	ldw	r3,16(r16)
   8a184:	18003326 	beq	r3,zero,8a254 <__swbuf_r+0x114>
   8a188:	3088000c 	andi	r2,r6,8192
   8a18c:	8c403fcc 	andi	r17,r17,255
   8a190:	10001726 	beq	r2,zero,8a1f0 <__swbuf_r+0xb0>
   8a194:	80800017 	ldw	r2,0(r16)
   8a198:	81000517 	ldw	r4,20(r16)
   8a19c:	10c7c83a 	sub	r3,r2,r3
   8a1a0:	19001d0e 	bge	r3,r4,8a218 <__swbuf_r+0xd8>
   8a1a4:	18c00044 	addi	r3,r3,1
   8a1a8:	81400217 	ldw	r5,8(r16)
   8a1ac:	11000044 	addi	r4,r2,1
   8a1b0:	81000015 	stw	r4,0(r16)
   8a1b4:	297fffc4 	addi	r5,r5,-1
   8a1b8:	81400215 	stw	r5,8(r16)
   8a1bc:	14400005 	stb	r17,0(r2)
   8a1c0:	80800517 	ldw	r2,20(r16)
   8a1c4:	10c01d26 	beq	r2,r3,8a23c <__swbuf_r+0xfc>
   8a1c8:	8080030b 	ldhu	r2,12(r16)
   8a1cc:	1080004c 	andi	r2,r2,1
   8a1d0:	1000181e 	bne	r2,zero,8a234 <__swbuf_r+0xf4>
   8a1d4:	8805883a 	mov	r2,r17
   8a1d8:	dfc00317 	ldw	ra,12(sp)
   8a1dc:	dc800217 	ldw	r18,8(sp)
   8a1e0:	dc400117 	ldw	r17,4(sp)
   8a1e4:	dc000017 	ldw	r16,0(sp)
   8a1e8:	dec00404 	addi	sp,sp,16
   8a1ec:	f800283a 	ret
   8a1f0:	81001917 	ldw	r4,100(r16)
   8a1f4:	00b7ffc4 	movi	r2,-8193
   8a1f8:	31880014 	ori	r6,r6,8192
   8a1fc:	2084703a 	and	r2,r4,r2
   8a200:	80801915 	stw	r2,100(r16)
   8a204:	80800017 	ldw	r2,0(r16)
   8a208:	81000517 	ldw	r4,20(r16)
   8a20c:	8180030d 	sth	r6,12(r16)
   8a210:	10c7c83a 	sub	r3,r2,r3
   8a214:	193fe316 	blt	r3,r4,8a1a4 <__alt_data_end+0xfffc0dc4>
   8a218:	9009883a 	mov	r4,r18
   8a21c:	800b883a 	mov	r5,r16
   8a220:	008509c0 	call	8509c <_fflush_r>
   8a224:	1000091e 	bne	r2,zero,8a24c <__swbuf_r+0x10c>
   8a228:	80800017 	ldw	r2,0(r16)
   8a22c:	00c00044 	movi	r3,1
   8a230:	003fdd06 	br	8a1a8 <__alt_data_end+0xfffc0dc8>
   8a234:	00800284 	movi	r2,10
   8a238:	88bfe61e 	bne	r17,r2,8a1d4 <__alt_data_end+0xfffc0df4>
   8a23c:	9009883a 	mov	r4,r18
   8a240:	800b883a 	mov	r5,r16
   8a244:	008509c0 	call	8509c <_fflush_r>
   8a248:	103fe226 	beq	r2,zero,8a1d4 <__alt_data_end+0xfffc0df4>
   8a24c:	00bfffc4 	movi	r2,-1
   8a250:	003fe106 	br	8a1d8 <__alt_data_end+0xfffc0df8>
   8a254:	9009883a 	mov	r4,r18
   8a258:	800b883a 	mov	r5,r16
   8a25c:	00833f00 	call	833f0 <__swsetup_r>
   8a260:	103ffa1e 	bne	r2,zero,8a24c <__alt_data_end+0xfffc0e6c>
   8a264:	8180030b 	ldhu	r6,12(r16)
   8a268:	80c00417 	ldw	r3,16(r16)
   8a26c:	003fc606 	br	8a188 <__alt_data_end+0xfffc0da8>
   8a270:	00854880 	call	85488 <__sinit>
   8a274:	003fbd06 	br	8a16c <__alt_data_end+0xfffc0d8c>

0008a278 <__swbuf>:
   8a278:	00c00274 	movhi	r3,9
   8a27c:	18cb4704 	addi	r3,r3,11548
   8a280:	2005883a 	mov	r2,r4
   8a284:	19000017 	ldw	r4,0(r3)
   8a288:	280d883a 	mov	r6,r5
   8a28c:	100b883a 	mov	r5,r2
   8a290:	008a1401 	jmpi	8a140 <__swbuf_r>

0008a294 <_wcrtomb_r>:
   8a294:	defff604 	addi	sp,sp,-40
   8a298:	00800274 	movhi	r2,9
   8a29c:	dc800815 	stw	r18,32(sp)
   8a2a0:	dc400715 	stw	r17,28(sp)
   8a2a4:	dc000615 	stw	r16,24(sp)
   8a2a8:	108b4b04 	addi	r2,r2,11564
   8a2ac:	dfc00915 	stw	ra,36(sp)
   8a2b0:	2021883a 	mov	r16,r4
   8a2b4:	3823883a 	mov	r17,r7
   8a2b8:	14800017 	ldw	r18,0(r2)
   8a2bc:	28001426 	beq	r5,zero,8a310 <_wcrtomb_r+0x7c>
   8a2c0:	d9400415 	stw	r5,16(sp)
   8a2c4:	d9800515 	stw	r6,20(sp)
   8a2c8:	0085fbc0 	call	85fbc <__locale_charset>
   8a2cc:	d9400417 	ldw	r5,16(sp)
   8a2d0:	d9800517 	ldw	r6,20(sp)
   8a2d4:	8009883a 	mov	r4,r16
   8a2d8:	dc400015 	stw	r17,0(sp)
   8a2dc:	100f883a 	mov	r7,r2
   8a2e0:	903ee83a 	callr	r18
   8a2e4:	00ffffc4 	movi	r3,-1
   8a2e8:	10c0031e 	bne	r2,r3,8a2f8 <_wcrtomb_r+0x64>
   8a2ec:	88000015 	stw	zero,0(r17)
   8a2f0:	00c02284 	movi	r3,138
   8a2f4:	80c00015 	stw	r3,0(r16)
   8a2f8:	dfc00917 	ldw	ra,36(sp)
   8a2fc:	dc800817 	ldw	r18,32(sp)
   8a300:	dc400717 	ldw	r17,28(sp)
   8a304:	dc000617 	ldw	r16,24(sp)
   8a308:	dec00a04 	addi	sp,sp,40
   8a30c:	f800283a 	ret
   8a310:	0085fbc0 	call	85fbc <__locale_charset>
   8a314:	8009883a 	mov	r4,r16
   8a318:	dc400015 	stw	r17,0(sp)
   8a31c:	d9400104 	addi	r5,sp,4
   8a320:	000d883a 	mov	r6,zero
   8a324:	100f883a 	mov	r7,r2
   8a328:	903ee83a 	callr	r18
   8a32c:	003fed06 	br	8a2e4 <__alt_data_end+0xfffc0f04>

0008a330 <wcrtomb>:
   8a330:	defff604 	addi	sp,sp,-40
   8a334:	00800274 	movhi	r2,9
   8a338:	dc800615 	stw	r18,24(sp)
   8a33c:	dc400515 	stw	r17,20(sp)
   8a340:	dc000415 	stw	r16,16(sp)
   8a344:	108b4704 	addi	r2,r2,11548
   8a348:	dfc00915 	stw	ra,36(sp)
   8a34c:	dd000815 	stw	r20,32(sp)
   8a350:	dcc00715 	stw	r19,28(sp)
   8a354:	2021883a 	mov	r16,r4
   8a358:	3025883a 	mov	r18,r6
   8a35c:	14400017 	ldw	r17,0(r2)
   8a360:	20001826 	beq	r4,zero,8a3c4 <wcrtomb+0x94>
   8a364:	00800274 	movhi	r2,9
   8a368:	108b4b04 	addi	r2,r2,11564
   8a36c:	15000017 	ldw	r20,0(r2)
   8a370:	2827883a 	mov	r19,r5
   8a374:	0085fbc0 	call	85fbc <__locale_charset>
   8a378:	8809883a 	mov	r4,r17
   8a37c:	dc800015 	stw	r18,0(sp)
   8a380:	800b883a 	mov	r5,r16
   8a384:	980d883a 	mov	r6,r19
   8a388:	100f883a 	mov	r7,r2
   8a38c:	a03ee83a 	callr	r20
   8a390:	00ffffc4 	movi	r3,-1
   8a394:	10c0031e 	bne	r2,r3,8a3a4 <wcrtomb+0x74>
   8a398:	90000015 	stw	zero,0(r18)
   8a39c:	00c02284 	movi	r3,138
   8a3a0:	88c00015 	stw	r3,0(r17)
   8a3a4:	dfc00917 	ldw	ra,36(sp)
   8a3a8:	dd000817 	ldw	r20,32(sp)
   8a3ac:	dcc00717 	ldw	r19,28(sp)
   8a3b0:	dc800617 	ldw	r18,24(sp)
   8a3b4:	dc400517 	ldw	r17,20(sp)
   8a3b8:	dc000417 	ldw	r16,16(sp)
   8a3bc:	dec00a04 	addi	sp,sp,40
   8a3c0:	f800283a 	ret
   8a3c4:	00800274 	movhi	r2,9
   8a3c8:	108b4b04 	addi	r2,r2,11564
   8a3cc:	14000017 	ldw	r16,0(r2)
   8a3d0:	0085fbc0 	call	85fbc <__locale_charset>
   8a3d4:	8809883a 	mov	r4,r17
   8a3d8:	dc800015 	stw	r18,0(sp)
   8a3dc:	d9400104 	addi	r5,sp,4
   8a3e0:	000d883a 	mov	r6,zero
   8a3e4:	100f883a 	mov	r7,r2
   8a3e8:	803ee83a 	callr	r16
   8a3ec:	003fe806 	br	8a390 <__alt_data_end+0xfffc0fb0>

0008a3f0 <__ascii_wctomb>:
   8a3f0:	28000526 	beq	r5,zero,8a408 <__ascii_wctomb+0x18>
   8a3f4:	00803fc4 	movi	r2,255
   8a3f8:	11800536 	bltu	r2,r6,8a410 <__ascii_wctomb+0x20>
   8a3fc:	29800005 	stb	r6,0(r5)
   8a400:	00800044 	movi	r2,1
   8a404:	f800283a 	ret
   8a408:	0005883a 	mov	r2,zero
   8a40c:	f800283a 	ret
   8a410:	00802284 	movi	r2,138
   8a414:	20800015 	stw	r2,0(r4)
   8a418:	00bfffc4 	movi	r2,-1
   8a41c:	f800283a 	ret

0008a420 <_wctomb_r>:
   8a420:	00800274 	movhi	r2,9
   8a424:	defff904 	addi	sp,sp,-28
   8a428:	108b4b04 	addi	r2,r2,11564
   8a42c:	dfc00615 	stw	ra,24(sp)
   8a430:	dc400515 	stw	r17,20(sp)
   8a434:	dc000415 	stw	r16,16(sp)
   8a438:	3823883a 	mov	r17,r7
   8a43c:	14000017 	ldw	r16,0(r2)
   8a440:	d9000115 	stw	r4,4(sp)
   8a444:	d9400215 	stw	r5,8(sp)
   8a448:	d9800315 	stw	r6,12(sp)
   8a44c:	0085fbc0 	call	85fbc <__locale_charset>
   8a450:	d9000117 	ldw	r4,4(sp)
   8a454:	d9400217 	ldw	r5,8(sp)
   8a458:	d9800317 	ldw	r6,12(sp)
   8a45c:	dc400015 	stw	r17,0(sp)
   8a460:	100f883a 	mov	r7,r2
   8a464:	803ee83a 	callr	r16
   8a468:	dfc00617 	ldw	ra,24(sp)
   8a46c:	dc400517 	ldw	r17,20(sp)
   8a470:	dc000417 	ldw	r16,16(sp)
   8a474:	dec00704 	addi	sp,sp,28
   8a478:	f800283a 	ret

0008a47c <__udivdi3>:
   8a47c:	defff504 	addi	sp,sp,-44
   8a480:	dcc00415 	stw	r19,16(sp)
   8a484:	dc000115 	stw	r16,4(sp)
   8a488:	dfc00a15 	stw	ra,40(sp)
   8a48c:	df000915 	stw	fp,36(sp)
   8a490:	ddc00815 	stw	r23,32(sp)
   8a494:	dd800715 	stw	r22,28(sp)
   8a498:	dd400615 	stw	r21,24(sp)
   8a49c:	dd000515 	stw	r20,20(sp)
   8a4a0:	dc800315 	stw	r18,12(sp)
   8a4a4:	dc400215 	stw	r17,8(sp)
   8a4a8:	2027883a 	mov	r19,r4
   8a4ac:	2821883a 	mov	r16,r5
   8a4b0:	3800471e 	bne	r7,zero,8a5d0 <__udivdi3+0x154>
   8a4b4:	3025883a 	mov	r18,r6
   8a4b8:	2023883a 	mov	r17,r4
   8a4bc:	2980592e 	bgeu	r5,r6,8a624 <__udivdi3+0x1a8>
   8a4c0:	00bfffd4 	movui	r2,65535
   8a4c4:	2829883a 	mov	r20,r5
   8a4c8:	1180b236 	bltu	r2,r6,8a794 <__udivdi3+0x318>
   8a4cc:	00803fc4 	movi	r2,255
   8a4d0:	1181622e 	bgeu	r2,r6,8aa5c <__udivdi3+0x5e0>
   8a4d4:	00800204 	movi	r2,8
   8a4d8:	1007883a 	mov	r3,r2
   8a4dc:	3084d83a 	srl	r2,r6,r2
   8a4e0:	01000274 	movhi	r4,9
   8a4e4:	21042a04 	addi	r4,r4,4264
   8a4e8:	2085883a 	add	r2,r4,r2
   8a4ec:	11000003 	ldbu	r4,0(r2)
   8a4f0:	20c9883a 	add	r4,r4,r3
   8a4f4:	00c00804 	movi	r3,32
   8a4f8:	1907c83a 	sub	r3,r3,r4
   8a4fc:	18000526 	beq	r3,zero,8a514 <__udivdi3+0x98>
   8a500:	80e0983a 	sll	r16,r16,r3
   8a504:	9908d83a 	srl	r4,r19,r4
   8a508:	30e4983a 	sll	r18,r6,r3
   8a50c:	98e2983a 	sll	r17,r19,r3
   8a510:	8128b03a 	or	r20,r16,r4
   8a514:	902ad43a 	srli	r21,r18,16
   8a518:	a009883a 	mov	r4,r20
   8a51c:	95bfffcc 	andi	r22,r18,65535
   8a520:	a80b883a 	mov	r5,r21
   8a524:	00810f40 	call	810f4 <__umodsi3>
   8a528:	a009883a 	mov	r4,r20
   8a52c:	a80b883a 	mov	r5,r21
   8a530:	102f883a 	mov	r23,r2
   8a534:	00810ec0 	call	810ec <__udivsi3>
   8a538:	1009883a 	mov	r4,r2
   8a53c:	b00b883a 	mov	r5,r22
   8a540:	1021883a 	mov	r16,r2
   8a544:	008b0d80 	call	8b0d8 <__mulsi3>
   8a548:	b82e943a 	slli	r23,r23,16
   8a54c:	8808d43a 	srli	r4,r17,16
   8a550:	b906b03a 	or	r3,r23,r4
   8a554:	1880052e 	bgeu	r3,r2,8a56c <__udivdi3+0xf0>
   8a558:	1c87883a 	add	r3,r3,r18
   8a55c:	813fffc4 	addi	r4,r16,-1
   8a560:	1c800136 	bltu	r3,r18,8a568 <__udivdi3+0xec>
   8a564:	18815236 	bltu	r3,r2,8aab0 <__udivdi3+0x634>
   8a568:	2021883a 	mov	r16,r4
   8a56c:	18a7c83a 	sub	r19,r3,r2
   8a570:	9809883a 	mov	r4,r19
   8a574:	a80b883a 	mov	r5,r21
   8a578:	00810f40 	call	810f4 <__umodsi3>
   8a57c:	1029883a 	mov	r20,r2
   8a580:	9809883a 	mov	r4,r19
   8a584:	a80b883a 	mov	r5,r21
   8a588:	a028943a 	slli	r20,r20,16
   8a58c:	00810ec0 	call	810ec <__udivsi3>
   8a590:	1009883a 	mov	r4,r2
   8a594:	b00b883a 	mov	r5,r22
   8a598:	8c7fffcc 	andi	r17,r17,65535
   8a59c:	1027883a 	mov	r19,r2
   8a5a0:	a462b03a 	or	r17,r20,r17
   8a5a4:	008b0d80 	call	8b0d8 <__mulsi3>
   8a5a8:	8880052e 	bgeu	r17,r2,8a5c0 <__udivdi3+0x144>
   8a5ac:	8ca3883a 	add	r17,r17,r18
   8a5b0:	98ffffc4 	addi	r3,r19,-1
   8a5b4:	8c811036 	bltu	r17,r18,8a9f8 <__udivdi3+0x57c>
   8a5b8:	88810f2e 	bgeu	r17,r2,8a9f8 <__udivdi3+0x57c>
   8a5bc:	9cffff84 	addi	r19,r19,-2
   8a5c0:	8020943a 	slli	r16,r16,16
   8a5c4:	0007883a 	mov	r3,zero
   8a5c8:	9c04b03a 	or	r2,r19,r16
   8a5cc:	00006006 	br	8a750 <__udivdi3+0x2d4>
   8a5d0:	29c05d36 	bltu	r5,r7,8a748 <__udivdi3+0x2cc>
   8a5d4:	00bfffd4 	movui	r2,65535
   8a5d8:	11c0692e 	bgeu	r2,r7,8a780 <__udivdi3+0x304>
   8a5dc:	00804034 	movhi	r2,256
   8a5e0:	10bfffc4 	addi	r2,r2,-1
   8a5e4:	11c10e2e 	bgeu	r2,r7,8aa20 <__udivdi3+0x5a4>
   8a5e8:	01400604 	movi	r5,24
   8a5ec:	2811883a 	mov	r8,r5
   8a5f0:	394ad83a 	srl	r5,r7,r5
   8a5f4:	00800274 	movhi	r2,9
   8a5f8:	10842a04 	addi	r2,r2,4264
   8a5fc:	114b883a 	add	r5,r2,r5
   8a600:	29400003 	ldbu	r5,0(r5)
   8a604:	00c00804 	movi	r3,32
   8a608:	2a0b883a 	add	r5,r5,r8
   8a60c:	196fc83a 	sub	r23,r3,r5
   8a610:	b8006b1e 	bne	r23,zero,8a7c0 <__udivdi3+0x344>
   8a614:	3c011436 	bltu	r7,r16,8aa68 <__udivdi3+0x5ec>
   8a618:	9985403a 	cmpgeu	r2,r19,r6
   8a61c:	0007883a 	mov	r3,zero
   8a620:	00004b06 	br	8a750 <__udivdi3+0x2d4>
   8a624:	3000041e 	bne	r6,zero,8a638 <__udivdi3+0x1bc>
   8a628:	01000044 	movi	r4,1
   8a62c:	000b883a 	mov	r5,zero
   8a630:	00810ec0 	call	810ec <__udivsi3>
   8a634:	1025883a 	mov	r18,r2
   8a638:	00bfffd4 	movui	r2,65535
   8a63c:	14805b2e 	bgeu	r2,r18,8a7ac <__udivdi3+0x330>
   8a640:	00804034 	movhi	r2,256
   8a644:	10bfffc4 	addi	r2,r2,-1
   8a648:	1480fe2e 	bgeu	r2,r18,8aa44 <__udivdi3+0x5c8>
   8a64c:	00800604 	movi	r2,24
   8a650:	1007883a 	mov	r3,r2
   8a654:	9084d83a 	srl	r2,r18,r2
   8a658:	01000274 	movhi	r4,9
   8a65c:	21042a04 	addi	r4,r4,4264
   8a660:	2085883a 	add	r2,r4,r2
   8a664:	11800003 	ldbu	r6,0(r2)
   8a668:	01c00804 	movi	r7,32
   8a66c:	30c7883a 	add	r3,r6,r3
   8a670:	38cfc83a 	sub	r7,r7,r3
   8a674:	3800a71e 	bne	r7,zero,8a914 <__udivdi3+0x498>
   8a678:	9028d43a 	srli	r20,r18,16
   8a67c:	84a1c83a 	sub	r16,r16,r18
   8a680:	957fffcc 	andi	r21,r18,65535
   8a684:	00c00044 	movi	r3,1
   8a688:	8009883a 	mov	r4,r16
   8a68c:	a00b883a 	mov	r5,r20
   8a690:	d8c00015 	stw	r3,0(sp)
   8a694:	00810f40 	call	810f4 <__umodsi3>
   8a698:	8009883a 	mov	r4,r16
   8a69c:	a00b883a 	mov	r5,r20
   8a6a0:	102d883a 	mov	r22,r2
   8a6a4:	00810ec0 	call	810ec <__udivsi3>
   8a6a8:	1009883a 	mov	r4,r2
   8a6ac:	a80b883a 	mov	r5,r21
   8a6b0:	1021883a 	mov	r16,r2
   8a6b4:	008b0d80 	call	8b0d8 <__mulsi3>
   8a6b8:	b02c943a 	slli	r22,r22,16
   8a6bc:	880ed43a 	srli	r7,r17,16
   8a6c0:	d8c00017 	ldw	r3,0(sp)
   8a6c4:	b1ccb03a 	or	r6,r22,r7
   8a6c8:	3080052e 	bgeu	r6,r2,8a6e0 <__udivdi3+0x264>
   8a6cc:	348d883a 	add	r6,r6,r18
   8a6d0:	813fffc4 	addi	r4,r16,-1
   8a6d4:	34800136 	bltu	r6,r18,8a6dc <__udivdi3+0x260>
   8a6d8:	3080f236 	bltu	r6,r2,8aaa4 <__udivdi3+0x628>
   8a6dc:	2021883a 	mov	r16,r4
   8a6e0:	30a7c83a 	sub	r19,r6,r2
   8a6e4:	9809883a 	mov	r4,r19
   8a6e8:	a00b883a 	mov	r5,r20
   8a6ec:	d8c00015 	stw	r3,0(sp)
   8a6f0:	00810f40 	call	810f4 <__umodsi3>
   8a6f4:	102d883a 	mov	r22,r2
   8a6f8:	9809883a 	mov	r4,r19
   8a6fc:	a00b883a 	mov	r5,r20
   8a700:	b02c943a 	slli	r22,r22,16
   8a704:	00810ec0 	call	810ec <__udivsi3>
   8a708:	1009883a 	mov	r4,r2
   8a70c:	a80b883a 	mov	r5,r21
   8a710:	8c7fffcc 	andi	r17,r17,65535
   8a714:	1027883a 	mov	r19,r2
   8a718:	b462b03a 	or	r17,r22,r17
   8a71c:	008b0d80 	call	8b0d8 <__mulsi3>
   8a720:	d8c00017 	ldw	r3,0(sp)
   8a724:	8880052e 	bgeu	r17,r2,8a73c <__udivdi3+0x2c0>
   8a728:	8ca3883a 	add	r17,r17,r18
   8a72c:	993fffc4 	addi	r4,r19,-1
   8a730:	8c80af36 	bltu	r17,r18,8a9f0 <__udivdi3+0x574>
   8a734:	8880ae2e 	bgeu	r17,r2,8a9f0 <__udivdi3+0x574>
   8a738:	9cffff84 	addi	r19,r19,-2
   8a73c:	8020943a 	slli	r16,r16,16
   8a740:	9c04b03a 	or	r2,r19,r16
   8a744:	00000206 	br	8a750 <__udivdi3+0x2d4>
   8a748:	0007883a 	mov	r3,zero
   8a74c:	0005883a 	mov	r2,zero
   8a750:	dfc00a17 	ldw	ra,40(sp)
   8a754:	df000917 	ldw	fp,36(sp)
   8a758:	ddc00817 	ldw	r23,32(sp)
   8a75c:	dd800717 	ldw	r22,28(sp)
   8a760:	dd400617 	ldw	r21,24(sp)
   8a764:	dd000517 	ldw	r20,20(sp)
   8a768:	dcc00417 	ldw	r19,16(sp)
   8a76c:	dc800317 	ldw	r18,12(sp)
   8a770:	dc400217 	ldw	r17,8(sp)
   8a774:	dc000117 	ldw	r16,4(sp)
   8a778:	dec00b04 	addi	sp,sp,44
   8a77c:	f800283a 	ret
   8a780:	00803fc4 	movi	r2,255
   8a784:	11c0a92e 	bgeu	r2,r7,8aa2c <__udivdi3+0x5b0>
   8a788:	01400204 	movi	r5,8
   8a78c:	2811883a 	mov	r8,r5
   8a790:	003f9706 	br	8a5f0 <__alt_data_end+0xfffc1210>
   8a794:	00804034 	movhi	r2,256
   8a798:	10bfffc4 	addi	r2,r2,-1
   8a79c:	1180a62e 	bgeu	r2,r6,8aa38 <__udivdi3+0x5bc>
   8a7a0:	00800604 	movi	r2,24
   8a7a4:	1007883a 	mov	r3,r2
   8a7a8:	003f4c06 	br	8a4dc <__alt_data_end+0xfffc10fc>
   8a7ac:	00803fc4 	movi	r2,255
   8a7b0:	1480a72e 	bgeu	r2,r18,8aa50 <__udivdi3+0x5d4>
   8a7b4:	00800204 	movi	r2,8
   8a7b8:	1007883a 	mov	r3,r2
   8a7bc:	003fa506 	br	8a654 <__alt_data_end+0xfffc1274>
   8a7c0:	3178d83a 	srl	fp,r6,r5
   8a7c4:	3dce983a 	sll	r7,r7,r23
   8a7c8:	8168d83a 	srl	r20,r16,r5
   8a7cc:	9950d83a 	srl	r8,r19,r5
   8a7d0:	3f38b03a 	or	fp,r7,fp
   8a7d4:	e024d43a 	srli	r18,fp,16
   8a7d8:	85e0983a 	sll	r16,r16,r23
   8a7dc:	a009883a 	mov	r4,r20
   8a7e0:	900b883a 	mov	r5,r18
   8a7e4:	8220b03a 	or	r16,r16,r8
   8a7e8:	35ea983a 	sll	r21,r6,r23
   8a7ec:	00810f40 	call	810f4 <__umodsi3>
   8a7f0:	a009883a 	mov	r4,r20
   8a7f4:	900b883a 	mov	r5,r18
   8a7f8:	1023883a 	mov	r17,r2
   8a7fc:	e5bfffcc 	andi	r22,fp,65535
   8a800:	00810ec0 	call	810ec <__udivsi3>
   8a804:	1009883a 	mov	r4,r2
   8a808:	b00b883a 	mov	r5,r22
   8a80c:	1029883a 	mov	r20,r2
   8a810:	008b0d80 	call	8b0d8 <__mulsi3>
   8a814:	8806943a 	slli	r3,r17,16
   8a818:	8014d43a 	srli	r10,r16,16
   8a81c:	1a92b03a 	or	r9,r3,r10
   8a820:	4880042e 	bgeu	r9,r2,8a834 <__udivdi3+0x3b8>
   8a824:	4f13883a 	add	r9,r9,fp
   8a828:	a0ffffc4 	addi	r3,r20,-1
   8a82c:	4f00952e 	bgeu	r9,fp,8aa84 <__udivdi3+0x608>
   8a830:	1829883a 	mov	r20,r3
   8a834:	48a3c83a 	sub	r17,r9,r2
   8a838:	8809883a 	mov	r4,r17
   8a83c:	900b883a 	mov	r5,r18
   8a840:	00810f40 	call	810f4 <__umodsi3>
   8a844:	8809883a 	mov	r4,r17
   8a848:	900b883a 	mov	r5,r18
   8a84c:	d8800015 	stw	r2,0(sp)
   8a850:	00810ec0 	call	810ec <__udivsi3>
   8a854:	1009883a 	mov	r4,r2
   8a858:	b00b883a 	mov	r5,r22
   8a85c:	1023883a 	mov	r17,r2
   8a860:	008b0d80 	call	8b0d8 <__mulsi3>
   8a864:	d8c00017 	ldw	r3,0(sp)
   8a868:	823fffcc 	andi	r8,r16,65535
   8a86c:	1806943a 	slli	r3,r3,16
   8a870:	1a20b03a 	or	r16,r3,r8
   8a874:	8080042e 	bgeu	r16,r2,8a888 <__udivdi3+0x40c>
   8a878:	8721883a 	add	r16,r16,fp
   8a87c:	88ffffc4 	addi	r3,r17,-1
   8a880:	87007c2e 	bgeu	r16,fp,8aa74 <__udivdi3+0x5f8>
   8a884:	1823883a 	mov	r17,r3
   8a888:	a028943a 	slli	r20,r20,16
   8a88c:	acbfffcc 	andi	r18,r21,65535
   8a890:	900b883a 	mov	r5,r18
   8a894:	8d28b03a 	or	r20,r17,r20
   8a898:	a022d43a 	srli	r17,r20,16
   8a89c:	a5bfffcc 	andi	r22,r20,65535
   8a8a0:	b009883a 	mov	r4,r22
   8a8a4:	a82ad43a 	srli	r21,r21,16
   8a8a8:	80a1c83a 	sub	r16,r16,r2
   8a8ac:	008b0d80 	call	8b0d8 <__mulsi3>
   8a8b0:	8809883a 	mov	r4,r17
   8a8b4:	900b883a 	mov	r5,r18
   8a8b8:	1039883a 	mov	fp,r2
   8a8bc:	008b0d80 	call	8b0d8 <__mulsi3>
   8a8c0:	8809883a 	mov	r4,r17
   8a8c4:	a80b883a 	mov	r5,r21
   8a8c8:	1025883a 	mov	r18,r2
   8a8cc:	008b0d80 	call	8b0d8 <__mulsi3>
   8a8d0:	b009883a 	mov	r4,r22
   8a8d4:	a80b883a 	mov	r5,r21
   8a8d8:	1023883a 	mov	r17,r2
   8a8dc:	008b0d80 	call	8b0d8 <__mulsi3>
   8a8e0:	e006d43a 	srli	r3,fp,16
   8a8e4:	9085883a 	add	r2,r18,r2
   8a8e8:	10c7883a 	add	r3,r2,r3
   8a8ec:	1c80022e 	bgeu	r3,r18,8a8f8 <__udivdi3+0x47c>
   8a8f0:	00800074 	movhi	r2,1
   8a8f4:	88a3883a 	add	r17,r17,r2
   8a8f8:	1808d43a 	srli	r4,r3,16
   8a8fc:	8909883a 	add	r4,r17,r4
   8a900:	81004436 	bltu	r16,r4,8aa14 <__udivdi3+0x598>
   8a904:	81003e26 	beq	r16,r4,8aa00 <__udivdi3+0x584>
   8a908:	a005883a 	mov	r2,r20
   8a90c:	0007883a 	mov	r3,zero
   8a910:	003f8f06 	br	8a750 <__alt_data_end+0xfffc1370>
   8a914:	91e4983a 	sll	r18,r18,r7
   8a918:	80eed83a 	srl	r23,r16,r3
   8a91c:	81cc983a 	sll	r6,r16,r7
   8a920:	9028d43a 	srli	r20,r18,16
   8a924:	98c6d83a 	srl	r3,r19,r3
   8a928:	b809883a 	mov	r4,r23
   8a92c:	a00b883a 	mov	r5,r20
   8a930:	30ecb03a 	or	r22,r6,r3
   8a934:	99e2983a 	sll	r17,r19,r7
   8a938:	00810f40 	call	810f4 <__umodsi3>
   8a93c:	b809883a 	mov	r4,r23
   8a940:	a00b883a 	mov	r5,r20
   8a944:	1021883a 	mov	r16,r2
   8a948:	957fffcc 	andi	r21,r18,65535
   8a94c:	00810ec0 	call	810ec <__udivsi3>
   8a950:	a80b883a 	mov	r5,r21
   8a954:	1009883a 	mov	r4,r2
   8a958:	102f883a 	mov	r23,r2
   8a95c:	008b0d80 	call	8b0d8 <__mulsi3>
   8a960:	8020943a 	slli	r16,r16,16
   8a964:	b00ad43a 	srli	r5,r22,16
   8a968:	814cb03a 	or	r6,r16,r5
   8a96c:	3080062e 	bgeu	r6,r2,8a988 <__udivdi3+0x50c>
   8a970:	348d883a 	add	r6,r6,r18
   8a974:	b8ffffc4 	addi	r3,r23,-1
   8a978:	34804836 	bltu	r6,r18,8aa9c <__udivdi3+0x620>
   8a97c:	3080472e 	bgeu	r6,r2,8aa9c <__udivdi3+0x620>
   8a980:	bdffff84 	addi	r23,r23,-2
   8a984:	348d883a 	add	r6,r6,r18
   8a988:	30a7c83a 	sub	r19,r6,r2
   8a98c:	9809883a 	mov	r4,r19
   8a990:	a00b883a 	mov	r5,r20
   8a994:	00810f40 	call	810f4 <__umodsi3>
   8a998:	9809883a 	mov	r4,r19
   8a99c:	a00b883a 	mov	r5,r20
   8a9a0:	1039883a 	mov	fp,r2
   8a9a4:	00810ec0 	call	810ec <__udivsi3>
   8a9a8:	1009883a 	mov	r4,r2
   8a9ac:	a80b883a 	mov	r5,r21
   8a9b0:	e038943a 	slli	fp,fp,16
   8a9b4:	1027883a 	mov	r19,r2
   8a9b8:	008b0d80 	call	8b0d8 <__mulsi3>
   8a9bc:	b1bfffcc 	andi	r6,r22,65535
   8a9c0:	e18cb03a 	or	r6,fp,r6
   8a9c4:	3080062e 	bgeu	r6,r2,8a9e0 <__udivdi3+0x564>
   8a9c8:	348d883a 	add	r6,r6,r18
   8a9cc:	98ffffc4 	addi	r3,r19,-1
   8a9d0:	34803036 	bltu	r6,r18,8aa94 <__udivdi3+0x618>
   8a9d4:	30802f2e 	bgeu	r6,r2,8aa94 <__udivdi3+0x618>
   8a9d8:	9cffff84 	addi	r19,r19,-2
   8a9dc:	348d883a 	add	r6,r6,r18
   8a9e0:	b82e943a 	slli	r23,r23,16
   8a9e4:	30a1c83a 	sub	r16,r6,r2
   8a9e8:	9dc6b03a 	or	r3,r19,r23
   8a9ec:	003f2606 	br	8a688 <__alt_data_end+0xfffc12a8>
   8a9f0:	2027883a 	mov	r19,r4
   8a9f4:	003f5106 	br	8a73c <__alt_data_end+0xfffc135c>
   8a9f8:	1827883a 	mov	r19,r3
   8a9fc:	003ef006 	br	8a5c0 <__alt_data_end+0xfffc11e0>
   8aa00:	1808943a 	slli	r4,r3,16
   8aa04:	9dc6983a 	sll	r3,r19,r23
   8aa08:	e73fffcc 	andi	fp,fp,65535
   8aa0c:	2709883a 	add	r4,r4,fp
   8aa10:	193fbd2e 	bgeu	r3,r4,8a908 <__alt_data_end+0xfffc1528>
   8aa14:	a0bfffc4 	addi	r2,r20,-1
   8aa18:	0007883a 	mov	r3,zero
   8aa1c:	003f4c06 	br	8a750 <__alt_data_end+0xfffc1370>
   8aa20:	01400404 	movi	r5,16
   8aa24:	2811883a 	mov	r8,r5
   8aa28:	003ef106 	br	8a5f0 <__alt_data_end+0xfffc1210>
   8aa2c:	000b883a 	mov	r5,zero
   8aa30:	0011883a 	mov	r8,zero
   8aa34:	003eee06 	br	8a5f0 <__alt_data_end+0xfffc1210>
   8aa38:	00800404 	movi	r2,16
   8aa3c:	1007883a 	mov	r3,r2
   8aa40:	003ea606 	br	8a4dc <__alt_data_end+0xfffc10fc>
   8aa44:	00800404 	movi	r2,16
   8aa48:	1007883a 	mov	r3,r2
   8aa4c:	003f0106 	br	8a654 <__alt_data_end+0xfffc1274>
   8aa50:	0005883a 	mov	r2,zero
   8aa54:	0007883a 	mov	r3,zero
   8aa58:	003efe06 	br	8a654 <__alt_data_end+0xfffc1274>
   8aa5c:	0005883a 	mov	r2,zero
   8aa60:	0007883a 	mov	r3,zero
   8aa64:	003e9d06 	br	8a4dc <__alt_data_end+0xfffc10fc>
   8aa68:	0007883a 	mov	r3,zero
   8aa6c:	00800044 	movi	r2,1
   8aa70:	003f3706 	br	8a750 <__alt_data_end+0xfffc1370>
   8aa74:	80bf832e 	bgeu	r16,r2,8a884 <__alt_data_end+0xfffc14a4>
   8aa78:	8c7fff84 	addi	r17,r17,-2
   8aa7c:	8721883a 	add	r16,r16,fp
   8aa80:	003f8106 	br	8a888 <__alt_data_end+0xfffc14a8>
   8aa84:	48bf6a2e 	bgeu	r9,r2,8a830 <__alt_data_end+0xfffc1450>
   8aa88:	a53fff84 	addi	r20,r20,-2
   8aa8c:	4f13883a 	add	r9,r9,fp
   8aa90:	003f6806 	br	8a834 <__alt_data_end+0xfffc1454>
   8aa94:	1827883a 	mov	r19,r3
   8aa98:	003fd106 	br	8a9e0 <__alt_data_end+0xfffc1600>
   8aa9c:	182f883a 	mov	r23,r3
   8aaa0:	003fb906 	br	8a988 <__alt_data_end+0xfffc15a8>
   8aaa4:	843fff84 	addi	r16,r16,-2
   8aaa8:	348d883a 	add	r6,r6,r18
   8aaac:	003f0c06 	br	8a6e0 <__alt_data_end+0xfffc1300>
   8aab0:	843fff84 	addi	r16,r16,-2
   8aab4:	1c87883a 	add	r3,r3,r18
   8aab8:	003eac06 	br	8a56c <__alt_data_end+0xfffc118c>

0008aabc <__umoddi3>:
   8aabc:	defff404 	addi	sp,sp,-48
   8aac0:	dd800815 	stw	r22,32(sp)
   8aac4:	dc400315 	stw	r17,12(sp)
   8aac8:	dc000215 	stw	r16,8(sp)
   8aacc:	dfc00b15 	stw	ra,44(sp)
   8aad0:	df000a15 	stw	fp,40(sp)
   8aad4:	ddc00915 	stw	r23,36(sp)
   8aad8:	dd400715 	stw	r21,28(sp)
   8aadc:	dd000615 	stw	r20,24(sp)
   8aae0:	dcc00515 	stw	r19,20(sp)
   8aae4:	dc800415 	stw	r18,16(sp)
   8aae8:	2021883a 	mov	r16,r4
   8aaec:	2823883a 	mov	r17,r5
   8aaf0:	282d883a 	mov	r22,r5
   8aaf4:	38003c1e 	bne	r7,zero,8abe8 <__umoddi3+0x12c>
   8aaf8:	3027883a 	mov	r19,r6
   8aafc:	2029883a 	mov	r20,r4
   8ab00:	2980522e 	bgeu	r5,r6,8ac4c <__umoddi3+0x190>
   8ab04:	00bfffd4 	movui	r2,65535
   8ab08:	1180a436 	bltu	r2,r6,8ad9c <__umoddi3+0x2e0>
   8ab0c:	00803fc4 	movi	r2,255
   8ab10:	11815e2e 	bgeu	r2,r6,8b08c <__umoddi3+0x5d0>
   8ab14:	01400204 	movi	r5,8
   8ab18:	2805883a 	mov	r2,r5
   8ab1c:	314ad83a 	srl	r5,r6,r5
   8ab20:	00c00274 	movhi	r3,9
   8ab24:	18c42a04 	addi	r3,r3,4264
   8ab28:	194b883a 	add	r5,r3,r5
   8ab2c:	29000003 	ldbu	r4,0(r5)
   8ab30:	2089883a 	add	r4,r4,r2
   8ab34:	00800804 	movi	r2,32
   8ab38:	1105c83a 	sub	r2,r2,r4
   8ab3c:	10010c26 	beq	r2,zero,8af70 <__umoddi3+0x4b4>
   8ab40:	88a2983a 	sll	r17,r17,r2
   8ab44:	8108d83a 	srl	r4,r16,r4
   8ab48:	30a6983a 	sll	r19,r6,r2
   8ab4c:	80a8983a 	sll	r20,r16,r2
   8ab50:	1025883a 	mov	r18,r2
   8ab54:	892cb03a 	or	r22,r17,r4
   8ab58:	9822d43a 	srli	r17,r19,16
   8ab5c:	b009883a 	mov	r4,r22
   8ab60:	9d7fffcc 	andi	r21,r19,65535
   8ab64:	880b883a 	mov	r5,r17
   8ab68:	00810f40 	call	810f4 <__umodsi3>
   8ab6c:	b009883a 	mov	r4,r22
   8ab70:	880b883a 	mov	r5,r17
   8ab74:	102f883a 	mov	r23,r2
   8ab78:	00810ec0 	call	810ec <__udivsi3>
   8ab7c:	1009883a 	mov	r4,r2
   8ab80:	a80b883a 	mov	r5,r21
   8ab84:	008b0d80 	call	8b0d8 <__mulsi3>
   8ab88:	b82e943a 	slli	r23,r23,16
   8ab8c:	a008d43a 	srli	r4,r20,16
   8ab90:	b906b03a 	or	r3,r23,r4
   8ab94:	1880042e 	bgeu	r3,r2,8aba8 <__umoddi3+0xec>
   8ab98:	1cc7883a 	add	r3,r3,r19
   8ab9c:	1cc00236 	bltu	r3,r19,8aba8 <__umoddi3+0xec>
   8aba0:	1880012e 	bgeu	r3,r2,8aba8 <__umoddi3+0xec>
   8aba4:	1cc7883a 	add	r3,r3,r19
   8aba8:	18a1c83a 	sub	r16,r3,r2
   8abac:	8009883a 	mov	r4,r16
   8abb0:	880b883a 	mov	r5,r17
   8abb4:	00810f40 	call	810f4 <__umodsi3>
   8abb8:	8009883a 	mov	r4,r16
   8abbc:	880b883a 	mov	r5,r17
   8abc0:	102d883a 	mov	r22,r2
   8abc4:	00810ec0 	call	810ec <__udivsi3>
   8abc8:	1009883a 	mov	r4,r2
   8abcc:	a80b883a 	mov	r5,r21
   8abd0:	b02c943a 	slli	r22,r22,16
   8abd4:	008b0d80 	call	8b0d8 <__mulsi3>
   8abd8:	a13fffcc 	andi	r4,r20,65535
   8abdc:	b106b03a 	or	r3,r22,r4
   8abe0:	1880572e 	bgeu	r3,r2,8ad40 <__umoddi3+0x284>
   8abe4:	00005206 	br	8ad30 <__umoddi3+0x274>
   8abe8:	29c05936 	bltu	r5,r7,8ad50 <__umoddi3+0x294>
   8abec:	00bfffd4 	movui	r2,65535
   8abf0:	11c0652e 	bgeu	r2,r7,8ad88 <__umoddi3+0x2cc>
   8abf4:	00804034 	movhi	r2,256
   8abf8:	10bfffc4 	addi	r2,r2,-1
   8abfc:	11c1172e 	bgeu	r2,r7,8b05c <__umoddi3+0x5a0>
   8ac00:	01400604 	movi	r5,24
   8ac04:	282b883a 	mov	r21,r5
   8ac08:	394ad83a 	srl	r5,r7,r5
   8ac0c:	00c00274 	movhi	r3,9
   8ac10:	18c42a04 	addi	r3,r3,4264
   8ac14:	194b883a 	add	r5,r3,r5
   8ac18:	28800003 	ldbu	r2,0(r5)
   8ac1c:	00c00804 	movi	r3,32
   8ac20:	156b883a 	add	r21,r2,r21
   8ac24:	1d69c83a 	sub	r20,r3,r21
   8ac28:	a000671e 	bne	r20,zero,8adc8 <__umoddi3+0x30c>
   8ac2c:	3c400136 	bltu	r7,r17,8ac34 <__umoddi3+0x178>
   8ac30:	81812336 	bltu	r16,r6,8b0c0 <__umoddi3+0x604>
   8ac34:	8185c83a 	sub	r2,r16,r6
   8ac38:	89e3c83a 	sub	r17,r17,r7
   8ac3c:	8087803a 	cmpltu	r3,r16,r2
   8ac40:	88edc83a 	sub	r22,r17,r3
   8ac44:	b007883a 	mov	r3,r22
   8ac48:	00004306 	br	8ad58 <__umoddi3+0x29c>
   8ac4c:	3000041e 	bne	r6,zero,8ac60 <__umoddi3+0x1a4>
   8ac50:	01000044 	movi	r4,1
   8ac54:	000b883a 	mov	r5,zero
   8ac58:	00810ec0 	call	810ec <__udivsi3>
   8ac5c:	1027883a 	mov	r19,r2
   8ac60:	00bfffd4 	movui	r2,65535
   8ac64:	14c0532e 	bgeu	r2,r19,8adb4 <__umoddi3+0x2f8>
   8ac68:	00804034 	movhi	r2,256
   8ac6c:	10bfffc4 	addi	r2,r2,-1
   8ac70:	14c1032e 	bgeu	r2,r19,8b080 <__umoddi3+0x5c4>
   8ac74:	00800604 	movi	r2,24
   8ac78:	1007883a 	mov	r3,r2
   8ac7c:	9884d83a 	srl	r2,r19,r2
   8ac80:	01000274 	movhi	r4,9
   8ac84:	21042a04 	addi	r4,r4,4264
   8ac88:	2085883a 	add	r2,r4,r2
   8ac8c:	11000003 	ldbu	r4,0(r2)
   8ac90:	00800804 	movi	r2,32
   8ac94:	20c7883a 	add	r3,r4,r3
   8ac98:	10c5c83a 	sub	r2,r2,r3
   8ac9c:	1000b61e 	bne	r2,zero,8af78 <__umoddi3+0x4bc>
   8aca0:	982ad43a 	srli	r21,r19,16
   8aca4:	8ce3c83a 	sub	r17,r17,r19
   8aca8:	9dbfffcc 	andi	r22,r19,65535
   8acac:	0025883a 	mov	r18,zero
   8acb0:	8809883a 	mov	r4,r17
   8acb4:	a80b883a 	mov	r5,r21
   8acb8:	00810f40 	call	810f4 <__umodsi3>
   8acbc:	8809883a 	mov	r4,r17
   8acc0:	a80b883a 	mov	r5,r21
   8acc4:	102f883a 	mov	r23,r2
   8acc8:	00810ec0 	call	810ec <__udivsi3>
   8accc:	1009883a 	mov	r4,r2
   8acd0:	b00b883a 	mov	r5,r22
   8acd4:	008b0d80 	call	8b0d8 <__mulsi3>
   8acd8:	b82e943a 	slli	r23,r23,16
   8acdc:	a008d43a 	srli	r4,r20,16
   8ace0:	b906b03a 	or	r3,r23,r4
   8ace4:	1880032e 	bgeu	r3,r2,8acf4 <__umoddi3+0x238>
   8ace8:	1cc7883a 	add	r3,r3,r19
   8acec:	1cc00136 	bltu	r3,r19,8acf4 <__umoddi3+0x238>
   8acf0:	1880f136 	bltu	r3,r2,8b0b8 <__umoddi3+0x5fc>
   8acf4:	18a1c83a 	sub	r16,r3,r2
   8acf8:	8009883a 	mov	r4,r16
   8acfc:	a80b883a 	mov	r5,r21
   8ad00:	00810f40 	call	810f4 <__umodsi3>
   8ad04:	8009883a 	mov	r4,r16
   8ad08:	a80b883a 	mov	r5,r21
   8ad0c:	1023883a 	mov	r17,r2
   8ad10:	00810ec0 	call	810ec <__udivsi3>
   8ad14:	1009883a 	mov	r4,r2
   8ad18:	b00b883a 	mov	r5,r22
   8ad1c:	8822943a 	slli	r17,r17,16
   8ad20:	008b0d80 	call	8b0d8 <__mulsi3>
   8ad24:	a13fffcc 	andi	r4,r20,65535
   8ad28:	8906b03a 	or	r3,r17,r4
   8ad2c:	1880042e 	bgeu	r3,r2,8ad40 <__umoddi3+0x284>
   8ad30:	1cc7883a 	add	r3,r3,r19
   8ad34:	1cc00236 	bltu	r3,r19,8ad40 <__umoddi3+0x284>
   8ad38:	1880012e 	bgeu	r3,r2,8ad40 <__umoddi3+0x284>
   8ad3c:	1cc7883a 	add	r3,r3,r19
   8ad40:	1887c83a 	sub	r3,r3,r2
   8ad44:	1c84d83a 	srl	r2,r3,r18
   8ad48:	0007883a 	mov	r3,zero
   8ad4c:	00000206 	br	8ad58 <__umoddi3+0x29c>
   8ad50:	2005883a 	mov	r2,r4
   8ad54:	2807883a 	mov	r3,r5
   8ad58:	dfc00b17 	ldw	ra,44(sp)
   8ad5c:	df000a17 	ldw	fp,40(sp)
   8ad60:	ddc00917 	ldw	r23,36(sp)
   8ad64:	dd800817 	ldw	r22,32(sp)
   8ad68:	dd400717 	ldw	r21,28(sp)
   8ad6c:	dd000617 	ldw	r20,24(sp)
   8ad70:	dcc00517 	ldw	r19,20(sp)
   8ad74:	dc800417 	ldw	r18,16(sp)
   8ad78:	dc400317 	ldw	r17,12(sp)
   8ad7c:	dc000217 	ldw	r16,8(sp)
   8ad80:	dec00c04 	addi	sp,sp,48
   8ad84:	f800283a 	ret
   8ad88:	00803fc4 	movi	r2,255
   8ad8c:	11c0b02e 	bgeu	r2,r7,8b050 <__umoddi3+0x594>
   8ad90:	01400204 	movi	r5,8
   8ad94:	282b883a 	mov	r21,r5
   8ad98:	003f9b06 	br	8ac08 <__alt_data_end+0xfffc1828>
   8ad9c:	00804034 	movhi	r2,256
   8ada0:	10bfffc4 	addi	r2,r2,-1
   8ada4:	1180b02e 	bgeu	r2,r6,8b068 <__umoddi3+0x5ac>
   8ada8:	01400604 	movi	r5,24
   8adac:	2805883a 	mov	r2,r5
   8adb0:	003f5a06 	br	8ab1c <__alt_data_end+0xfffc173c>
   8adb4:	00803fc4 	movi	r2,255
   8adb8:	14c0ae2e 	bgeu	r2,r19,8b074 <__umoddi3+0x5b8>
   8adbc:	00800204 	movi	r2,8
   8adc0:	1007883a 	mov	r3,r2
   8adc4:	003fad06 	br	8ac7c <__alt_data_end+0xfffc189c>
   8adc8:	3d0a983a 	sll	r5,r7,r20
   8adcc:	356cd83a 	srl	r22,r6,r21
   8add0:	8d78d83a 	srl	fp,r17,r21
   8add4:	8d10983a 	sll	r8,r17,r20
   8add8:	2dacb03a 	or	r22,r5,r22
   8addc:	b02ed43a 	srli	r23,r22,16
   8ade0:	8564d83a 	srl	r18,r16,r21
   8ade4:	e009883a 	mov	r4,fp
   8ade8:	b80b883a 	mov	r5,r23
   8adec:	44a4b03a 	or	r18,r8,r18
   8adf0:	3526983a 	sll	r19,r6,r20
   8adf4:	00810f40 	call	810f4 <__umodsi3>
   8adf8:	e009883a 	mov	r4,fp
   8adfc:	b80b883a 	mov	r5,r23
   8ae00:	b47fffcc 	andi	r17,r22,65535
   8ae04:	d8800015 	stw	r2,0(sp)
   8ae08:	00810ec0 	call	810ec <__udivsi3>
   8ae0c:	1009883a 	mov	r4,r2
   8ae10:	880b883a 	mov	r5,r17
   8ae14:	1039883a 	mov	fp,r2
   8ae18:	008b0d80 	call	8b0d8 <__mulsi3>
   8ae1c:	d9800017 	ldw	r6,0(sp)
   8ae20:	9008d43a 	srli	r4,r18,16
   8ae24:	8520983a 	sll	r16,r16,r20
   8ae28:	300c943a 	slli	r6,r6,16
   8ae2c:	3106b03a 	or	r3,r6,r4
   8ae30:	1880042e 	bgeu	r3,r2,8ae44 <__umoddi3+0x388>
   8ae34:	1d87883a 	add	r3,r3,r22
   8ae38:	e13fffc4 	addi	r4,fp,-1
   8ae3c:	1d809a2e 	bgeu	r3,r22,8b0a8 <__umoddi3+0x5ec>
   8ae40:	2039883a 	mov	fp,r4
   8ae44:	1887c83a 	sub	r3,r3,r2
   8ae48:	1809883a 	mov	r4,r3
   8ae4c:	b80b883a 	mov	r5,r23
   8ae50:	d8c00115 	stw	r3,4(sp)
   8ae54:	00810f40 	call	810f4 <__umodsi3>
   8ae58:	d8c00117 	ldw	r3,4(sp)
   8ae5c:	b80b883a 	mov	r5,r23
   8ae60:	d8800015 	stw	r2,0(sp)
   8ae64:	1809883a 	mov	r4,r3
   8ae68:	00810ec0 	call	810ec <__udivsi3>
   8ae6c:	880b883a 	mov	r5,r17
   8ae70:	1009883a 	mov	r4,r2
   8ae74:	102f883a 	mov	r23,r2
   8ae78:	008b0d80 	call	8b0d8 <__mulsi3>
   8ae7c:	d9800017 	ldw	r6,0(sp)
   8ae80:	947fffcc 	andi	r17,r18,65535
   8ae84:	300c943a 	slli	r6,r6,16
   8ae88:	3464b03a 	or	r18,r6,r17
   8ae8c:	9080042e 	bgeu	r18,r2,8aea0 <__umoddi3+0x3e4>
   8ae90:	95a5883a 	add	r18,r18,r22
   8ae94:	b8ffffc4 	addi	r3,r23,-1
   8ae98:	95807f2e 	bgeu	r18,r22,8b098 <__umoddi3+0x5dc>
   8ae9c:	182f883a 	mov	r23,r3
   8aea0:	e038943a 	slli	fp,fp,16
   8aea4:	980cd43a 	srli	r6,r19,16
   8aea8:	98ffffcc 	andi	r3,r19,65535
   8aeac:	bf38b03a 	or	fp,r23,fp
   8aeb0:	e02ed43a 	srli	r23,fp,16
   8aeb4:	e73fffcc 	andi	fp,fp,65535
   8aeb8:	180b883a 	mov	r5,r3
   8aebc:	e009883a 	mov	r4,fp
   8aec0:	d9800015 	stw	r6,0(sp)
   8aec4:	d8c00115 	stw	r3,4(sp)
   8aec8:	90a5c83a 	sub	r18,r18,r2
   8aecc:	008b0d80 	call	8b0d8 <__mulsi3>
   8aed0:	d8c00117 	ldw	r3,4(sp)
   8aed4:	b809883a 	mov	r4,r23
   8aed8:	1023883a 	mov	r17,r2
   8aedc:	180b883a 	mov	r5,r3
   8aee0:	008b0d80 	call	8b0d8 <__mulsi3>
   8aee4:	d9800017 	ldw	r6,0(sp)
   8aee8:	b809883a 	mov	r4,r23
   8aeec:	d8800115 	stw	r2,4(sp)
   8aef0:	300b883a 	mov	r5,r6
   8aef4:	302f883a 	mov	r23,r6
   8aef8:	008b0d80 	call	8b0d8 <__mulsi3>
   8aefc:	e009883a 	mov	r4,fp
   8af00:	b80b883a 	mov	r5,r23
   8af04:	d8800015 	stw	r2,0(sp)
   8af08:	008b0d80 	call	8b0d8 <__mulsi3>
   8af0c:	d8c00117 	ldw	r3,4(sp)
   8af10:	880cd43a 	srli	r6,r17,16
   8af14:	d9c00017 	ldw	r7,0(sp)
   8af18:	1885883a 	add	r2,r3,r2
   8af1c:	118d883a 	add	r6,r2,r6
   8af20:	30c0022e 	bgeu	r6,r3,8af2c <__umoddi3+0x470>
   8af24:	00800074 	movhi	r2,1
   8af28:	388f883a 	add	r7,r7,r2
   8af2c:	3006d43a 	srli	r3,r6,16
   8af30:	300c943a 	slli	r6,r6,16
   8af34:	8c7fffcc 	andi	r17,r17,65535
   8af38:	38c7883a 	add	r3,r7,r3
   8af3c:	3463883a 	add	r17,r6,r17
   8af40:	90c03d36 	bltu	r18,r3,8b038 <__umoddi3+0x57c>
   8af44:	90c06026 	beq	r18,r3,8b0c8 <__umoddi3+0x60c>
   8af48:	90c9c83a 	sub	r4,r18,r3
   8af4c:	880f883a 	mov	r7,r17
   8af50:	81cfc83a 	sub	r7,r16,r7
   8af54:	81c7803a 	cmpltu	r3,r16,r7
   8af58:	20c7c83a 	sub	r3,r4,r3
   8af5c:	1d44983a 	sll	r2,r3,r21
   8af60:	3d0ed83a 	srl	r7,r7,r20
   8af64:	1d06d83a 	srl	r3,r3,r20
   8af68:	11c4b03a 	or	r2,r2,r7
   8af6c:	003f7a06 	br	8ad58 <__alt_data_end+0xfffc1978>
   8af70:	0025883a 	mov	r18,zero
   8af74:	003ef806 	br	8ab58 <__alt_data_end+0xfffc1778>
   8af78:	98a6983a 	sll	r19,r19,r2
   8af7c:	88e8d83a 	srl	r20,r17,r3
   8af80:	80c6d83a 	srl	r3,r16,r3
   8af84:	982ad43a 	srli	r21,r19,16
   8af88:	88a2983a 	sll	r17,r17,r2
   8af8c:	a009883a 	mov	r4,r20
   8af90:	a80b883a 	mov	r5,r21
   8af94:	88eeb03a 	or	r23,r17,r3
   8af98:	1025883a 	mov	r18,r2
   8af9c:	00810f40 	call	810f4 <__umodsi3>
   8afa0:	a009883a 	mov	r4,r20
   8afa4:	a80b883a 	mov	r5,r21
   8afa8:	1023883a 	mov	r17,r2
   8afac:	9dbfffcc 	andi	r22,r19,65535
   8afb0:	00810ec0 	call	810ec <__udivsi3>
   8afb4:	1009883a 	mov	r4,r2
   8afb8:	b00b883a 	mov	r5,r22
   8afbc:	008b0d80 	call	8b0d8 <__mulsi3>
   8afc0:	8822943a 	slli	r17,r17,16
   8afc4:	b808d43a 	srli	r4,r23,16
   8afc8:	84a8983a 	sll	r20,r16,r18
   8afcc:	8906b03a 	or	r3,r17,r4
   8afd0:	1880042e 	bgeu	r3,r2,8afe4 <__umoddi3+0x528>
   8afd4:	1cc7883a 	add	r3,r3,r19
   8afd8:	1cc00236 	bltu	r3,r19,8afe4 <__umoddi3+0x528>
   8afdc:	1880012e 	bgeu	r3,r2,8afe4 <__umoddi3+0x528>
   8afe0:	1cc7883a 	add	r3,r3,r19
   8afe4:	18a1c83a 	sub	r16,r3,r2
   8afe8:	8009883a 	mov	r4,r16
   8afec:	a80b883a 	mov	r5,r21
   8aff0:	00810f40 	call	810f4 <__umodsi3>
   8aff4:	8009883a 	mov	r4,r16
   8aff8:	a80b883a 	mov	r5,r21
   8affc:	1039883a 	mov	fp,r2
   8b000:	00810ec0 	call	810ec <__udivsi3>
   8b004:	1009883a 	mov	r4,r2
   8b008:	b00b883a 	mov	r5,r22
   8b00c:	008b0d80 	call	8b0d8 <__mulsi3>
   8b010:	e006943a 	slli	r3,fp,16
   8b014:	b93fffcc 	andi	r4,r23,65535
   8b018:	1906b03a 	or	r3,r3,r4
   8b01c:	1880042e 	bgeu	r3,r2,8b030 <__umoddi3+0x574>
   8b020:	1cc7883a 	add	r3,r3,r19
   8b024:	1cc00236 	bltu	r3,r19,8b030 <__umoddi3+0x574>
   8b028:	1880012e 	bgeu	r3,r2,8b030 <__umoddi3+0x574>
   8b02c:	1cc7883a 	add	r3,r3,r19
   8b030:	18a3c83a 	sub	r17,r3,r2
   8b034:	003f1e06 	br	8acb0 <__alt_data_end+0xfffc18d0>
   8b038:	8ccfc83a 	sub	r7,r17,r19
   8b03c:	1d89c83a 	sub	r4,r3,r22
   8b040:	89e3803a 	cmpltu	r17,r17,r7
   8b044:	2463c83a 	sub	r17,r4,r17
   8b048:	9449c83a 	sub	r4,r18,r17
   8b04c:	003fc006 	br	8af50 <__alt_data_end+0xfffc1b70>
   8b050:	000b883a 	mov	r5,zero
   8b054:	002b883a 	mov	r21,zero
   8b058:	003eeb06 	br	8ac08 <__alt_data_end+0xfffc1828>
   8b05c:	01400404 	movi	r5,16
   8b060:	282b883a 	mov	r21,r5
   8b064:	003ee806 	br	8ac08 <__alt_data_end+0xfffc1828>
   8b068:	01400404 	movi	r5,16
   8b06c:	2805883a 	mov	r2,r5
   8b070:	003eaa06 	br	8ab1c <__alt_data_end+0xfffc173c>
   8b074:	0005883a 	mov	r2,zero
   8b078:	0007883a 	mov	r3,zero
   8b07c:	003eff06 	br	8ac7c <__alt_data_end+0xfffc189c>
   8b080:	00800404 	movi	r2,16
   8b084:	1007883a 	mov	r3,r2
   8b088:	003efc06 	br	8ac7c <__alt_data_end+0xfffc189c>
   8b08c:	000b883a 	mov	r5,zero
   8b090:	0005883a 	mov	r2,zero
   8b094:	003ea106 	br	8ab1c <__alt_data_end+0xfffc173c>
   8b098:	90bf802e 	bgeu	r18,r2,8ae9c <__alt_data_end+0xfffc1abc>
   8b09c:	bdffff84 	addi	r23,r23,-2
   8b0a0:	95a5883a 	add	r18,r18,r22
   8b0a4:	003f7e06 	br	8aea0 <__alt_data_end+0xfffc1ac0>
   8b0a8:	18bf652e 	bgeu	r3,r2,8ae40 <__alt_data_end+0xfffc1a60>
   8b0ac:	e73fff84 	addi	fp,fp,-2
   8b0b0:	1d87883a 	add	r3,r3,r22
   8b0b4:	003f6306 	br	8ae44 <__alt_data_end+0xfffc1a64>
   8b0b8:	1cc7883a 	add	r3,r3,r19
   8b0bc:	003f0d06 	br	8acf4 <__alt_data_end+0xfffc1914>
   8b0c0:	8005883a 	mov	r2,r16
   8b0c4:	003edf06 	br	8ac44 <__alt_data_end+0xfffc1864>
   8b0c8:	847fdb36 	bltu	r16,r17,8b038 <__alt_data_end+0xfffc1c58>
   8b0cc:	880f883a 	mov	r7,r17
   8b0d0:	0009883a 	mov	r4,zero
   8b0d4:	003f9e06 	br	8af50 <__alt_data_end+0xfffc1b70>

0008b0d8 <__mulsi3>:
   8b0d8:	0005883a 	mov	r2,zero
   8b0dc:	20000726 	beq	r4,zero,8b0fc <__mulsi3+0x24>
   8b0e0:	20c0004c 	andi	r3,r4,1
   8b0e4:	2008d07a 	srli	r4,r4,1
   8b0e8:	18000126 	beq	r3,zero,8b0f0 <__mulsi3+0x18>
   8b0ec:	1145883a 	add	r2,r2,r5
   8b0f0:	294b883a 	add	r5,r5,r5
   8b0f4:	203ffa1e 	bne	r4,zero,8b0e0 <__alt_data_end+0xfffc1d00>
   8b0f8:	f800283a 	ret
   8b0fc:	f800283a 	ret

0008b100 <__adddf3>:
   8b100:	02000434 	movhi	r8,16
   8b104:	423fffc4 	addi	r8,r8,-1
   8b108:	defffb04 	addi	sp,sp,-20
   8b10c:	2a12703a 	and	r9,r5,r8
   8b110:	2806d7fa 	srli	r3,r5,31
   8b114:	3a10703a 	and	r8,r7,r8
   8b118:	3804d53a 	srli	r2,r7,20
   8b11c:	3014d77a 	srli	r10,r6,29
   8b120:	dc000015 	stw	r16,0(sp)
   8b124:	481290fa 	slli	r9,r9,3
   8b128:	2820d53a 	srli	r16,r5,20
   8b12c:	401090fa 	slli	r8,r8,3
   8b130:	200ad77a 	srli	r5,r4,29
   8b134:	380ed7fa 	srli	r7,r7,31
   8b138:	dc800215 	stw	r18,8(sp)
   8b13c:	dc400115 	stw	r17,4(sp)
   8b140:	dfc00415 	stw	ra,16(sp)
   8b144:	dcc00315 	stw	r19,12(sp)
   8b148:	1c803fcc 	andi	r18,r3,255
   8b14c:	8401ffcc 	andi	r16,r16,2047
   8b150:	494ab03a 	or	r5,r9,r5
   8b154:	202290fa 	slli	r17,r4,3
   8b158:	1081ffcc 	andi	r2,r2,2047
   8b15c:	4290b03a 	or	r8,r8,r10
   8b160:	300c90fa 	slli	r6,r6,3
   8b164:	91c07026 	beq	r18,r7,8b328 <__adddf3+0x228>
   8b168:	8087c83a 	sub	r3,r16,r2
   8b16c:	00c0b30e 	bge	zero,r3,8b43c <__adddf3+0x33c>
   8b170:	10002a1e 	bne	r2,zero,8b21c <__adddf3+0x11c>
   8b174:	4184b03a 	or	r2,r8,r6
   8b178:	1000991e 	bne	r2,zero,8b3e0 <__adddf3+0x2e0>
   8b17c:	888001cc 	andi	r2,r17,7
   8b180:	10005b26 	beq	r2,zero,8b2f0 <__adddf3+0x1f0>
   8b184:	88c003cc 	andi	r3,r17,15
   8b188:	00800104 	movi	r2,4
   8b18c:	18805826 	beq	r3,r2,8b2f0 <__adddf3+0x1f0>
   8b190:	89800104 	addi	r6,r17,4
   8b194:	3463803a 	cmpltu	r17,r6,r17
   8b198:	2c4b883a 	add	r5,r5,r17
   8b19c:	2880202c 	andhi	r2,r5,128
   8b1a0:	9007883a 	mov	r3,r18
   8b1a4:	3023883a 	mov	r17,r6
   8b1a8:	10005426 	beq	r2,zero,8b2fc <__adddf3+0x1fc>
   8b1ac:	84000044 	addi	r16,r16,1
   8b1b0:	0081ffc4 	movi	r2,2047
   8b1b4:	8080c126 	beq	r16,r2,8b4bc <__adddf3+0x3bc>
   8b1b8:	013fe034 	movhi	r4,65408
   8b1bc:	213fffc4 	addi	r4,r4,-1
   8b1c0:	290a703a 	and	r5,r5,r4
   8b1c4:	2804977a 	slli	r2,r5,29
   8b1c8:	280a927a 	slli	r5,r5,9
   8b1cc:	8822d0fa 	srli	r17,r17,3
   8b1d0:	8401ffcc 	andi	r16,r16,2047
   8b1d4:	2808d33a 	srli	r4,r5,12
   8b1d8:	1444b03a 	or	r2,r2,r17
   8b1dc:	8401ffcc 	andi	r16,r16,2047
   8b1e0:	800a953a 	slli	r5,r16,20
   8b1e4:	18c03fcc 	andi	r3,r3,255
   8b1e8:	04000434 	movhi	r16,16
   8b1ec:	180697fa 	slli	r3,r3,31
   8b1f0:	843fffc4 	addi	r16,r16,-1
   8b1f4:	2420703a 	and	r16,r4,r16
   8b1f8:	8160b03a 	or	r16,r16,r5
   8b1fc:	80c6b03a 	or	r3,r16,r3
   8b200:	dfc00417 	ldw	ra,16(sp)
   8b204:	dcc00317 	ldw	r19,12(sp)
   8b208:	dc800217 	ldw	r18,8(sp)
   8b20c:	dc400117 	ldw	r17,4(sp)
   8b210:	dc000017 	ldw	r16,0(sp)
   8b214:	dec00504 	addi	sp,sp,20
   8b218:	f800283a 	ret
   8b21c:	0081ffc4 	movi	r2,2047
   8b220:	80bfd626 	beq	r16,r2,8b17c <__alt_data_end+0xfffc1d9c>
   8b224:	42002034 	orhi	r8,r8,128
   8b228:	00800e04 	movi	r2,56
   8b22c:	10c0a616 	blt	r2,r3,8b4c8 <__adddf3+0x3c8>
   8b230:	008007c4 	movi	r2,31
   8b234:	10c0c916 	blt	r2,r3,8b55c <__adddf3+0x45c>
   8b238:	00800804 	movi	r2,32
   8b23c:	10c5c83a 	sub	r2,r2,r3
   8b240:	408e983a 	sll	r7,r8,r2
   8b244:	30c8d83a 	srl	r4,r6,r3
   8b248:	3084983a 	sll	r2,r6,r2
   8b24c:	40c6d83a 	srl	r3,r8,r3
   8b250:	390cb03a 	or	r6,r7,r4
   8b254:	1004c03a 	cmpne	r2,r2,zero
   8b258:	308cb03a 	or	r6,r6,r2
   8b25c:	898dc83a 	sub	r6,r17,r6
   8b260:	89a3803a 	cmpltu	r17,r17,r6
   8b264:	28cbc83a 	sub	r5,r5,r3
   8b268:	2c4bc83a 	sub	r5,r5,r17
   8b26c:	3023883a 	mov	r17,r6
   8b270:	2880202c 	andhi	r2,r5,128
   8b274:	10006d26 	beq	r2,zero,8b42c <__adddf3+0x32c>
   8b278:	04c02034 	movhi	r19,128
   8b27c:	9cffffc4 	addi	r19,r19,-1
   8b280:	2ce6703a 	and	r19,r5,r19
   8b284:	98007e26 	beq	r19,zero,8b480 <__adddf3+0x380>
   8b288:	9809883a 	mov	r4,r19
   8b28c:	008d8980 	call	8d898 <__clzsi2>
   8b290:	10fffe04 	addi	r3,r2,-8
   8b294:	010007c4 	movi	r4,31
   8b298:	20c07f16 	blt	r4,r3,8b498 <__adddf3+0x398>
   8b29c:	01400a04 	movi	r5,40
   8b2a0:	2885c83a 	sub	r2,r5,r2
   8b2a4:	888ad83a 	srl	r5,r17,r2
   8b2a8:	98e6983a 	sll	r19,r19,r3
   8b2ac:	88e2983a 	sll	r17,r17,r3
   8b2b0:	2ce6b03a 	or	r19,r5,r19
   8b2b4:	1c007c16 	blt	r3,r16,8b4a8 <__adddf3+0x3a8>
   8b2b8:	1c21c83a 	sub	r16,r3,r16
   8b2bc:	81400044 	addi	r5,r16,1
   8b2c0:	00c007c4 	movi	r3,31
   8b2c4:	19409816 	blt	r3,r5,8b528 <__adddf3+0x428>
   8b2c8:	1c21c83a 	sub	r16,r3,r16
   8b2cc:	8c08983a 	sll	r4,r17,r16
   8b2d0:	8946d83a 	srl	r3,r17,r5
   8b2d4:	9c20983a 	sll	r16,r19,r16
   8b2d8:	2008c03a 	cmpne	r4,r4,zero
   8b2dc:	994ad83a 	srl	r5,r19,r5
   8b2e0:	1c06b03a 	or	r3,r3,r16
   8b2e4:	1922b03a 	or	r17,r3,r4
   8b2e8:	0021883a 	mov	r16,zero
   8b2ec:	003fa306 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b2f0:	2880202c 	andhi	r2,r5,128
   8b2f4:	9007883a 	mov	r3,r18
   8b2f8:	103fac1e 	bne	r2,zero,8b1ac <__alt_data_end+0xfffc1dcc>
   8b2fc:	2804977a 	slli	r2,r5,29
   8b300:	8822d0fa 	srli	r17,r17,3
   8b304:	0101ffc4 	movi	r4,2047
   8b308:	280ad0fa 	srli	r5,r5,3
   8b30c:	1444b03a 	or	r2,r2,r17
   8b310:	81002c26 	beq	r16,r4,8b3c4 <__adddf3+0x2c4>
   8b314:	8120703a 	and	r16,r16,r4
   8b318:	01000434 	movhi	r4,16
   8b31c:	213fffc4 	addi	r4,r4,-1
   8b320:	2908703a 	and	r4,r5,r4
   8b324:	003fad06 	br	8b1dc <__alt_data_end+0xfffc1dfc>
   8b328:	8089c83a 	sub	r4,r16,r2
   8b32c:	01006a0e 	bge	zero,r4,8b4d8 <__adddf3+0x3d8>
   8b330:	10003326 	beq	r2,zero,8b400 <__adddf3+0x300>
   8b334:	0081ffc4 	movi	r2,2047
   8b338:	80bf9026 	beq	r16,r2,8b17c <__alt_data_end+0xfffc1d9c>
   8b33c:	42002034 	orhi	r8,r8,128
   8b340:	00800e04 	movi	r2,56
   8b344:	1100b116 	blt	r2,r4,8b60c <__adddf3+0x50c>
   8b348:	008007c4 	movi	r2,31
   8b34c:	1100e216 	blt	r2,r4,8b6d8 <__adddf3+0x5d8>
   8b350:	00800804 	movi	r2,32
   8b354:	1105c83a 	sub	r2,r2,r4
   8b358:	4092983a 	sll	r9,r8,r2
   8b35c:	310ed83a 	srl	r7,r6,r4
   8b360:	3084983a 	sll	r2,r6,r2
   8b364:	4110d83a 	srl	r8,r8,r4
   8b368:	49ccb03a 	or	r6,r9,r7
   8b36c:	1004c03a 	cmpne	r2,r2,zero
   8b370:	308cb03a 	or	r6,r6,r2
   8b374:	344d883a 	add	r6,r6,r17
   8b378:	3463803a 	cmpltu	r17,r6,r17
   8b37c:	414b883a 	add	r5,r8,r5
   8b380:	2c4b883a 	add	r5,r5,r17
   8b384:	3023883a 	mov	r17,r6
   8b388:	2880202c 	andhi	r2,r5,128
   8b38c:	10002726 	beq	r2,zero,8b42c <__adddf3+0x32c>
   8b390:	84000044 	addi	r16,r16,1
   8b394:	0081ffc4 	movi	r2,2047
   8b398:	8080ae26 	beq	r16,r2,8b654 <__adddf3+0x554>
   8b39c:	00bfe034 	movhi	r2,65408
   8b3a0:	10bfffc4 	addi	r2,r2,-1
   8b3a4:	288a703a 	and	r5,r5,r2
   8b3a8:	880cd07a 	srli	r6,r17,1
   8b3ac:	280897fa 	slli	r4,r5,31
   8b3b0:	88c0004c 	andi	r3,r17,1
   8b3b4:	30e2b03a 	or	r17,r6,r3
   8b3b8:	280ad07a 	srli	r5,r5,1
   8b3bc:	8922b03a 	or	r17,r17,r4
   8b3c0:	003f6e06 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b3c4:	1148b03a 	or	r4,r2,r5
   8b3c8:	20003c26 	beq	r4,zero,8b4bc <__adddf3+0x3bc>
   8b3cc:	29000234 	orhi	r4,r5,8
   8b3d0:	01400434 	movhi	r5,16
   8b3d4:	297fffc4 	addi	r5,r5,-1
   8b3d8:	2148703a 	and	r4,r4,r5
   8b3dc:	003f7f06 	br	8b1dc <__alt_data_end+0xfffc1dfc>
   8b3e0:	18ffffc4 	addi	r3,r3,-1
   8b3e4:	18004d1e 	bne	r3,zero,8b51c <__adddf3+0x41c>
   8b3e8:	898dc83a 	sub	r6,r17,r6
   8b3ec:	89a3803a 	cmpltu	r17,r17,r6
   8b3f0:	2a0bc83a 	sub	r5,r5,r8
   8b3f4:	2c4bc83a 	sub	r5,r5,r17
   8b3f8:	3023883a 	mov	r17,r6
   8b3fc:	003f9c06 	br	8b270 <__alt_data_end+0xfffc1e90>
   8b400:	4184b03a 	or	r2,r8,r6
   8b404:	103f5d26 	beq	r2,zero,8b17c <__alt_data_end+0xfffc1d9c>
   8b408:	213fffc4 	addi	r4,r4,-1
   8b40c:	203fd926 	beq	r4,zero,8b374 <__alt_data_end+0xfffc1f94>
   8b410:	0081ffc4 	movi	r2,2047
   8b414:	80bfca1e 	bne	r16,r2,8b340 <__alt_data_end+0xfffc1f60>
   8b418:	003f5806 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b41c:	10c8b03a 	or	r4,r2,r3
   8b420:	20008b26 	beq	r4,zero,8b650 <__adddf3+0x550>
   8b424:	100b883a 	mov	r5,r2
   8b428:	1823883a 	mov	r17,r3
   8b42c:	888001cc 	andi	r2,r17,7
   8b430:	103f541e 	bne	r2,zero,8b184 <__alt_data_end+0xfffc1da4>
   8b434:	9007883a 	mov	r3,r18
   8b438:	003fb006 	br	8b2fc <__alt_data_end+0xfffc1f1c>
   8b43c:	1800531e 	bne	r3,zero,8b58c <__adddf3+0x48c>
   8b440:	80800044 	addi	r2,r16,1
   8b444:	1081ffcc 	andi	r2,r2,2047
   8b448:	00c00044 	movi	r3,1
   8b44c:	1880990e 	bge	r3,r2,8b6b4 <__adddf3+0x5b4>
   8b450:	8985c83a 	sub	r2,r17,r6
   8b454:	8887803a 	cmpltu	r3,r17,r2
   8b458:	2a27c83a 	sub	r19,r5,r8
   8b45c:	98e7c83a 	sub	r19,r19,r3
   8b460:	98c0202c 	andhi	r3,r19,128
   8b464:	18006226 	beq	r3,zero,8b5f0 <__adddf3+0x4f0>
   8b468:	3463c83a 	sub	r17,r6,r17
   8b46c:	4151c83a 	sub	r8,r8,r5
   8b470:	344d803a 	cmpltu	r6,r6,r17
   8b474:	41a7c83a 	sub	r19,r8,r6
   8b478:	3825883a 	mov	r18,r7
   8b47c:	983f821e 	bne	r19,zero,8b288 <__alt_data_end+0xfffc1ea8>
   8b480:	8809883a 	mov	r4,r17
   8b484:	008d8980 	call	8d898 <__clzsi2>
   8b488:	10800804 	addi	r2,r2,32
   8b48c:	10fffe04 	addi	r3,r2,-8
   8b490:	010007c4 	movi	r4,31
   8b494:	20ff810e 	bge	r4,r3,8b29c <__alt_data_end+0xfffc1ebc>
   8b498:	14fff604 	addi	r19,r2,-40
   8b49c:	8ce6983a 	sll	r19,r17,r19
   8b4a0:	0023883a 	mov	r17,zero
   8b4a4:	1c3f840e 	bge	r3,r16,8b2b8 <__alt_data_end+0xfffc1ed8>
   8b4a8:	017fe034 	movhi	r5,65408
   8b4ac:	297fffc4 	addi	r5,r5,-1
   8b4b0:	80e1c83a 	sub	r16,r16,r3
   8b4b4:	994a703a 	and	r5,r19,r5
   8b4b8:	003f3006 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b4bc:	0009883a 	mov	r4,zero
   8b4c0:	0005883a 	mov	r2,zero
   8b4c4:	003f4506 	br	8b1dc <__alt_data_end+0xfffc1dfc>
   8b4c8:	418cb03a 	or	r6,r8,r6
   8b4cc:	300cc03a 	cmpne	r6,r6,zero
   8b4d0:	0007883a 	mov	r3,zero
   8b4d4:	003f6106 	br	8b25c <__alt_data_end+0xfffc1e7c>
   8b4d8:	2000921e 	bne	r4,zero,8b724 <__adddf3+0x624>
   8b4dc:	80800044 	addi	r2,r16,1
   8b4e0:	11c1ffcc 	andi	r7,r2,2047
   8b4e4:	01000044 	movi	r4,1
   8b4e8:	21c0610e 	bge	r4,r7,8b670 <__adddf3+0x570>
   8b4ec:	0101ffc4 	movi	r4,2047
   8b4f0:	1100a326 	beq	r2,r4,8b780 <__adddf3+0x680>
   8b4f4:	344d883a 	add	r6,r6,r17
   8b4f8:	3463803a 	cmpltu	r17,r6,r17
   8b4fc:	414b883a 	add	r5,r8,r5
   8b500:	2c4b883a 	add	r5,r5,r17
   8b504:	282297fa 	slli	r17,r5,31
   8b508:	300cd07a 	srli	r6,r6,1
   8b50c:	280ad07a 	srli	r5,r5,1
   8b510:	1021883a 	mov	r16,r2
   8b514:	89a2b03a 	or	r17,r17,r6
   8b518:	003f1806 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b51c:	0081ffc4 	movi	r2,2047
   8b520:	80bf411e 	bne	r16,r2,8b228 <__alt_data_end+0xfffc1e48>
   8b524:	003f1506 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b528:	80bff844 	addi	r2,r16,-31
   8b52c:	00c00804 	movi	r3,32
   8b530:	9884d83a 	srl	r2,r19,r2
   8b534:	28c04a26 	beq	r5,r3,8b660 <__adddf3+0x560>
   8b538:	00c00fc4 	movi	r3,63
   8b53c:	1c21c83a 	sub	r16,r3,r16
   8b540:	9c26983a 	sll	r19,r19,r16
   8b544:	9c62b03a 	or	r17,r19,r17
   8b548:	8822c03a 	cmpne	r17,r17,zero
   8b54c:	88a2b03a 	or	r17,r17,r2
   8b550:	000b883a 	mov	r5,zero
   8b554:	0021883a 	mov	r16,zero
   8b558:	003fb406 	br	8b42c <__alt_data_end+0xfffc204c>
   8b55c:	18bff804 	addi	r2,r3,-32
   8b560:	01000804 	movi	r4,32
   8b564:	4084d83a 	srl	r2,r8,r2
   8b568:	19003f26 	beq	r3,r4,8b668 <__adddf3+0x568>
   8b56c:	01001004 	movi	r4,64
   8b570:	20c7c83a 	sub	r3,r4,r3
   8b574:	40d0983a 	sll	r8,r8,r3
   8b578:	418cb03a 	or	r6,r8,r6
   8b57c:	300cc03a 	cmpne	r6,r6,zero
   8b580:	308cb03a 	or	r6,r6,r2
   8b584:	0007883a 	mov	r3,zero
   8b588:	003f3406 	br	8b25c <__alt_data_end+0xfffc1e7c>
   8b58c:	80002326 	beq	r16,zero,8b61c <__adddf3+0x51c>
   8b590:	0101ffc4 	movi	r4,2047
   8b594:	11005e26 	beq	r2,r4,8b710 <__adddf3+0x610>
   8b598:	00c7c83a 	sub	r3,zero,r3
   8b59c:	29402034 	orhi	r5,r5,128
   8b5a0:	01000e04 	movi	r4,56
   8b5a4:	20c07216 	blt	r4,r3,8b770 <__adddf3+0x670>
   8b5a8:	010007c4 	movi	r4,31
   8b5ac:	20c0ce16 	blt	r4,r3,8b8e8 <__adddf3+0x7e8>
   8b5b0:	01000804 	movi	r4,32
   8b5b4:	20c9c83a 	sub	r4,r4,r3
   8b5b8:	2914983a 	sll	r10,r5,r4
   8b5bc:	88d2d83a 	srl	r9,r17,r3
   8b5c0:	8908983a 	sll	r4,r17,r4
   8b5c4:	28c6d83a 	srl	r3,r5,r3
   8b5c8:	5262b03a 	or	r17,r10,r9
   8b5cc:	2008c03a 	cmpne	r4,r4,zero
   8b5d0:	8922b03a 	or	r17,r17,r4
   8b5d4:	3463c83a 	sub	r17,r6,r17
   8b5d8:	40c7c83a 	sub	r3,r8,r3
   8b5dc:	344d803a 	cmpltu	r6,r6,r17
   8b5e0:	198bc83a 	sub	r5,r3,r6
   8b5e4:	1021883a 	mov	r16,r2
   8b5e8:	3825883a 	mov	r18,r7
   8b5ec:	003f2006 	br	8b270 <__alt_data_end+0xfffc1e90>
   8b5f0:	9886b03a 	or	r3,r19,r2
   8b5f4:	1800141e 	bne	r3,zero,8b648 <__adddf3+0x548>
   8b5f8:	0007883a 	mov	r3,zero
   8b5fc:	000b883a 	mov	r5,zero
   8b600:	0023883a 	mov	r17,zero
   8b604:	0021883a 	mov	r16,zero
   8b608:	003f3c06 	br	8b2fc <__alt_data_end+0xfffc1f1c>
   8b60c:	418cb03a 	or	r6,r8,r6
   8b610:	300cc03a 	cmpne	r6,r6,zero
   8b614:	0011883a 	mov	r8,zero
   8b618:	003f5606 	br	8b374 <__alt_data_end+0xfffc1f94>
   8b61c:	2c48b03a 	or	r4,r5,r17
   8b620:	20003b26 	beq	r4,zero,8b710 <__adddf3+0x610>
   8b624:	00c6303a 	nor	r3,zero,r3
   8b628:	1800371e 	bne	r3,zero,8b708 <__adddf3+0x608>
   8b62c:	3463c83a 	sub	r17,r6,r17
   8b630:	414bc83a 	sub	r5,r8,r5
   8b634:	344d803a 	cmpltu	r6,r6,r17
   8b638:	298bc83a 	sub	r5,r5,r6
   8b63c:	1021883a 	mov	r16,r2
   8b640:	3825883a 	mov	r18,r7
   8b644:	003f0a06 	br	8b270 <__alt_data_end+0xfffc1e90>
   8b648:	1023883a 	mov	r17,r2
   8b64c:	003f0d06 	br	8b284 <__alt_data_end+0xfffc1ea4>
   8b650:	0007883a 	mov	r3,zero
   8b654:	000b883a 	mov	r5,zero
   8b658:	0023883a 	mov	r17,zero
   8b65c:	003f2706 	br	8b2fc <__alt_data_end+0xfffc1f1c>
   8b660:	0027883a 	mov	r19,zero
   8b664:	003fb706 	br	8b544 <__alt_data_end+0xfffc2164>
   8b668:	0011883a 	mov	r8,zero
   8b66c:	003fc206 	br	8b578 <__alt_data_end+0xfffc2198>
   8b670:	2c44b03a 	or	r2,r5,r17
   8b674:	8000871e 	bne	r16,zero,8b894 <__adddf3+0x794>
   8b678:	1000b126 	beq	r2,zero,8b940 <__adddf3+0x840>
   8b67c:	4184b03a 	or	r2,r8,r6
   8b680:	103ebe26 	beq	r2,zero,8b17c <__alt_data_end+0xfffc1d9c>
   8b684:	3445883a 	add	r2,r6,r17
   8b688:	1463803a 	cmpltu	r17,r2,r17
   8b68c:	414b883a 	add	r5,r8,r5
   8b690:	2c4b883a 	add	r5,r5,r17
   8b694:	28c0202c 	andhi	r3,r5,128
   8b698:	1023883a 	mov	r17,r2
   8b69c:	183f6326 	beq	r3,zero,8b42c <__alt_data_end+0xfffc204c>
   8b6a0:	00bfe034 	movhi	r2,65408
   8b6a4:	10bfffc4 	addi	r2,r2,-1
   8b6a8:	2021883a 	mov	r16,r4
   8b6ac:	288a703a 	and	r5,r5,r2
   8b6b0:	003eb206 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b6b4:	2c44b03a 	or	r2,r5,r17
   8b6b8:	8000251e 	bne	r16,zero,8b750 <__adddf3+0x650>
   8b6bc:	10004b1e 	bne	r2,zero,8b7ec <__adddf3+0x6ec>
   8b6c0:	4184b03a 	or	r2,r8,r6
   8b6c4:	103fe226 	beq	r2,zero,8b650 <__alt_data_end+0xfffc2270>
   8b6c8:	400b883a 	mov	r5,r8
   8b6cc:	3023883a 	mov	r17,r6
   8b6d0:	3825883a 	mov	r18,r7
   8b6d4:	003ea906 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b6d8:	20bff804 	addi	r2,r4,-32
   8b6dc:	01c00804 	movi	r7,32
   8b6e0:	4084d83a 	srl	r2,r8,r2
   8b6e4:	21c07e26 	beq	r4,r7,8b8e0 <__adddf3+0x7e0>
   8b6e8:	01c01004 	movi	r7,64
   8b6ec:	3909c83a 	sub	r4,r7,r4
   8b6f0:	4110983a 	sll	r8,r8,r4
   8b6f4:	418cb03a 	or	r6,r8,r6
   8b6f8:	300cc03a 	cmpne	r6,r6,zero
   8b6fc:	308cb03a 	or	r6,r6,r2
   8b700:	0011883a 	mov	r8,zero
   8b704:	003f1b06 	br	8b374 <__alt_data_end+0xfffc1f94>
   8b708:	0101ffc4 	movi	r4,2047
   8b70c:	113fa41e 	bne	r2,r4,8b5a0 <__alt_data_end+0xfffc21c0>
   8b710:	400b883a 	mov	r5,r8
   8b714:	3023883a 	mov	r17,r6
   8b718:	1021883a 	mov	r16,r2
   8b71c:	3825883a 	mov	r18,r7
   8b720:	003e9606 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b724:	80001a1e 	bne	r16,zero,8b790 <__adddf3+0x690>
   8b728:	2c4eb03a 	or	r7,r5,r17
   8b72c:	38005526 	beq	r7,zero,8b884 <__adddf3+0x784>
   8b730:	0108303a 	nor	r4,zero,r4
   8b734:	2000511e 	bne	r4,zero,8b87c <__adddf3+0x77c>
   8b738:	89a3883a 	add	r17,r17,r6
   8b73c:	414b883a 	add	r5,r8,r5
   8b740:	898d803a 	cmpltu	r6,r17,r6
   8b744:	298b883a 	add	r5,r5,r6
   8b748:	1021883a 	mov	r16,r2
   8b74c:	003f0e06 	br	8b388 <__alt_data_end+0xfffc1fa8>
   8b750:	1000341e 	bne	r2,zero,8b824 <__adddf3+0x724>
   8b754:	4184b03a 	or	r2,r8,r6
   8b758:	10006f26 	beq	r2,zero,8b918 <__adddf3+0x818>
   8b75c:	400b883a 	mov	r5,r8
   8b760:	3023883a 	mov	r17,r6
   8b764:	3825883a 	mov	r18,r7
   8b768:	0401ffc4 	movi	r16,2047
   8b76c:	003e8306 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b770:	2c62b03a 	or	r17,r5,r17
   8b774:	8822c03a 	cmpne	r17,r17,zero
   8b778:	0007883a 	mov	r3,zero
   8b77c:	003f9506 	br	8b5d4 <__alt_data_end+0xfffc21f4>
   8b780:	1021883a 	mov	r16,r2
   8b784:	000b883a 	mov	r5,zero
   8b788:	0023883a 	mov	r17,zero
   8b78c:	003edb06 	br	8b2fc <__alt_data_end+0xfffc1f1c>
   8b790:	01c1ffc4 	movi	r7,2047
   8b794:	11c03b26 	beq	r2,r7,8b884 <__adddf3+0x784>
   8b798:	0109c83a 	sub	r4,zero,r4
   8b79c:	29402034 	orhi	r5,r5,128
   8b7a0:	01c00e04 	movi	r7,56
   8b7a4:	39006216 	blt	r7,r4,8b930 <__adddf3+0x830>
   8b7a8:	01c007c4 	movi	r7,31
   8b7ac:	39006b16 	blt	r7,r4,8b95c <__adddf3+0x85c>
   8b7b0:	01c00804 	movi	r7,32
   8b7b4:	390fc83a 	sub	r7,r7,r4
   8b7b8:	29d4983a 	sll	r10,r5,r7
   8b7bc:	8912d83a 	srl	r9,r17,r4
   8b7c0:	89ce983a 	sll	r7,r17,r7
   8b7c4:	2908d83a 	srl	r4,r5,r4
   8b7c8:	5262b03a 	or	r17,r10,r9
   8b7cc:	380ac03a 	cmpne	r5,r7,zero
   8b7d0:	8962b03a 	or	r17,r17,r5
   8b7d4:	89a3883a 	add	r17,r17,r6
   8b7d8:	2211883a 	add	r8,r4,r8
   8b7dc:	898d803a 	cmpltu	r6,r17,r6
   8b7e0:	418b883a 	add	r5,r8,r6
   8b7e4:	1021883a 	mov	r16,r2
   8b7e8:	003ee706 	br	8b388 <__alt_data_end+0xfffc1fa8>
   8b7ec:	4184b03a 	or	r2,r8,r6
   8b7f0:	103e6226 	beq	r2,zero,8b17c <__alt_data_end+0xfffc1d9c>
   8b7f4:	8987c83a 	sub	r3,r17,r6
   8b7f8:	88c9803a 	cmpltu	r4,r17,r3
   8b7fc:	2a05c83a 	sub	r2,r5,r8
   8b800:	1105c83a 	sub	r2,r2,r4
   8b804:	1100202c 	andhi	r4,r2,128
   8b808:	203f0426 	beq	r4,zero,8b41c <__alt_data_end+0xfffc203c>
   8b80c:	3463c83a 	sub	r17,r6,r17
   8b810:	414bc83a 	sub	r5,r8,r5
   8b814:	344d803a 	cmpltu	r6,r6,r17
   8b818:	298bc83a 	sub	r5,r5,r6
   8b81c:	3825883a 	mov	r18,r7
   8b820:	003e5606 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b824:	4184b03a 	or	r2,r8,r6
   8b828:	10002b26 	beq	r2,zero,8b8d8 <__adddf3+0x7d8>
   8b82c:	2804d0fa 	srli	r2,r5,3
   8b830:	8822d0fa 	srli	r17,r17,3
   8b834:	280a977a 	slli	r5,r5,29
   8b838:	10c0022c 	andhi	r3,r2,8
   8b83c:	2c62b03a 	or	r17,r5,r17
   8b840:	18000826 	beq	r3,zero,8b864 <__adddf3+0x764>
   8b844:	4008d0fa 	srli	r4,r8,3
   8b848:	20c0022c 	andhi	r3,r4,8
   8b84c:	1800051e 	bne	r3,zero,8b864 <__adddf3+0x764>
   8b850:	300cd0fa 	srli	r6,r6,3
   8b854:	4010977a 	slli	r8,r8,29
   8b858:	2005883a 	mov	r2,r4
   8b85c:	3825883a 	mov	r18,r7
   8b860:	41a2b03a 	or	r17,r8,r6
   8b864:	880ad77a 	srli	r5,r17,29
   8b868:	100490fa 	slli	r2,r2,3
   8b86c:	882290fa 	slli	r17,r17,3
   8b870:	0401ffc4 	movi	r16,2047
   8b874:	288ab03a 	or	r5,r5,r2
   8b878:	003e4006 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b87c:	01c1ffc4 	movi	r7,2047
   8b880:	11ffc71e 	bne	r2,r7,8b7a0 <__alt_data_end+0xfffc23c0>
   8b884:	400b883a 	mov	r5,r8
   8b888:	3023883a 	mov	r17,r6
   8b88c:	1021883a 	mov	r16,r2
   8b890:	003e3a06 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b894:	10002d26 	beq	r2,zero,8b94c <__adddf3+0x84c>
   8b898:	4184b03a 	or	r2,r8,r6
   8b89c:	10000e26 	beq	r2,zero,8b8d8 <__adddf3+0x7d8>
   8b8a0:	2804d0fa 	srli	r2,r5,3
   8b8a4:	8822d0fa 	srli	r17,r17,3
   8b8a8:	280a977a 	slli	r5,r5,29
   8b8ac:	10c0022c 	andhi	r3,r2,8
   8b8b0:	2c62b03a 	or	r17,r5,r17
   8b8b4:	183feb26 	beq	r3,zero,8b864 <__alt_data_end+0xfffc2484>
   8b8b8:	4008d0fa 	srli	r4,r8,3
   8b8bc:	20c0022c 	andhi	r3,r4,8
   8b8c0:	183fe81e 	bne	r3,zero,8b864 <__alt_data_end+0xfffc2484>
   8b8c4:	300cd0fa 	srli	r6,r6,3
   8b8c8:	4010977a 	slli	r8,r8,29
   8b8cc:	2005883a 	mov	r2,r4
   8b8d0:	41a2b03a 	or	r17,r8,r6
   8b8d4:	003fe306 	br	8b864 <__alt_data_end+0xfffc2484>
   8b8d8:	0401ffc4 	movi	r16,2047
   8b8dc:	003e2706 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b8e0:	0011883a 	mov	r8,zero
   8b8e4:	003f8306 	br	8b6f4 <__alt_data_end+0xfffc2314>
   8b8e8:	193ff804 	addi	r4,r3,-32
   8b8ec:	02400804 	movi	r9,32
   8b8f0:	2908d83a 	srl	r4,r5,r4
   8b8f4:	1a402526 	beq	r3,r9,8b98c <__adddf3+0x88c>
   8b8f8:	02401004 	movi	r9,64
   8b8fc:	48c7c83a 	sub	r3,r9,r3
   8b900:	28ca983a 	sll	r5,r5,r3
   8b904:	2c62b03a 	or	r17,r5,r17
   8b908:	8822c03a 	cmpne	r17,r17,zero
   8b90c:	8922b03a 	or	r17,r17,r4
   8b910:	0007883a 	mov	r3,zero
   8b914:	003f2f06 	br	8b5d4 <__alt_data_end+0xfffc21f4>
   8b918:	01402034 	movhi	r5,128
   8b91c:	0007883a 	mov	r3,zero
   8b920:	297fffc4 	addi	r5,r5,-1
   8b924:	047ffe04 	movi	r17,-8
   8b928:	0401ffc4 	movi	r16,2047
   8b92c:	003e7306 	br	8b2fc <__alt_data_end+0xfffc1f1c>
   8b930:	2c62b03a 	or	r17,r5,r17
   8b934:	8822c03a 	cmpne	r17,r17,zero
   8b938:	0009883a 	mov	r4,zero
   8b93c:	003fa506 	br	8b7d4 <__alt_data_end+0xfffc23f4>
   8b940:	400b883a 	mov	r5,r8
   8b944:	3023883a 	mov	r17,r6
   8b948:	003e0c06 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b94c:	400b883a 	mov	r5,r8
   8b950:	3023883a 	mov	r17,r6
   8b954:	0401ffc4 	movi	r16,2047
   8b958:	003e0806 	br	8b17c <__alt_data_end+0xfffc1d9c>
   8b95c:	21fff804 	addi	r7,r4,-32
   8b960:	02400804 	movi	r9,32
   8b964:	29ced83a 	srl	r7,r5,r7
   8b968:	22400a26 	beq	r4,r9,8b994 <__adddf3+0x894>
   8b96c:	02401004 	movi	r9,64
   8b970:	4909c83a 	sub	r4,r9,r4
   8b974:	290a983a 	sll	r5,r5,r4
   8b978:	2c62b03a 	or	r17,r5,r17
   8b97c:	8822c03a 	cmpne	r17,r17,zero
   8b980:	89e2b03a 	or	r17,r17,r7
   8b984:	0009883a 	mov	r4,zero
   8b988:	003f9206 	br	8b7d4 <__alt_data_end+0xfffc23f4>
   8b98c:	000b883a 	mov	r5,zero
   8b990:	003fdc06 	br	8b904 <__alt_data_end+0xfffc2524>
   8b994:	000b883a 	mov	r5,zero
   8b998:	003ff706 	br	8b978 <__alt_data_end+0xfffc2598>

0008b99c <__divdf3>:
   8b99c:	defff004 	addi	sp,sp,-64
   8b9a0:	dc800815 	stw	r18,32(sp)
   8b9a4:	2824d53a 	srli	r18,r5,20
   8b9a8:	dd800c15 	stw	r22,48(sp)
   8b9ac:	282cd7fa 	srli	r22,r5,31
   8b9b0:	dc000615 	stw	r16,24(sp)
   8b9b4:	04000434 	movhi	r16,16
   8b9b8:	df000e15 	stw	fp,56(sp)
   8b9bc:	dd000a15 	stw	r20,40(sp)
   8b9c0:	dcc00915 	stw	r19,36(sp)
   8b9c4:	dc400715 	stw	r17,28(sp)
   8b9c8:	843fffc4 	addi	r16,r16,-1
   8b9cc:	dfc00f15 	stw	ra,60(sp)
   8b9d0:	ddc00d15 	stw	r23,52(sp)
   8b9d4:	dd400b15 	stw	r21,44(sp)
   8b9d8:	9481ffcc 	andi	r18,r18,2047
   8b9dc:	2029883a 	mov	r20,r4
   8b9e0:	2027883a 	mov	r19,r4
   8b9e4:	2c22703a 	and	r17,r5,r16
   8b9e8:	b7003fcc 	andi	fp,r22,255
   8b9ec:	90005e26 	beq	r18,zero,8bb68 <__divdf3+0x1cc>
   8b9f0:	0081ffc4 	movi	r2,2047
   8b9f4:	90803526 	beq	r18,r2,8bacc <__divdf3+0x130>
   8b9f8:	8c000434 	orhi	r16,r17,16
   8b9fc:	2004d77a 	srli	r2,r4,29
   8ba00:	802090fa 	slli	r16,r16,3
   8ba04:	202690fa 	slli	r19,r4,3
   8ba08:	94bf0044 	addi	r18,r18,-1023
   8ba0c:	80a2b03a 	or	r17,r16,r2
   8ba10:	0029883a 	mov	r20,zero
   8ba14:	0011883a 	mov	r8,zero
   8ba18:	380ad53a 	srli	r5,r7,20
   8ba1c:	382ed7fa 	srli	r23,r7,31
   8ba20:	04000434 	movhi	r16,16
   8ba24:	843fffc4 	addi	r16,r16,-1
   8ba28:	2941ffcc 	andi	r5,r5,2047
   8ba2c:	302b883a 	mov	r21,r6
   8ba30:	3c20703a 	and	r16,r7,r16
   8ba34:	ba403fcc 	andi	r9,r23,255
   8ba38:	28006726 	beq	r5,zero,8bbd8 <__divdf3+0x23c>
   8ba3c:	0081ffc4 	movi	r2,2047
   8ba40:	28805f26 	beq	r5,r2,8bbc0 <__divdf3+0x224>
   8ba44:	84000434 	orhi	r16,r16,16
   8ba48:	3004d77a 	srli	r2,r6,29
   8ba4c:	802090fa 	slli	r16,r16,3
   8ba50:	302a90fa 	slli	r21,r6,3
   8ba54:	297f0044 	addi	r5,r5,-1023
   8ba58:	80a0b03a 	or	r16,r16,r2
   8ba5c:	000f883a 	mov	r7,zero
   8ba60:	3d06b03a 	or	r3,r7,r20
   8ba64:	180690ba 	slli	r3,r3,2
   8ba68:	00800274 	movhi	r2,9
   8ba6c:	10aea304 	addi	r2,r2,-17780
   8ba70:	1885883a 	add	r2,r3,r2
   8ba74:	10800017 	ldw	r2,0(r2)
   8ba78:	b5c8f03a 	xor	r4,r22,r23
   8ba7c:	200d883a 	mov	r6,r4
   8ba80:	25003fcc 	andi	r20,r4,255
   8ba84:	9165c83a 	sub	r18,r18,r5
   8ba88:	1000683a 	jmp	r2
   8ba8c:	0008bcd4 	movui	zero,8947
   8ba90:	0008bb04 	movi	zero,8940
   8ba94:	0008bc98 	cmpnei	zero,zero,8946
   8ba98:	0008bae8 	cmpgeui	zero,zero,8939
   8ba9c:	0008bc98 	cmpnei	zero,zero,8946
   8baa0:	0008bc6c 	andhi	zero,zero,8945
   8baa4:	0008bc98 	cmpnei	zero,zero,8946
   8baa8:	0008bae8 	cmpgeui	zero,zero,8939
   8baac:	0008bb04 	movi	zero,8940
   8bab0:	0008bb04 	movi	zero,8940
   8bab4:	0008bc6c 	andhi	zero,zero,8945
   8bab8:	0008bae8 	cmpgeui	zero,zero,8939
   8babc:	0008baf8 	rdprs	zero,zero,8939
   8bac0:	0008baf8 	rdprs	zero,zero,8939
   8bac4:	0008baf8 	rdprs	zero,zero,8939
   8bac8:	0008bca8 	cmpgeui	zero,zero,8946
   8bacc:	8904b03a 	or	r2,r17,r4
   8bad0:	1000631e 	bne	r2,zero,8bc60 <__divdf3+0x2c4>
   8bad4:	05000204 	movi	r20,8
   8bad8:	0023883a 	mov	r17,zero
   8badc:	0027883a 	mov	r19,zero
   8bae0:	02000084 	movi	r8,2
   8bae4:	003fcc06 	br	8ba18 <__alt_data_end+0xfffc2638>
   8bae8:	8023883a 	mov	r17,r16
   8baec:	a827883a 	mov	r19,r21
   8baf0:	4839883a 	mov	fp,r9
   8baf4:	3811883a 	mov	r8,r7
   8baf8:	00800084 	movi	r2,2
   8bafc:	4081531e 	bne	r8,r2,8c04c <__divdf3+0x6b0>
   8bb00:	e029883a 	mov	r20,fp
   8bb04:	a180004c 	andi	r6,r20,1
   8bb08:	0201ffc4 	movi	r8,2047
   8bb0c:	000b883a 	mov	r5,zero
   8bb10:	0027883a 	mov	r19,zero
   8bb14:	4010953a 	slli	r8,r8,20
   8bb18:	30c03fcc 	andi	r3,r6,255
   8bb1c:	04000434 	movhi	r16,16
   8bb20:	180697fa 	slli	r3,r3,31
   8bb24:	843fffc4 	addi	r16,r16,-1
   8bb28:	2c20703a 	and	r16,r5,r16
   8bb2c:	8220b03a 	or	r16,r16,r8
   8bb30:	80c6b03a 	or	r3,r16,r3
   8bb34:	9805883a 	mov	r2,r19
   8bb38:	dfc00f17 	ldw	ra,60(sp)
   8bb3c:	df000e17 	ldw	fp,56(sp)
   8bb40:	ddc00d17 	ldw	r23,52(sp)
   8bb44:	dd800c17 	ldw	r22,48(sp)
   8bb48:	dd400b17 	ldw	r21,44(sp)
   8bb4c:	dd000a17 	ldw	r20,40(sp)
   8bb50:	dcc00917 	ldw	r19,36(sp)
   8bb54:	dc800817 	ldw	r18,32(sp)
   8bb58:	dc400717 	ldw	r17,28(sp)
   8bb5c:	dc000617 	ldw	r16,24(sp)
   8bb60:	dec01004 	addi	sp,sp,64
   8bb64:	f800283a 	ret
   8bb68:	8904b03a 	or	r2,r17,r4
   8bb6c:	10003726 	beq	r2,zero,8bc4c <__divdf3+0x2b0>
   8bb70:	88014d26 	beq	r17,zero,8c0a8 <__divdf3+0x70c>
   8bb74:	8809883a 	mov	r4,r17
   8bb78:	d9800215 	stw	r6,8(sp)
   8bb7c:	d9c00515 	stw	r7,20(sp)
   8bb80:	008d8980 	call	8d898 <__clzsi2>
   8bb84:	d9800217 	ldw	r6,8(sp)
   8bb88:	d9c00517 	ldw	r7,20(sp)
   8bb8c:	1007883a 	mov	r3,r2
   8bb90:	01000a04 	movi	r4,40
   8bb94:	1cfffe04 	addi	r19,r3,-8
   8bb98:	20c9c83a 	sub	r4,r4,r3
   8bb9c:	8cca983a 	sll	r5,r17,r19
   8bba0:	a108d83a 	srl	r4,r20,r4
   8bba4:	a4e6983a 	sll	r19,r20,r19
   8bba8:	2162b03a 	or	r17,r4,r5
   8bbac:	04bf0344 	movi	r18,-1011
   8bbb0:	90e5c83a 	sub	r18,r18,r3
   8bbb4:	0029883a 	mov	r20,zero
   8bbb8:	0011883a 	mov	r8,zero
   8bbbc:	003f9606 	br	8ba18 <__alt_data_end+0xfffc2638>
   8bbc0:	8184b03a 	or	r2,r16,r6
   8bbc4:	10001f1e 	bne	r2,zero,8bc44 <__divdf3+0x2a8>
   8bbc8:	0021883a 	mov	r16,zero
   8bbcc:	002b883a 	mov	r21,zero
   8bbd0:	01c00084 	movi	r7,2
   8bbd4:	003fa206 	br	8ba60 <__alt_data_end+0xfffc2680>
   8bbd8:	8184b03a 	or	r2,r16,r6
   8bbdc:	10001526 	beq	r2,zero,8bc34 <__divdf3+0x298>
   8bbe0:	80013d26 	beq	r16,zero,8c0d8 <__divdf3+0x73c>
   8bbe4:	8009883a 	mov	r4,r16
   8bbe8:	d9800215 	stw	r6,8(sp)
   8bbec:	da000315 	stw	r8,12(sp)
   8bbf0:	da400415 	stw	r9,16(sp)
   8bbf4:	008d8980 	call	8d898 <__clzsi2>
   8bbf8:	d9800217 	ldw	r6,8(sp)
   8bbfc:	da000317 	ldw	r8,12(sp)
   8bc00:	da400417 	ldw	r9,16(sp)
   8bc04:	1007883a 	mov	r3,r2
   8bc08:	01000a04 	movi	r4,40
   8bc0c:	1d7ffe04 	addi	r21,r3,-8
   8bc10:	20c9c83a 	sub	r4,r4,r3
   8bc14:	8560983a 	sll	r16,r16,r21
   8bc18:	3108d83a 	srl	r4,r6,r4
   8bc1c:	356a983a 	sll	r21,r6,r21
   8bc20:	2420b03a 	or	r16,r4,r16
   8bc24:	017f0344 	movi	r5,-1011
   8bc28:	28cbc83a 	sub	r5,r5,r3
   8bc2c:	000f883a 	mov	r7,zero
   8bc30:	003f8b06 	br	8ba60 <__alt_data_end+0xfffc2680>
   8bc34:	0021883a 	mov	r16,zero
   8bc38:	002b883a 	mov	r21,zero
   8bc3c:	01c00044 	movi	r7,1
   8bc40:	003f8706 	br	8ba60 <__alt_data_end+0xfffc2680>
   8bc44:	01c000c4 	movi	r7,3
   8bc48:	003f8506 	br	8ba60 <__alt_data_end+0xfffc2680>
   8bc4c:	05000104 	movi	r20,4
   8bc50:	0023883a 	mov	r17,zero
   8bc54:	0027883a 	mov	r19,zero
   8bc58:	02000044 	movi	r8,1
   8bc5c:	003f6e06 	br	8ba18 <__alt_data_end+0xfffc2638>
   8bc60:	05000304 	movi	r20,12
   8bc64:	020000c4 	movi	r8,3
   8bc68:	003f6b06 	br	8ba18 <__alt_data_end+0xfffc2638>
   8bc6c:	01400434 	movhi	r5,16
   8bc70:	000d883a 	mov	r6,zero
   8bc74:	297fffc4 	addi	r5,r5,-1
   8bc78:	04ffffc4 	movi	r19,-1
   8bc7c:	0201ffc4 	movi	r8,2047
   8bc80:	003fa406 	br	8bb14 <__alt_data_end+0xfffc2734>
   8bc84:	043f0084 	movi	r16,-1022
   8bc88:	84a1c83a 	sub	r16,r16,r18
   8bc8c:	00800e04 	movi	r2,56
   8bc90:	14014d0e 	bge	r2,r16,8c1c8 <__divdf3+0x82c>
   8bc94:	a180004c 	andi	r6,r20,1
   8bc98:	0011883a 	mov	r8,zero
   8bc9c:	000b883a 	mov	r5,zero
   8bca0:	0027883a 	mov	r19,zero
   8bca4:	003f9b06 	br	8bb14 <__alt_data_end+0xfffc2734>
   8bca8:	8880022c 	andhi	r2,r17,8
   8bcac:	1000f026 	beq	r2,zero,8c070 <__divdf3+0x6d4>
   8bcb0:	8080022c 	andhi	r2,r16,8
   8bcb4:	1000ee1e 	bne	r2,zero,8c070 <__divdf3+0x6d4>
   8bcb8:	00800434 	movhi	r2,16
   8bcbc:	81400234 	orhi	r5,r16,8
   8bcc0:	10bfffc4 	addi	r2,r2,-1
   8bcc4:	b80d883a 	mov	r6,r23
   8bcc8:	288a703a 	and	r5,r5,r2
   8bccc:	a827883a 	mov	r19,r21
   8bcd0:	003fea06 	br	8bc7c <__alt_data_end+0xfffc289c>
   8bcd4:	84411c36 	bltu	r16,r17,8c148 <__divdf3+0x7ac>
   8bcd8:	8c011a26 	beq	r17,r16,8c144 <__divdf3+0x7a8>
   8bcdc:	94bfffc4 	addi	r18,r18,-1
   8bce0:	dcc00015 	stw	r19,0(sp)
   8bce4:	8811883a 	mov	r8,r17
   8bce8:	002d883a 	mov	r22,zero
   8bcec:	a80cd63a 	srli	r6,r21,24
   8bcf0:	8020923a 	slli	r16,r16,8
   8bcf4:	a82a923a 	slli	r21,r21,8
   8bcf8:	4009883a 	mov	r4,r8
   8bcfc:	342eb03a 	or	r23,r6,r16
   8bd00:	dd400115 	stw	r21,4(sp)
   8bd04:	b82ad43a 	srli	r21,r23,16
   8bd08:	da000315 	stw	r8,12(sp)
   8bd0c:	bcffffcc 	andi	r19,r23,65535
   8bd10:	a80b883a 	mov	r5,r21
   8bd14:	00810ec0 	call	810ec <__udivsi3>
   8bd18:	1009883a 	mov	r4,r2
   8bd1c:	980b883a 	mov	r5,r19
   8bd20:	1023883a 	mov	r17,r2
   8bd24:	008b0d80 	call	8b0d8 <__mulsi3>
   8bd28:	da000317 	ldw	r8,12(sp)
   8bd2c:	a80b883a 	mov	r5,r21
   8bd30:	1039883a 	mov	fp,r2
   8bd34:	4009883a 	mov	r4,r8
   8bd38:	00810f40 	call	810f4 <__umodsi3>
   8bd3c:	d8c00017 	ldw	r3,0(sp)
   8bd40:	1004943a 	slli	r2,r2,16
   8bd44:	1810d43a 	srli	r8,r3,16
   8bd48:	120eb03a 	or	r7,r2,r8
   8bd4c:	3f00062e 	bgeu	r7,fp,8bd68 <__divdf3+0x3cc>
   8bd50:	3dcf883a 	add	r7,r7,r23
   8bd54:	88bfffc4 	addi	r2,r17,-1
   8bd58:	3dc10a36 	bltu	r7,r23,8c184 <__divdf3+0x7e8>
   8bd5c:	3f01092e 	bgeu	r7,fp,8c184 <__divdf3+0x7e8>
   8bd60:	8c7fff84 	addi	r17,r17,-2
   8bd64:	3dcf883a 	add	r7,r7,r23
   8bd68:	3f39c83a 	sub	fp,r7,fp
   8bd6c:	e009883a 	mov	r4,fp
   8bd70:	a80b883a 	mov	r5,r21
   8bd74:	00810ec0 	call	810ec <__udivsi3>
   8bd78:	1009883a 	mov	r4,r2
   8bd7c:	980b883a 	mov	r5,r19
   8bd80:	1021883a 	mov	r16,r2
   8bd84:	008b0d80 	call	8b0d8 <__mulsi3>
   8bd88:	e009883a 	mov	r4,fp
   8bd8c:	a80b883a 	mov	r5,r21
   8bd90:	d8800315 	stw	r2,12(sp)
   8bd94:	00810f40 	call	810f4 <__umodsi3>
   8bd98:	d9000017 	ldw	r4,0(sp)
   8bd9c:	1004943a 	slli	r2,r2,16
   8bda0:	da000317 	ldw	r8,12(sp)
   8bda4:	20ffffcc 	andi	r3,r4,65535
   8bda8:	10ceb03a 	or	r7,r2,r3
   8bdac:	3a00062e 	bgeu	r7,r8,8bdc8 <__divdf3+0x42c>
   8bdb0:	3dcf883a 	add	r7,r7,r23
   8bdb4:	80bfffc4 	addi	r2,r16,-1
   8bdb8:	3dc0f036 	bltu	r7,r23,8c17c <__divdf3+0x7e0>
   8bdbc:	3a00ef2e 	bgeu	r7,r8,8c17c <__divdf3+0x7e0>
   8bdc0:	843fff84 	addi	r16,r16,-2
   8bdc4:	3dcf883a 	add	r7,r7,r23
   8bdc8:	d8c00117 	ldw	r3,4(sp)
   8bdcc:	8822943a 	slli	r17,r17,16
   8bdd0:	3a0fc83a 	sub	r7,r7,r8
   8bdd4:	1806d43a 	srli	r3,r3,16
   8bdd8:	8462b03a 	or	r17,r16,r17
   8bddc:	8affffcc 	andi	r11,r17,65535
   8bde0:	d8c00015 	stw	r3,0(sp)
   8bde4:	d8c00117 	ldw	r3,4(sp)
   8bde8:	8820d43a 	srli	r16,r17,16
   8bdec:	5809883a 	mov	r4,r11
   8bdf0:	1f3fffcc 	andi	fp,r3,65535
   8bdf4:	e00b883a 	mov	r5,fp
   8bdf8:	d9c00515 	stw	r7,20(sp)
   8bdfc:	dac00215 	stw	r11,8(sp)
   8be00:	008b0d80 	call	8b0d8 <__mulsi3>
   8be04:	8009883a 	mov	r4,r16
   8be08:	e00b883a 	mov	r5,fp
   8be0c:	d8800415 	stw	r2,16(sp)
   8be10:	008b0d80 	call	8b0d8 <__mulsi3>
   8be14:	d9400017 	ldw	r5,0(sp)
   8be18:	8009883a 	mov	r4,r16
   8be1c:	d8800315 	stw	r2,12(sp)
   8be20:	008b0d80 	call	8b0d8 <__mulsi3>
   8be24:	dac00217 	ldw	r11,8(sp)
   8be28:	d9400017 	ldw	r5,0(sp)
   8be2c:	d8800215 	stw	r2,8(sp)
   8be30:	5809883a 	mov	r4,r11
   8be34:	008b0d80 	call	8b0d8 <__mulsi3>
   8be38:	da400417 	ldw	r9,16(sp)
   8be3c:	da800317 	ldw	r10,12(sp)
   8be40:	d9c00517 	ldw	r7,20(sp)
   8be44:	480ad43a 	srli	r5,r9,16
   8be48:	5085883a 	add	r2,r10,r2
   8be4c:	db000217 	ldw	r12,8(sp)
   8be50:	1151883a 	add	r8,r2,r5
   8be54:	4280022e 	bgeu	r8,r10,8be60 <__divdf3+0x4c4>
   8be58:	00800074 	movhi	r2,1
   8be5c:	6099883a 	add	r12,r12,r2
   8be60:	400ad43a 	srli	r5,r8,16
   8be64:	4010943a 	slli	r8,r8,16
   8be68:	4c3fffcc 	andi	r16,r9,65535
   8be6c:	6149883a 	add	r4,r12,r5
   8be70:	4411883a 	add	r8,r8,r16
   8be74:	3900a736 	bltu	r7,r4,8c114 <__divdf3+0x778>
   8be78:	3900c426 	beq	r7,r4,8c18c <__divdf3+0x7f0>
   8be7c:	3909c83a 	sub	r4,r7,r4
   8be80:	b221c83a 	sub	r16,r22,r8
   8be84:	b42d803a 	cmpltu	r22,r22,r16
   8be88:	25adc83a 	sub	r22,r4,r22
   8be8c:	b5c0c626 	beq	r22,r23,8c1a8 <__divdf3+0x80c>
   8be90:	b009883a 	mov	r4,r22
   8be94:	a80b883a 	mov	r5,r21
   8be98:	00810ec0 	call	810ec <__udivsi3>
   8be9c:	1009883a 	mov	r4,r2
   8bea0:	980b883a 	mov	r5,r19
   8bea4:	d8800315 	stw	r2,12(sp)
   8bea8:	008b0d80 	call	8b0d8 <__mulsi3>
   8beac:	a80b883a 	mov	r5,r21
   8beb0:	b009883a 	mov	r4,r22
   8beb4:	d8800415 	stw	r2,16(sp)
   8beb8:	00810f40 	call	810f4 <__umodsi3>
   8bebc:	1004943a 	slli	r2,r2,16
   8bec0:	800ed43a 	srli	r7,r16,16
   8bec4:	da400417 	ldw	r9,16(sp)
   8bec8:	da000317 	ldw	r8,12(sp)
   8becc:	11cab03a 	or	r5,r2,r7
   8bed0:	2a40062e 	bgeu	r5,r9,8beec <__divdf3+0x550>
   8bed4:	2dcb883a 	add	r5,r5,r23
   8bed8:	40bfffc4 	addi	r2,r8,-1
   8bedc:	2dc0b436 	bltu	r5,r23,8c1b0 <__divdf3+0x814>
   8bee0:	2a40b32e 	bgeu	r5,r9,8c1b0 <__divdf3+0x814>
   8bee4:	423fff84 	addi	r8,r8,-2
   8bee8:	2dcb883a 	add	r5,r5,r23
   8beec:	2a6dc83a 	sub	r22,r5,r9
   8bef0:	b009883a 	mov	r4,r22
   8bef4:	a80b883a 	mov	r5,r21
   8bef8:	da000315 	stw	r8,12(sp)
   8befc:	00810ec0 	call	810ec <__udivsi3>
   8bf00:	980b883a 	mov	r5,r19
   8bf04:	1009883a 	mov	r4,r2
   8bf08:	d8800415 	stw	r2,16(sp)
   8bf0c:	008b0d80 	call	8b0d8 <__mulsi3>
   8bf10:	b009883a 	mov	r4,r22
   8bf14:	a80b883a 	mov	r5,r21
   8bf18:	1027883a 	mov	r19,r2
   8bf1c:	00810f40 	call	810f4 <__umodsi3>
   8bf20:	1004943a 	slli	r2,r2,16
   8bf24:	843fffcc 	andi	r16,r16,65535
   8bf28:	da000317 	ldw	r8,12(sp)
   8bf2c:	140eb03a 	or	r7,r2,r16
   8bf30:	da400417 	ldw	r9,16(sp)
   8bf34:	3cc0062e 	bgeu	r7,r19,8bf50 <__divdf3+0x5b4>
   8bf38:	3dcf883a 	add	r7,r7,r23
   8bf3c:	48bfffc4 	addi	r2,r9,-1
   8bf40:	3dc09d36 	bltu	r7,r23,8c1b8 <__divdf3+0x81c>
   8bf44:	3cc09c2e 	bgeu	r7,r19,8c1b8 <__divdf3+0x81c>
   8bf48:	4a7fff84 	addi	r9,r9,-2
   8bf4c:	3dcf883a 	add	r7,r7,r23
   8bf50:	4010943a 	slli	r8,r8,16
   8bf54:	3cebc83a 	sub	r21,r7,r19
   8bf58:	e00b883a 	mov	r5,fp
   8bf5c:	4a26b03a 	or	r19,r9,r8
   8bf60:	99ffffcc 	andi	r7,r19,65535
   8bf64:	9820d43a 	srli	r16,r19,16
   8bf68:	3809883a 	mov	r4,r7
   8bf6c:	d9c00515 	stw	r7,20(sp)
   8bf70:	008b0d80 	call	8b0d8 <__mulsi3>
   8bf74:	8009883a 	mov	r4,r16
   8bf78:	e00b883a 	mov	r5,fp
   8bf7c:	102d883a 	mov	r22,r2
   8bf80:	008b0d80 	call	8b0d8 <__mulsi3>
   8bf84:	d9400017 	ldw	r5,0(sp)
   8bf88:	8009883a 	mov	r4,r16
   8bf8c:	1039883a 	mov	fp,r2
   8bf90:	008b0d80 	call	8b0d8 <__mulsi3>
   8bf94:	d9c00517 	ldw	r7,20(sp)
   8bf98:	d9400017 	ldw	r5,0(sp)
   8bf9c:	1021883a 	mov	r16,r2
   8bfa0:	3809883a 	mov	r4,r7
   8bfa4:	008b0d80 	call	8b0d8 <__mulsi3>
   8bfa8:	b008d43a 	srli	r4,r22,16
   8bfac:	e085883a 	add	r2,fp,r2
   8bfb0:	1109883a 	add	r4,r2,r4
   8bfb4:	2700022e 	bgeu	r4,fp,8bfc0 <__divdf3+0x624>
   8bfb8:	00800074 	movhi	r2,1
   8bfbc:	80a1883a 	add	r16,r16,r2
   8bfc0:	200ad43a 	srli	r5,r4,16
   8bfc4:	2008943a 	slli	r4,r4,16
   8bfc8:	b5bfffcc 	andi	r22,r22,65535
   8bfcc:	8145883a 	add	r2,r16,r5
   8bfd0:	2589883a 	add	r4,r4,r22
   8bfd4:	a8802c36 	bltu	r21,r2,8c088 <__divdf3+0x6ec>
   8bfd8:	a880a426 	beq	r21,r2,8c26c <__divdf3+0x8d0>
   8bfdc:	9cc00054 	ori	r19,r19,1
   8bfe0:	9200ffc4 	addi	r8,r18,1023
   8bfe4:	023f270e 	bge	zero,r8,8bc84 <__alt_data_end+0xfffc28a4>
   8bfe8:	988001cc 	andi	r2,r19,7
   8bfec:	10000726 	beq	r2,zero,8c00c <__divdf3+0x670>
   8bff0:	990003cc 	andi	r4,r19,15
   8bff4:	00800104 	movi	r2,4
   8bff8:	20800426 	beq	r4,r2,8c00c <__divdf3+0x670>
   8bffc:	9885883a 	add	r2,r19,r2
   8c000:	14e7803a 	cmpltu	r19,r2,r19
   8c004:	8ce3883a 	add	r17,r17,r19
   8c008:	1027883a 	mov	r19,r2
   8c00c:	8880402c 	andhi	r2,r17,256
   8c010:	10000426 	beq	r2,zero,8c024 <__divdf3+0x688>
   8c014:	00bfc034 	movhi	r2,65280
   8c018:	10bfffc4 	addi	r2,r2,-1
   8c01c:	92010004 	addi	r8,r18,1024
   8c020:	88a2703a 	and	r17,r17,r2
   8c024:	0081ff84 	movi	r2,2046
   8c028:	123eb616 	blt	r2,r8,8bb04 <__alt_data_end+0xfffc2724>
   8c02c:	9826d0fa 	srli	r19,r19,3
   8c030:	8804977a 	slli	r2,r17,29
   8c034:	8820927a 	slli	r16,r17,9
   8c038:	4201ffcc 	andi	r8,r8,2047
   8c03c:	14e6b03a 	or	r19,r2,r19
   8c040:	800ad33a 	srli	r5,r16,12
   8c044:	a180004c 	andi	r6,r20,1
   8c048:	003eb206 	br	8bb14 <__alt_data_end+0xfffc2734>
   8c04c:	008000c4 	movi	r2,3
   8c050:	4080ac26 	beq	r8,r2,8c304 <__divdf3+0x968>
   8c054:	00800044 	movi	r2,1
   8c058:	4080591e 	bne	r8,r2,8c1c0 <__divdf3+0x824>
   8c05c:	e00d883a 	mov	r6,fp
   8c060:	0011883a 	mov	r8,zero
   8c064:	000b883a 	mov	r5,zero
   8c068:	0027883a 	mov	r19,zero
   8c06c:	003ea906 	br	8bb14 <__alt_data_end+0xfffc2734>
   8c070:	00800434 	movhi	r2,16
   8c074:	89400234 	orhi	r5,r17,8
   8c078:	10bfffc4 	addi	r2,r2,-1
   8c07c:	b00d883a 	mov	r6,r22
   8c080:	288a703a 	and	r5,r5,r2
   8c084:	003efd06 	br	8bc7c <__alt_data_end+0xfffc289c>
   8c088:	adcf883a 	add	r7,r21,r23
   8c08c:	997fffc4 	addi	r5,r19,-1
   8c090:	3dc0412e 	bgeu	r7,r23,8c198 <__divdf3+0x7fc>
   8c094:	2827883a 	mov	r19,r5
   8c098:	38bfd01e 	bne	r7,r2,8bfdc <__alt_data_end+0xfffc2bfc>
   8c09c:	d8c00117 	ldw	r3,4(sp)
   8c0a0:	193fce1e 	bne	r3,r4,8bfdc <__alt_data_end+0xfffc2bfc>
   8c0a4:	003fce06 	br	8bfe0 <__alt_data_end+0xfffc2c00>
   8c0a8:	d9800215 	stw	r6,8(sp)
   8c0ac:	d9c00515 	stw	r7,20(sp)
   8c0b0:	008d8980 	call	8d898 <__clzsi2>
   8c0b4:	10c00804 	addi	r3,r2,32
   8c0b8:	010009c4 	movi	r4,39
   8c0bc:	d9800217 	ldw	r6,8(sp)
   8c0c0:	d9c00517 	ldw	r7,20(sp)
   8c0c4:	20feb20e 	bge	r4,r3,8bb90 <__alt_data_end+0xfffc27b0>
   8c0c8:	117ffe04 	addi	r5,r2,-8
   8c0cc:	a162983a 	sll	r17,r20,r5
   8c0d0:	0027883a 	mov	r19,zero
   8c0d4:	003eb506 	br	8bbac <__alt_data_end+0xfffc27cc>
   8c0d8:	3009883a 	mov	r4,r6
   8c0dc:	d9800215 	stw	r6,8(sp)
   8c0e0:	da000315 	stw	r8,12(sp)
   8c0e4:	da400415 	stw	r9,16(sp)
   8c0e8:	008d8980 	call	8d898 <__clzsi2>
   8c0ec:	10c00804 	addi	r3,r2,32
   8c0f0:	010009c4 	movi	r4,39
   8c0f4:	d9800217 	ldw	r6,8(sp)
   8c0f8:	da000317 	ldw	r8,12(sp)
   8c0fc:	da400417 	ldw	r9,16(sp)
   8c100:	20fec10e 	bge	r4,r3,8bc08 <__alt_data_end+0xfffc2828>
   8c104:	10bffe04 	addi	r2,r2,-8
   8c108:	a8a0983a 	sll	r16,r21,r2
   8c10c:	002b883a 	mov	r21,zero
   8c110:	003ec406 	br	8bc24 <__alt_data_end+0xfffc2844>
   8c114:	d8c00117 	ldw	r3,4(sp)
   8c118:	b0ed883a 	add	r22,r22,r3
   8c11c:	b0c5803a 	cmpltu	r2,r22,r3
   8c120:	15c5883a 	add	r2,r2,r23
   8c124:	11cf883a 	add	r7,r2,r7
   8c128:	88bfffc4 	addi	r2,r17,-1
   8c12c:	b9c00d2e 	bgeu	r23,r7,8c164 <__divdf3+0x7c8>
   8c130:	39003f36 	bltu	r7,r4,8c230 <__divdf3+0x894>
   8c134:	21c06a26 	beq	r4,r7,8c2e0 <__divdf3+0x944>
   8c138:	3909c83a 	sub	r4,r7,r4
   8c13c:	1023883a 	mov	r17,r2
   8c140:	003f4f06 	br	8be80 <__alt_data_end+0xfffc2aa0>
   8c144:	9d7ee536 	bltu	r19,r21,8bcdc <__alt_data_end+0xfffc28fc>
   8c148:	982ed07a 	srli	r23,r19,1
   8c14c:	880497fa 	slli	r2,r17,31
   8c150:	8810d07a 	srli	r8,r17,1
   8c154:	982c97fa 	slli	r22,r19,31
   8c158:	b884b03a 	or	r2,r23,r2
   8c15c:	d8800015 	stw	r2,0(sp)
   8c160:	003ee206 	br	8bcec <__alt_data_end+0xfffc290c>
   8c164:	3dfff41e 	bne	r7,r23,8c138 <__alt_data_end+0xfffc2d58>
   8c168:	d8c00117 	ldw	r3,4(sp)
   8c16c:	b0fff02e 	bgeu	r22,r3,8c130 <__alt_data_end+0xfffc2d50>
   8c170:	b909c83a 	sub	r4,r23,r4
   8c174:	1023883a 	mov	r17,r2
   8c178:	003f4106 	br	8be80 <__alt_data_end+0xfffc2aa0>
   8c17c:	1021883a 	mov	r16,r2
   8c180:	003f1106 	br	8bdc8 <__alt_data_end+0xfffc29e8>
   8c184:	1023883a 	mov	r17,r2
   8c188:	003ef706 	br	8bd68 <__alt_data_end+0xfffc2988>
   8c18c:	b23fe136 	bltu	r22,r8,8c114 <__alt_data_end+0xfffc2d34>
   8c190:	0009883a 	mov	r4,zero
   8c194:	003f3a06 	br	8be80 <__alt_data_end+0xfffc2aa0>
   8c198:	38802c36 	bltu	r7,r2,8c24c <__divdf3+0x8b0>
   8c19c:	11c05326 	beq	r2,r7,8c2ec <__divdf3+0x950>
   8c1a0:	2827883a 	mov	r19,r5
   8c1a4:	003f8d06 	br	8bfdc <__alt_data_end+0xfffc2bfc>
   8c1a8:	04ffffc4 	movi	r19,-1
   8c1ac:	003f8c06 	br	8bfe0 <__alt_data_end+0xfffc2c00>
   8c1b0:	1011883a 	mov	r8,r2
   8c1b4:	003f4d06 	br	8beec <__alt_data_end+0xfffc2b0c>
   8c1b8:	1013883a 	mov	r9,r2
   8c1bc:	003f6406 	br	8bf50 <__alt_data_end+0xfffc2b70>
   8c1c0:	e029883a 	mov	r20,fp
   8c1c4:	003f8606 	br	8bfe0 <__alt_data_end+0xfffc2c00>
   8c1c8:	008007c4 	movi	r2,31
   8c1cc:	14002a16 	blt	r2,r16,8c278 <__divdf3+0x8dc>
   8c1d0:	91410784 	addi	r5,r18,1054
   8c1d4:	9c0cd83a 	srl	r6,r19,r16
   8c1d8:	8948983a 	sll	r4,r17,r5
   8c1dc:	9944983a 	sll	r2,r19,r5
   8c1e0:	8c20d83a 	srl	r16,r17,r16
   8c1e4:	3108b03a 	or	r4,r6,r4
   8c1e8:	1004c03a 	cmpne	r2,r2,zero
   8c1ec:	2084b03a 	or	r2,r4,r2
   8c1f0:	110001cc 	andi	r4,r2,7
   8c1f4:	20000726 	beq	r4,zero,8c214 <__divdf3+0x878>
   8c1f8:	114003cc 	andi	r5,r2,15
   8c1fc:	01000104 	movi	r4,4
   8c200:	29000426 	beq	r5,r4,8c214 <__divdf3+0x878>
   8c204:	11000104 	addi	r4,r2,4
   8c208:	2085803a 	cmpltu	r2,r4,r2
   8c20c:	80a1883a 	add	r16,r16,r2
   8c210:	2005883a 	mov	r2,r4
   8c214:	8100202c 	andhi	r4,r16,128
   8c218:	20002d26 	beq	r4,zero,8c2d0 <__divdf3+0x934>
   8c21c:	a180004c 	andi	r6,r20,1
   8c220:	02000044 	movi	r8,1
   8c224:	000b883a 	mov	r5,zero
   8c228:	0027883a 	mov	r19,zero
   8c22c:	003e3906 	br	8bb14 <__alt_data_end+0xfffc2734>
   8c230:	d8c00117 	ldw	r3,4(sp)
   8c234:	8c7fff84 	addi	r17,r17,-2
   8c238:	b0ed883a 	add	r22,r22,r3
   8c23c:	b0c5803a 	cmpltu	r2,r22,r3
   8c240:	15c5883a 	add	r2,r2,r23
   8c244:	11cf883a 	add	r7,r2,r7
   8c248:	003f0c06 	br	8be7c <__alt_data_end+0xfffc2a9c>
   8c24c:	d8c00117 	ldw	r3,4(sp)
   8c250:	997fff84 	addi	r5,r19,-2
   8c254:	18d1883a 	add	r8,r3,r3
   8c258:	40c7803a 	cmpltu	r3,r8,r3
   8c25c:	1dcd883a 	add	r6,r3,r23
   8c260:	398f883a 	add	r7,r7,r6
   8c264:	da000115 	stw	r8,4(sp)
   8c268:	003f8a06 	br	8c094 <__alt_data_end+0xfffc2cb4>
   8c26c:	203f861e 	bne	r4,zero,8c088 <__alt_data_end+0xfffc2ca8>
   8c270:	d8000115 	stw	zero,4(sp)
   8c274:	003f8906 	br	8c09c <__alt_data_end+0xfffc2cbc>
   8c278:	00bef884 	movi	r2,-1054
   8c27c:	1485c83a 	sub	r2,r2,r18
   8c280:	01000804 	movi	r4,32
   8c284:	8884d83a 	srl	r2,r17,r2
   8c288:	81001c26 	beq	r16,r4,8c2fc <__divdf3+0x960>
   8c28c:	91010f84 	addi	r4,r18,1086
   8c290:	8908983a 	sll	r4,r17,r4
   8c294:	24c8b03a 	or	r4,r4,r19
   8c298:	2008c03a 	cmpne	r4,r4,zero
   8c29c:	2084b03a 	or	r2,r4,r2
   8c2a0:	140001cc 	andi	r16,r2,7
   8c2a4:	8000061e 	bne	r16,zero,8c2c0 <__divdf3+0x924>
   8c2a8:	000b883a 	mov	r5,zero
   8c2ac:	1004d0fa 	srli	r2,r2,3
   8c2b0:	a180004c 	andi	r6,r20,1
   8c2b4:	0011883a 	mov	r8,zero
   8c2b8:	1426b03a 	or	r19,r2,r16
   8c2bc:	003e1506 	br	8bb14 <__alt_data_end+0xfffc2734>
   8c2c0:	114003cc 	andi	r5,r2,15
   8c2c4:	01000104 	movi	r4,4
   8c2c8:	0021883a 	mov	r16,zero
   8c2cc:	293fcd1e 	bne	r5,r4,8c204 <__alt_data_end+0xfffc2e24>
   8c2d0:	800a927a 	slli	r5,r16,9
   8c2d4:	8020977a 	slli	r16,r16,29
   8c2d8:	280ad33a 	srli	r5,r5,12
   8c2dc:	003ff306 	br	8c2ac <__alt_data_end+0xfffc2ecc>
   8c2e0:	b23fd336 	bltu	r22,r8,8c230 <__alt_data_end+0xfffc2e50>
   8c2e4:	1023883a 	mov	r17,r2
   8c2e8:	003fa906 	br	8c190 <__alt_data_end+0xfffc2db0>
   8c2ec:	d8c00117 	ldw	r3,4(sp)
   8c2f0:	193fd636 	bltu	r3,r4,8c24c <__alt_data_end+0xfffc2e6c>
   8c2f4:	2827883a 	mov	r19,r5
   8c2f8:	003f6806 	br	8c09c <__alt_data_end+0xfffc2cbc>
   8c2fc:	0009883a 	mov	r4,zero
   8c300:	003fe406 	br	8c294 <__alt_data_end+0xfffc2eb4>
   8c304:	00800434 	movhi	r2,16
   8c308:	89400234 	orhi	r5,r17,8
   8c30c:	10bfffc4 	addi	r2,r2,-1
   8c310:	e00d883a 	mov	r6,fp
   8c314:	288a703a 	and	r5,r5,r2
   8c318:	003e5806 	br	8bc7c <__alt_data_end+0xfffc289c>

0008c31c <__eqdf2>:
   8c31c:	2804d53a 	srli	r2,r5,20
   8c320:	3806d53a 	srli	r3,r7,20
   8c324:	02000434 	movhi	r8,16
   8c328:	423fffc4 	addi	r8,r8,-1
   8c32c:	1081ffcc 	andi	r2,r2,2047
   8c330:	0241ffc4 	movi	r9,2047
   8c334:	2a14703a 	and	r10,r5,r8
   8c338:	18c1ffcc 	andi	r3,r3,2047
   8c33c:	3a10703a 	and	r8,r7,r8
   8c340:	280ad7fa 	srli	r5,r5,31
   8c344:	380ed7fa 	srli	r7,r7,31
   8c348:	12400f26 	beq	r2,r9,8c388 <__eqdf2+0x6c>
   8c34c:	0241ffc4 	movi	r9,2047
   8c350:	1a400326 	beq	r3,r9,8c360 <__eqdf2+0x44>
   8c354:	10c00526 	beq	r2,r3,8c36c <__eqdf2+0x50>
   8c358:	00800044 	movi	r2,1
   8c35c:	f800283a 	ret
   8c360:	4192b03a 	or	r9,r8,r6
   8c364:	483ffc1e 	bne	r9,zero,8c358 <__alt_data_end+0xfffc2f78>
   8c368:	10fffb1e 	bne	r2,r3,8c358 <__alt_data_end+0xfffc2f78>
   8c36c:	523ffa1e 	bne	r10,r8,8c358 <__alt_data_end+0xfffc2f78>
   8c370:	21bff91e 	bne	r4,r6,8c358 <__alt_data_end+0xfffc2f78>
   8c374:	29c00826 	beq	r5,r7,8c398 <__eqdf2+0x7c>
   8c378:	103ff71e 	bne	r2,zero,8c358 <__alt_data_end+0xfffc2f78>
   8c37c:	5104b03a 	or	r2,r10,r4
   8c380:	1004c03a 	cmpne	r2,r2,zero
   8c384:	f800283a 	ret
   8c388:	5112b03a 	or	r9,r10,r4
   8c38c:	483fef26 	beq	r9,zero,8c34c <__alt_data_end+0xfffc2f6c>
   8c390:	00800044 	movi	r2,1
   8c394:	f800283a 	ret
   8c398:	0005883a 	mov	r2,zero
   8c39c:	f800283a 	ret

0008c3a0 <__gedf2>:
   8c3a0:	2804d53a 	srli	r2,r5,20
   8c3a4:	3806d53a 	srli	r3,r7,20
   8c3a8:	02000434 	movhi	r8,16
   8c3ac:	423fffc4 	addi	r8,r8,-1
   8c3b0:	0241ffc4 	movi	r9,2047
   8c3b4:	1081ffcc 	andi	r2,r2,2047
   8c3b8:	2a14703a 	and	r10,r5,r8
   8c3bc:	1a46703a 	and	r3,r3,r9
   8c3c0:	3a10703a 	and	r8,r7,r8
   8c3c4:	280ad7fa 	srli	r5,r5,31
   8c3c8:	380ed7fa 	srli	r7,r7,31
   8c3cc:	12400b26 	beq	r2,r9,8c3fc <__gedf2+0x5c>
   8c3d0:	1a401626 	beq	r3,r9,8c42c <__gedf2+0x8c>
   8c3d4:	10000c1e 	bne	r2,zero,8c408 <__gedf2+0x68>
   8c3d8:	5112b03a 	or	r9,r10,r4
   8c3dc:	4813003a 	cmpeq	r9,r9,zero
   8c3e0:	4817883a 	mov	r11,r9
   8c3e4:	18000c1e 	bne	r3,zero,8c418 <__gedf2+0x78>
   8c3e8:	4198b03a 	or	r12,r8,r6
   8c3ec:	60000a1e 	bne	r12,zero,8c418 <__gedf2+0x78>
   8c3f0:	48001326 	beq	r9,zero,8c440 <__gedf2+0xa0>
   8c3f4:	0005883a 	mov	r2,zero
   8c3f8:	f800283a 	ret
   8c3fc:	5112b03a 	or	r9,r10,r4
   8c400:	4800191e 	bne	r9,zero,8c468 <__gedf2+0xc8>
   8c404:	18800926 	beq	r3,r2,8c42c <__gedf2+0x8c>
   8c408:	18000b1e 	bne	r3,zero,8c438 <__gedf2+0x98>
   8c40c:	4192b03a 	or	r9,r8,r6
   8c410:	0017883a 	mov	r11,zero
   8c414:	48000a26 	beq	r9,zero,8c440 <__gedf2+0xa0>
   8c418:	39c03fcc 	andi	r7,r7,255
   8c41c:	58000726 	beq	r11,zero,8c43c <__gedf2+0x9c>
   8c420:	3800081e 	bne	r7,zero,8c444 <__gedf2+0xa4>
   8c424:	00bfffc4 	movi	r2,-1
   8c428:	f800283a 	ret
   8c42c:	4192b03a 	or	r9,r8,r6
   8c430:	48000d1e 	bne	r9,zero,8c468 <__gedf2+0xc8>
   8c434:	103fe826 	beq	r2,zero,8c3d8 <__alt_data_end+0xfffc2ff8>
   8c438:	39c03fcc 	andi	r7,r7,255
   8c43c:	29c00326 	beq	r5,r7,8c44c <__gedf2+0xac>
   8c440:	283ff81e 	bne	r5,zero,8c424 <__alt_data_end+0xfffc3044>
   8c444:	00800044 	movi	r2,1
   8c448:	f800283a 	ret
   8c44c:	18bffc16 	blt	r3,r2,8c440 <__alt_data_end+0xfffc3060>
   8c450:	10c00316 	blt	r2,r3,8c460 <__gedf2+0xc0>
   8c454:	42bffa36 	bltu	r8,r10,8c440 <__alt_data_end+0xfffc3060>
   8c458:	52000526 	beq	r10,r8,8c470 <__gedf2+0xd0>
   8c45c:	523fe52e 	bgeu	r10,r8,8c3f4 <__alt_data_end+0xfffc3014>
   8c460:	283ff026 	beq	r5,zero,8c424 <__alt_data_end+0xfffc3044>
   8c464:	003ff706 	br	8c444 <__alt_data_end+0xfffc3064>
   8c468:	00bfff84 	movi	r2,-2
   8c46c:	f800283a 	ret
   8c470:	313ff336 	bltu	r6,r4,8c440 <__alt_data_end+0xfffc3060>
   8c474:	21bfdf2e 	bgeu	r4,r6,8c3f4 <__alt_data_end+0xfffc3014>
   8c478:	283fea26 	beq	r5,zero,8c424 <__alt_data_end+0xfffc3044>
   8c47c:	003ff106 	br	8c444 <__alt_data_end+0xfffc3064>

0008c480 <__ledf2>:
   8c480:	2804d53a 	srli	r2,r5,20
   8c484:	3810d53a 	srli	r8,r7,20
   8c488:	00c00434 	movhi	r3,16
   8c48c:	18ffffc4 	addi	r3,r3,-1
   8c490:	0241ffc4 	movi	r9,2047
   8c494:	1081ffcc 	andi	r2,r2,2047
   8c498:	28d4703a 	and	r10,r5,r3
   8c49c:	4250703a 	and	r8,r8,r9
   8c4a0:	38c6703a 	and	r3,r7,r3
   8c4a4:	280ad7fa 	srli	r5,r5,31
   8c4a8:	380ed7fa 	srli	r7,r7,31
   8c4ac:	12400b26 	beq	r2,r9,8c4dc <__ledf2+0x5c>
   8c4b0:	42401926 	beq	r8,r9,8c518 <__ledf2+0x98>
   8c4b4:	10000c1e 	bne	r2,zero,8c4e8 <__ledf2+0x68>
   8c4b8:	5112b03a 	or	r9,r10,r4
   8c4bc:	4813003a 	cmpeq	r9,r9,zero
   8c4c0:	4817883a 	mov	r11,r9
   8c4c4:	40000f26 	beq	r8,zero,8c504 <__ledf2+0x84>
   8c4c8:	39c03fcc 	andi	r7,r7,255
   8c4cc:	58001826 	beq	r11,zero,8c530 <__ledf2+0xb0>
   8c4d0:	38000a1e 	bne	r7,zero,8c4fc <__ledf2+0x7c>
   8c4d4:	00bfffc4 	movi	r2,-1
   8c4d8:	f800283a 	ret
   8c4dc:	5112b03a 	or	r9,r10,r4
   8c4e0:	48000f1e 	bne	r9,zero,8c520 <__ledf2+0xa0>
   8c4e4:	40800c26 	beq	r8,r2,8c518 <__ledf2+0x98>
   8c4e8:	4000101e 	bne	r8,zero,8c52c <__ledf2+0xac>
   8c4ec:	1992b03a 	or	r9,r3,r6
   8c4f0:	0017883a 	mov	r11,zero
   8c4f4:	483ff41e 	bne	r9,zero,8c4c8 <__alt_data_end+0xfffc30e8>
   8c4f8:	283ff61e 	bne	r5,zero,8c4d4 <__alt_data_end+0xfffc30f4>
   8c4fc:	00800044 	movi	r2,1
   8c500:	f800283a 	ret
   8c504:	1998b03a 	or	r12,r3,r6
   8c508:	603fef1e 	bne	r12,zero,8c4c8 <__alt_data_end+0xfffc30e8>
   8c50c:	483ffa26 	beq	r9,zero,8c4f8 <__alt_data_end+0xfffc3118>
   8c510:	0005883a 	mov	r2,zero
   8c514:	f800283a 	ret
   8c518:	1992b03a 	or	r9,r3,r6
   8c51c:	48000226 	beq	r9,zero,8c528 <__ledf2+0xa8>
   8c520:	00800084 	movi	r2,2
   8c524:	f800283a 	ret
   8c528:	103fe326 	beq	r2,zero,8c4b8 <__alt_data_end+0xfffc30d8>
   8c52c:	39c03fcc 	andi	r7,r7,255
   8c530:	29fff11e 	bne	r5,r7,8c4f8 <__alt_data_end+0xfffc3118>
   8c534:	40bff016 	blt	r8,r2,8c4f8 <__alt_data_end+0xfffc3118>
   8c538:	12000316 	blt	r2,r8,8c548 <__ledf2+0xc8>
   8c53c:	1abfee36 	bltu	r3,r10,8c4f8 <__alt_data_end+0xfffc3118>
   8c540:	50c00326 	beq	r10,r3,8c550 <__ledf2+0xd0>
   8c544:	50fff22e 	bgeu	r10,r3,8c510 <__alt_data_end+0xfffc3130>
   8c548:	283fe226 	beq	r5,zero,8c4d4 <__alt_data_end+0xfffc30f4>
   8c54c:	003feb06 	br	8c4fc <__alt_data_end+0xfffc311c>
   8c550:	313fe936 	bltu	r6,r4,8c4f8 <__alt_data_end+0xfffc3118>
   8c554:	21bfee2e 	bgeu	r4,r6,8c510 <__alt_data_end+0xfffc3130>
   8c558:	283fde26 	beq	r5,zero,8c4d4 <__alt_data_end+0xfffc30f4>
   8c55c:	003fe706 	br	8c4fc <__alt_data_end+0xfffc311c>

0008c560 <__muldf3>:
   8c560:	deffee04 	addi	sp,sp,-72
   8c564:	dd000c15 	stw	r20,48(sp)
   8c568:	2828d53a 	srli	r20,r5,20
   8c56c:	dd400d15 	stw	r21,52(sp)
   8c570:	282ad7fa 	srli	r21,r5,31
   8c574:	dc000815 	stw	r16,32(sp)
   8c578:	04000434 	movhi	r16,16
   8c57c:	ddc00f15 	stw	r23,60(sp)
   8c580:	dcc00b15 	stw	r19,44(sp)
   8c584:	dc800a15 	stw	r18,40(sp)
   8c588:	843fffc4 	addi	r16,r16,-1
   8c58c:	dfc01115 	stw	ra,68(sp)
   8c590:	df001015 	stw	fp,64(sp)
   8c594:	dd800e15 	stw	r22,56(sp)
   8c598:	dc400915 	stw	r17,36(sp)
   8c59c:	a501ffcc 	andi	r20,r20,2047
   8c5a0:	2025883a 	mov	r18,r4
   8c5a4:	202f883a 	mov	r23,r4
   8c5a8:	2c20703a 	and	r16,r5,r16
   8c5ac:	a827883a 	mov	r19,r21
   8c5b0:	aa403fcc 	andi	r9,r21,255
   8c5b4:	a0005926 	beq	r20,zero,8c71c <__muldf3+0x1bc>
   8c5b8:	0081ffc4 	movi	r2,2047
   8c5bc:	a0803426 	beq	r20,r2,8c690 <__muldf3+0x130>
   8c5c0:	84000434 	orhi	r16,r16,16
   8c5c4:	2004d77a 	srli	r2,r4,29
   8c5c8:	802090fa 	slli	r16,r16,3
   8c5cc:	202e90fa 	slli	r23,r4,3
   8c5d0:	a53f0044 	addi	r20,r20,-1023
   8c5d4:	80a0b03a 	or	r16,r16,r2
   8c5d8:	000b883a 	mov	r5,zero
   8c5dc:	0039883a 	mov	fp,zero
   8c5e0:	3806d53a 	srli	r3,r7,20
   8c5e4:	382cd7fa 	srli	r22,r7,31
   8c5e8:	00800434 	movhi	r2,16
   8c5ec:	10bfffc4 	addi	r2,r2,-1
   8c5f0:	18c1ffcc 	andi	r3,r3,2047
   8c5f4:	3025883a 	mov	r18,r6
   8c5f8:	38a2703a 	and	r17,r7,r2
   8c5fc:	b2803fcc 	andi	r10,r22,255
   8c600:	18006426 	beq	r3,zero,8c794 <__muldf3+0x234>
   8c604:	0081ffc4 	movi	r2,2047
   8c608:	18805c26 	beq	r3,r2,8c77c <__muldf3+0x21c>
   8c60c:	8c400434 	orhi	r17,r17,16
   8c610:	3004d77a 	srli	r2,r6,29
   8c614:	882290fa 	slli	r17,r17,3
   8c618:	302490fa 	slli	r18,r6,3
   8c61c:	18ff0044 	addi	r3,r3,-1023
   8c620:	88a2b03a 	or	r17,r17,r2
   8c624:	000f883a 	mov	r7,zero
   8c628:	394ab03a 	or	r5,r7,r5
   8c62c:	280a90ba 	slli	r5,r5,2
   8c630:	00800274 	movhi	r2,9
   8c634:	10b19404 	addi	r2,r2,-14768
   8c638:	288b883a 	add	r5,r5,r2
   8c63c:	28800017 	ldw	r2,0(r5)
   8c640:	a0c7883a 	add	r3,r20,r3
   8c644:	b54cf03a 	xor	r6,r22,r21
   8c648:	1a000044 	addi	r8,r3,1
   8c64c:	1000683a 	jmp	r2
   8c650:	0008c894 	movui	zero,8994
   8c654:	0008c880 	call	8c88 <__reset-0x77378>
   8c658:	0008c880 	call	8c88 <__reset-0x77378>
   8c65c:	0008c86c 	andhi	zero,zero,8993
   8c660:	0008c6ac 	andhi	zero,zero,8986
   8c664:	0008c6ac 	andhi	zero,zero,8986
   8c668:	0008c854 	movui	zero,8993
   8c66c:	0008c86c 	andhi	zero,zero,8993
   8c670:	0008c6ac 	andhi	zero,zero,8986
   8c674:	0008c854 	movui	zero,8993
   8c678:	0008c6ac 	andhi	zero,zero,8986
   8c67c:	0008c86c 	andhi	zero,zero,8993
   8c680:	0008c6b0 	cmpltui	zero,zero,8986
   8c684:	0008c6b0 	cmpltui	zero,zero,8986
   8c688:	0008c6b0 	cmpltui	zero,zero,8986
   8c68c:	0008cbd0 	cmplti	zero,zero,9007
   8c690:	8104b03a 	or	r2,r16,r4
   8c694:	10006c1e 	bne	r2,zero,8c848 <__muldf3+0x2e8>
   8c698:	01400204 	movi	r5,8
   8c69c:	0021883a 	mov	r16,zero
   8c6a0:	002f883a 	mov	r23,zero
   8c6a4:	07000084 	movi	fp,2
   8c6a8:	003fcd06 	br	8c5e0 <__alt_data_end+0xfffc3200>
   8c6ac:	3013883a 	mov	r9,r6
   8c6b0:	00800084 	movi	r2,2
   8c6b4:	e080501e 	bne	fp,r2,8c7f8 <__muldf3+0x298>
   8c6b8:	4cc0004c 	andi	r19,r9,1
   8c6bc:	0101ffc4 	movi	r4,2047
   8c6c0:	0021883a 	mov	r16,zero
   8c6c4:	002f883a 	mov	r23,zero
   8c6c8:	2008953a 	slli	r4,r4,20
   8c6cc:	98c03fcc 	andi	r3,r19,255
   8c6d0:	04400434 	movhi	r17,16
   8c6d4:	8c7fffc4 	addi	r17,r17,-1
   8c6d8:	180697fa 	slli	r3,r3,31
   8c6dc:	8460703a 	and	r16,r16,r17
   8c6e0:	8120b03a 	or	r16,r16,r4
   8c6e4:	80c6b03a 	or	r3,r16,r3
   8c6e8:	b805883a 	mov	r2,r23
   8c6ec:	dfc01117 	ldw	ra,68(sp)
   8c6f0:	df001017 	ldw	fp,64(sp)
   8c6f4:	ddc00f17 	ldw	r23,60(sp)
   8c6f8:	dd800e17 	ldw	r22,56(sp)
   8c6fc:	dd400d17 	ldw	r21,52(sp)
   8c700:	dd000c17 	ldw	r20,48(sp)
   8c704:	dcc00b17 	ldw	r19,44(sp)
   8c708:	dc800a17 	ldw	r18,40(sp)
   8c70c:	dc400917 	ldw	r17,36(sp)
   8c710:	dc000817 	ldw	r16,32(sp)
   8c714:	dec01204 	addi	sp,sp,72
   8c718:	f800283a 	ret
   8c71c:	8104b03a 	or	r2,r16,r4
   8c720:	10004426 	beq	r2,zero,8c834 <__muldf3+0x2d4>
   8c724:	80014b26 	beq	r16,zero,8cc54 <__muldf3+0x6f4>
   8c728:	8009883a 	mov	r4,r16
   8c72c:	d9800715 	stw	r6,28(sp)
   8c730:	d9c00215 	stw	r7,8(sp)
   8c734:	da400415 	stw	r9,16(sp)
   8c738:	008d8980 	call	8d898 <__clzsi2>
   8c73c:	d9800717 	ldw	r6,28(sp)
   8c740:	d9c00217 	ldw	r7,8(sp)
   8c744:	da400417 	ldw	r9,16(sp)
   8c748:	1007883a 	mov	r3,r2
   8c74c:	01000a04 	movi	r4,40
   8c750:	1dfffe04 	addi	r23,r3,-8
   8c754:	20c9c83a 	sub	r4,r4,r3
   8c758:	85e0983a 	sll	r16,r16,r23
   8c75c:	9108d83a 	srl	r4,r18,r4
   8c760:	95ee983a 	sll	r23,r18,r23
   8c764:	2420b03a 	or	r16,r4,r16
   8c768:	053f0344 	movi	r20,-1011
   8c76c:	a0e9c83a 	sub	r20,r20,r3
   8c770:	000b883a 	mov	r5,zero
   8c774:	0039883a 	mov	fp,zero
   8c778:	003f9906 	br	8c5e0 <__alt_data_end+0xfffc3200>
   8c77c:	8984b03a 	or	r2,r17,r6
   8c780:	10002a1e 	bne	r2,zero,8c82c <__muldf3+0x2cc>
   8c784:	0023883a 	mov	r17,zero
   8c788:	0025883a 	mov	r18,zero
   8c78c:	01c00084 	movi	r7,2
   8c790:	003fa506 	br	8c628 <__alt_data_end+0xfffc3248>
   8c794:	8984b03a 	or	r2,r17,r6
   8c798:	10002026 	beq	r2,zero,8c81c <__muldf3+0x2bc>
   8c79c:	88011c26 	beq	r17,zero,8cc10 <__muldf3+0x6b0>
   8c7a0:	8809883a 	mov	r4,r17
   8c7a4:	d9400215 	stw	r5,8(sp)
   8c7a8:	d9800715 	stw	r6,28(sp)
   8c7ac:	da400415 	stw	r9,16(sp)
   8c7b0:	da800315 	stw	r10,12(sp)
   8c7b4:	008d8980 	call	8d898 <__clzsi2>
   8c7b8:	d9400217 	ldw	r5,8(sp)
   8c7bc:	d9800717 	ldw	r6,28(sp)
   8c7c0:	da400417 	ldw	r9,16(sp)
   8c7c4:	da800317 	ldw	r10,12(sp)
   8c7c8:	1007883a 	mov	r3,r2
   8c7cc:	01000a04 	movi	r4,40
   8c7d0:	1cbffe04 	addi	r18,r3,-8
   8c7d4:	20c9c83a 	sub	r4,r4,r3
   8c7d8:	8ca2983a 	sll	r17,r17,r18
   8c7dc:	3108d83a 	srl	r4,r6,r4
   8c7e0:	34a4983a 	sll	r18,r6,r18
   8c7e4:	2462b03a 	or	r17,r4,r17
   8c7e8:	00bf0344 	movi	r2,-1011
   8c7ec:	10c7c83a 	sub	r3,r2,r3
   8c7f0:	000f883a 	mov	r7,zero
   8c7f4:	003f8c06 	br	8c628 <__alt_data_end+0xfffc3248>
   8c7f8:	008000c4 	movi	r2,3
   8c7fc:	e0816d26 	beq	fp,r2,8cdb4 <__muldf3+0x854>
   8c800:	00800044 	movi	r2,1
   8c804:	e081321e 	bne	fp,r2,8ccd0 <__muldf3+0x770>
   8c808:	48a6703a 	and	r19,r9,r2
   8c80c:	0009883a 	mov	r4,zero
   8c810:	0021883a 	mov	r16,zero
   8c814:	002f883a 	mov	r23,zero
   8c818:	003fab06 	br	8c6c8 <__alt_data_end+0xfffc32e8>
   8c81c:	0023883a 	mov	r17,zero
   8c820:	0025883a 	mov	r18,zero
   8c824:	01c00044 	movi	r7,1
   8c828:	003f7f06 	br	8c628 <__alt_data_end+0xfffc3248>
   8c82c:	01c000c4 	movi	r7,3
   8c830:	003f7d06 	br	8c628 <__alt_data_end+0xfffc3248>
   8c834:	01400104 	movi	r5,4
   8c838:	0021883a 	mov	r16,zero
   8c83c:	002f883a 	mov	r23,zero
   8c840:	07000044 	movi	fp,1
   8c844:	003f6606 	br	8c5e0 <__alt_data_end+0xfffc3200>
   8c848:	01400304 	movi	r5,12
   8c84c:	070000c4 	movi	fp,3
   8c850:	003f6306 	br	8c5e0 <__alt_data_end+0xfffc3200>
   8c854:	04000434 	movhi	r16,16
   8c858:	0027883a 	mov	r19,zero
   8c85c:	843fffc4 	addi	r16,r16,-1
   8c860:	05ffffc4 	movi	r23,-1
   8c864:	0101ffc4 	movi	r4,2047
   8c868:	003f9706 	br	8c6c8 <__alt_data_end+0xfffc32e8>
   8c86c:	8821883a 	mov	r16,r17
   8c870:	902f883a 	mov	r23,r18
   8c874:	5013883a 	mov	r9,r10
   8c878:	3839883a 	mov	fp,r7
   8c87c:	003f8c06 	br	8c6b0 <__alt_data_end+0xfffc32d0>
   8c880:	8821883a 	mov	r16,r17
   8c884:	902f883a 	mov	r23,r18
   8c888:	3013883a 	mov	r9,r6
   8c88c:	3839883a 	mov	fp,r7
   8c890:	003f8706 	br	8c6b0 <__alt_data_end+0xfffc32d0>
   8c894:	b82ad43a 	srli	r21,r23,16
   8c898:	9038d43a 	srli	fp,r18,16
   8c89c:	bdffffcc 	andi	r23,r23,65535
   8c8a0:	94bfffcc 	andi	r18,r18,65535
   8c8a4:	9009883a 	mov	r4,r18
   8c8a8:	b80b883a 	mov	r5,r23
   8c8ac:	d8c00515 	stw	r3,20(sp)
   8c8b0:	d9800715 	stw	r6,28(sp)
   8c8b4:	da000615 	stw	r8,24(sp)
   8c8b8:	008b0d80 	call	8b0d8 <__mulsi3>
   8c8bc:	9009883a 	mov	r4,r18
   8c8c0:	a80b883a 	mov	r5,r21
   8c8c4:	1029883a 	mov	r20,r2
   8c8c8:	008b0d80 	call	8b0d8 <__mulsi3>
   8c8cc:	e009883a 	mov	r4,fp
   8c8d0:	a80b883a 	mov	r5,r21
   8c8d4:	102d883a 	mov	r22,r2
   8c8d8:	008b0d80 	call	8b0d8 <__mulsi3>
   8c8dc:	e009883a 	mov	r4,fp
   8c8e0:	b80b883a 	mov	r5,r23
   8c8e4:	1027883a 	mov	r19,r2
   8c8e8:	008b0d80 	call	8b0d8 <__mulsi3>
   8c8ec:	a008d43a 	srli	r4,r20,16
   8c8f0:	b085883a 	add	r2,r22,r2
   8c8f4:	d8c00517 	ldw	r3,20(sp)
   8c8f8:	110f883a 	add	r7,r2,r4
   8c8fc:	d9800717 	ldw	r6,28(sp)
   8c900:	da000617 	ldw	r8,24(sp)
   8c904:	3d80022e 	bgeu	r7,r22,8c910 <__muldf3+0x3b0>
   8c908:	00800074 	movhi	r2,1
   8c90c:	98a7883a 	add	r19,r19,r2
   8c910:	3804943a 	slli	r2,r7,16
   8c914:	380ed43a 	srli	r7,r7,16
   8c918:	882cd43a 	srli	r22,r17,16
   8c91c:	a53fffcc 	andi	r20,r20,65535
   8c920:	8c7fffcc 	andi	r17,r17,65535
   8c924:	1529883a 	add	r20,r2,r20
   8c928:	8809883a 	mov	r4,r17
   8c92c:	b80b883a 	mov	r5,r23
   8c930:	d8c00515 	stw	r3,20(sp)
   8c934:	d9800715 	stw	r6,28(sp)
   8c938:	da000615 	stw	r8,24(sp)
   8c93c:	d9c00015 	stw	r7,0(sp)
   8c940:	dd000115 	stw	r20,4(sp)
   8c944:	008b0d80 	call	8b0d8 <__mulsi3>
   8c948:	a80b883a 	mov	r5,r21
   8c94c:	8809883a 	mov	r4,r17
   8c950:	d8800415 	stw	r2,16(sp)
   8c954:	008b0d80 	call	8b0d8 <__mulsi3>
   8c958:	a80b883a 	mov	r5,r21
   8c95c:	b009883a 	mov	r4,r22
   8c960:	1029883a 	mov	r20,r2
   8c964:	008b0d80 	call	8b0d8 <__mulsi3>
   8c968:	b009883a 	mov	r4,r22
   8c96c:	b80b883a 	mov	r5,r23
   8c970:	102b883a 	mov	r21,r2
   8c974:	008b0d80 	call	8b0d8 <__mulsi3>
   8c978:	da400417 	ldw	r9,16(sp)
   8c97c:	a085883a 	add	r2,r20,r2
   8c980:	d8c00517 	ldw	r3,20(sp)
   8c984:	4808d43a 	srli	r4,r9,16
   8c988:	d9800717 	ldw	r6,28(sp)
   8c98c:	da000617 	ldw	r8,24(sp)
   8c990:	1109883a 	add	r4,r2,r4
   8c994:	2500022e 	bgeu	r4,r20,8c9a0 <__muldf3+0x440>
   8c998:	00800074 	movhi	r2,1
   8c99c:	a8ab883a 	add	r21,r21,r2
   8c9a0:	200e943a 	slli	r7,r4,16
   8c9a4:	2004d43a 	srli	r2,r4,16
   8c9a8:	802ed43a 	srli	r23,r16,16
   8c9ac:	843fffcc 	andi	r16,r16,65535
   8c9b0:	4d3fffcc 	andi	r20,r9,65535
   8c9b4:	9009883a 	mov	r4,r18
   8c9b8:	800b883a 	mov	r5,r16
   8c9bc:	3d29883a 	add	r20,r7,r20
   8c9c0:	d8c00515 	stw	r3,20(sp)
   8c9c4:	d9800715 	stw	r6,28(sp)
   8c9c8:	da000615 	stw	r8,24(sp)
   8c9cc:	a8ab883a 	add	r21,r21,r2
   8c9d0:	008b0d80 	call	8b0d8 <__mulsi3>
   8c9d4:	9009883a 	mov	r4,r18
   8c9d8:	b80b883a 	mov	r5,r23
   8c9dc:	d8800315 	stw	r2,12(sp)
   8c9e0:	008b0d80 	call	8b0d8 <__mulsi3>
   8c9e4:	e009883a 	mov	r4,fp
   8c9e8:	b80b883a 	mov	r5,r23
   8c9ec:	1025883a 	mov	r18,r2
   8c9f0:	008b0d80 	call	8b0d8 <__mulsi3>
   8c9f4:	e009883a 	mov	r4,fp
   8c9f8:	800b883a 	mov	r5,r16
   8c9fc:	d8800215 	stw	r2,8(sp)
   8ca00:	008b0d80 	call	8b0d8 <__mulsi3>
   8ca04:	da800317 	ldw	r10,12(sp)
   8ca08:	d9400017 	ldw	r5,0(sp)
   8ca0c:	9085883a 	add	r2,r18,r2
   8ca10:	5008d43a 	srli	r4,r10,16
   8ca14:	a153883a 	add	r9,r20,r5
   8ca18:	d8c00517 	ldw	r3,20(sp)
   8ca1c:	1109883a 	add	r4,r2,r4
   8ca20:	d9800717 	ldw	r6,28(sp)
   8ca24:	da000617 	ldw	r8,24(sp)
   8ca28:	dac00217 	ldw	r11,8(sp)
   8ca2c:	2480022e 	bgeu	r4,r18,8ca38 <__muldf3+0x4d8>
   8ca30:	00800074 	movhi	r2,1
   8ca34:	5897883a 	add	r11,r11,r2
   8ca38:	200e943a 	slli	r7,r4,16
   8ca3c:	2038d43a 	srli	fp,r4,16
   8ca40:	52bfffcc 	andi	r10,r10,65535
   8ca44:	3a8f883a 	add	r7,r7,r10
   8ca48:	8809883a 	mov	r4,r17
   8ca4c:	800b883a 	mov	r5,r16
   8ca50:	d8c00515 	stw	r3,20(sp)
   8ca54:	d9800715 	stw	r6,28(sp)
   8ca58:	d9c00215 	stw	r7,8(sp)
   8ca5c:	da000615 	stw	r8,24(sp)
   8ca60:	da400415 	stw	r9,16(sp)
   8ca64:	5f39883a 	add	fp,r11,fp
   8ca68:	008b0d80 	call	8b0d8 <__mulsi3>
   8ca6c:	8809883a 	mov	r4,r17
   8ca70:	b80b883a 	mov	r5,r23
   8ca74:	1025883a 	mov	r18,r2
   8ca78:	008b0d80 	call	8b0d8 <__mulsi3>
   8ca7c:	b009883a 	mov	r4,r22
   8ca80:	b80b883a 	mov	r5,r23
   8ca84:	d8800315 	stw	r2,12(sp)
   8ca88:	008b0d80 	call	8b0d8 <__mulsi3>
   8ca8c:	b009883a 	mov	r4,r22
   8ca90:	800b883a 	mov	r5,r16
   8ca94:	1023883a 	mov	r17,r2
   8ca98:	008b0d80 	call	8b0d8 <__mulsi3>
   8ca9c:	da800317 	ldw	r10,12(sp)
   8caa0:	9008d43a 	srli	r4,r18,16
   8caa4:	d8c00517 	ldw	r3,20(sp)
   8caa8:	5085883a 	add	r2,r10,r2
   8caac:	1109883a 	add	r4,r2,r4
   8cab0:	d9800717 	ldw	r6,28(sp)
   8cab4:	d9c00217 	ldw	r7,8(sp)
   8cab8:	da000617 	ldw	r8,24(sp)
   8cabc:	da400417 	ldw	r9,16(sp)
   8cac0:	2280022e 	bgeu	r4,r10,8cacc <__muldf3+0x56c>
   8cac4:	00800074 	movhi	r2,1
   8cac8:	88a3883a 	add	r17,r17,r2
   8cacc:	2004943a 	slli	r2,r4,16
   8cad0:	94bfffcc 	andi	r18,r18,65535
   8cad4:	4ce7883a 	add	r19,r9,r19
   8cad8:	14a5883a 	add	r18,r2,r18
   8cadc:	9d29803a 	cmpltu	r20,r19,r20
   8cae0:	9565883a 	add	r18,r18,r21
   8cae4:	9505883a 	add	r2,r18,r20
   8cae8:	99e7883a 	add	r19,r19,r7
   8caec:	99cf803a 	cmpltu	r7,r19,r7
   8caf0:	e08b883a 	add	r5,fp,r2
   8caf4:	2008d43a 	srli	r4,r4,16
   8caf8:	29ef883a 	add	r23,r5,r7
   8cafc:	1529803a 	cmpltu	r20,r2,r20
   8cb00:	956b803a 	cmpltu	r21,r18,r21
   8cb04:	b9cf803a 	cmpltu	r7,r23,r7
   8cb08:	a564b03a 	or	r18,r20,r21
   8cb0c:	2f39803a 	cmpltu	fp,r5,fp
   8cb10:	9125883a 	add	r18,r18,r4
   8cb14:	3f38b03a 	or	fp,r7,fp
   8cb18:	9725883a 	add	r18,r18,fp
   8cb1c:	9804927a 	slli	r2,r19,9
   8cb20:	9463883a 	add	r17,r18,r17
   8cb24:	d9000117 	ldw	r4,4(sp)
   8cb28:	b820d5fa 	srli	r16,r23,23
   8cb2c:	8822927a 	slli	r17,r17,9
   8cb30:	9826d5fa 	srli	r19,r19,23
   8cb34:	1104b03a 	or	r2,r2,r4
   8cb38:	b82e927a 	slli	r23,r23,9
   8cb3c:	1004c03a 	cmpne	r2,r2,zero
   8cb40:	8c20b03a 	or	r16,r17,r16
   8cb44:	14e6b03a 	or	r19,r2,r19
   8cb48:	8080402c 	andhi	r2,r16,256
   8cb4c:	9deeb03a 	or	r23,r19,r23
   8cb50:	10000726 	beq	r2,zero,8cb70 <__muldf3+0x610>
   8cb54:	b804d07a 	srli	r2,r23,1
   8cb58:	800697fa 	slli	r3,r16,31
   8cb5c:	bdc0004c 	andi	r23,r23,1
   8cb60:	8020d07a 	srli	r16,r16,1
   8cb64:	b8aeb03a 	or	r23,r23,r2
   8cb68:	b8eeb03a 	or	r23,r23,r3
   8cb6c:	4007883a 	mov	r3,r8
   8cb70:	1900ffc4 	addi	r4,r3,1023
   8cb74:	01004d0e 	bge	zero,r4,8ccac <__muldf3+0x74c>
   8cb78:	b88001cc 	andi	r2,r23,7
   8cb7c:	10000726 	beq	r2,zero,8cb9c <__muldf3+0x63c>
   8cb80:	b94003cc 	andi	r5,r23,15
   8cb84:	00800104 	movi	r2,4
   8cb88:	28800426 	beq	r5,r2,8cb9c <__muldf3+0x63c>
   8cb8c:	b885883a 	add	r2,r23,r2
   8cb90:	15ef803a 	cmpltu	r23,r2,r23
   8cb94:	85e1883a 	add	r16,r16,r23
   8cb98:	102f883a 	mov	r23,r2
   8cb9c:	8080402c 	andhi	r2,r16,256
   8cba0:	10000426 	beq	r2,zero,8cbb4 <__muldf3+0x654>
   8cba4:	00bfc034 	movhi	r2,65280
   8cba8:	10bfffc4 	addi	r2,r2,-1
   8cbac:	19010004 	addi	r4,r3,1024
   8cbb0:	80a0703a 	and	r16,r16,r2
   8cbb4:	0081ff84 	movi	r2,2046
   8cbb8:	1100340e 	bge	r2,r4,8cc8c <__muldf3+0x72c>
   8cbbc:	34c0004c 	andi	r19,r6,1
   8cbc0:	0101ffc4 	movi	r4,2047
   8cbc4:	0021883a 	mov	r16,zero
   8cbc8:	002f883a 	mov	r23,zero
   8cbcc:	003ebe06 	br	8c6c8 <__alt_data_end+0xfffc32e8>
   8cbd0:	8080022c 	andhi	r2,r16,8
   8cbd4:	10000926 	beq	r2,zero,8cbfc <__muldf3+0x69c>
   8cbd8:	8880022c 	andhi	r2,r17,8
   8cbdc:	1000071e 	bne	r2,zero,8cbfc <__muldf3+0x69c>
   8cbe0:	00800434 	movhi	r2,16
   8cbe4:	8c000234 	orhi	r16,r17,8
   8cbe8:	10bfffc4 	addi	r2,r2,-1
   8cbec:	b027883a 	mov	r19,r22
   8cbf0:	80a0703a 	and	r16,r16,r2
   8cbf4:	902f883a 	mov	r23,r18
   8cbf8:	003f1a06 	br	8c864 <__alt_data_end+0xfffc3484>
   8cbfc:	00800434 	movhi	r2,16
   8cc00:	84000234 	orhi	r16,r16,8
   8cc04:	10bfffc4 	addi	r2,r2,-1
   8cc08:	80a0703a 	and	r16,r16,r2
   8cc0c:	003f1506 	br	8c864 <__alt_data_end+0xfffc3484>
   8cc10:	3009883a 	mov	r4,r6
   8cc14:	d9400215 	stw	r5,8(sp)
   8cc18:	d9800715 	stw	r6,28(sp)
   8cc1c:	da400415 	stw	r9,16(sp)
   8cc20:	da800315 	stw	r10,12(sp)
   8cc24:	008d8980 	call	8d898 <__clzsi2>
   8cc28:	10c00804 	addi	r3,r2,32
   8cc2c:	010009c4 	movi	r4,39
   8cc30:	d9400217 	ldw	r5,8(sp)
   8cc34:	d9800717 	ldw	r6,28(sp)
   8cc38:	da400417 	ldw	r9,16(sp)
   8cc3c:	da800317 	ldw	r10,12(sp)
   8cc40:	20fee20e 	bge	r4,r3,8c7cc <__alt_data_end+0xfffc33ec>
   8cc44:	147ffe04 	addi	r17,r2,-8
   8cc48:	9462983a 	sll	r17,r18,r17
   8cc4c:	0025883a 	mov	r18,zero
   8cc50:	003ee506 	br	8c7e8 <__alt_data_end+0xfffc3408>
   8cc54:	d9800715 	stw	r6,28(sp)
   8cc58:	d9c00215 	stw	r7,8(sp)
   8cc5c:	da400415 	stw	r9,16(sp)
   8cc60:	008d8980 	call	8d898 <__clzsi2>
   8cc64:	10c00804 	addi	r3,r2,32
   8cc68:	010009c4 	movi	r4,39
   8cc6c:	d9800717 	ldw	r6,28(sp)
   8cc70:	d9c00217 	ldw	r7,8(sp)
   8cc74:	da400417 	ldw	r9,16(sp)
   8cc78:	20feb40e 	bge	r4,r3,8c74c <__alt_data_end+0xfffc336c>
   8cc7c:	143ffe04 	addi	r16,r2,-8
   8cc80:	9420983a 	sll	r16,r18,r16
   8cc84:	002f883a 	mov	r23,zero
   8cc88:	003eb706 	br	8c768 <__alt_data_end+0xfffc3388>
   8cc8c:	8004977a 	slli	r2,r16,29
   8cc90:	b82ed0fa 	srli	r23,r23,3
   8cc94:	8020927a 	slli	r16,r16,9
   8cc98:	2101ffcc 	andi	r4,r4,2047
   8cc9c:	15eeb03a 	or	r23,r2,r23
   8cca0:	8020d33a 	srli	r16,r16,12
   8cca4:	34c0004c 	andi	r19,r6,1
   8cca8:	003e8706 	br	8c6c8 <__alt_data_end+0xfffc32e8>
   8ccac:	00bf0084 	movi	r2,-1022
   8ccb0:	10c5c83a 	sub	r2,r2,r3
   8ccb4:	01000e04 	movi	r4,56
   8ccb8:	2080080e 	bge	r4,r2,8ccdc <__muldf3+0x77c>
   8ccbc:	34c0004c 	andi	r19,r6,1
   8ccc0:	0009883a 	mov	r4,zero
   8ccc4:	0021883a 	mov	r16,zero
   8ccc8:	002f883a 	mov	r23,zero
   8cccc:	003e7e06 	br	8c6c8 <__alt_data_end+0xfffc32e8>
   8ccd0:	4007883a 	mov	r3,r8
   8ccd4:	480d883a 	mov	r6,r9
   8ccd8:	003fa506 	br	8cb70 <__alt_data_end+0xfffc3790>
   8ccdc:	010007c4 	movi	r4,31
   8cce0:	20801816 	blt	r4,r2,8cd44 <__muldf3+0x7e4>
   8cce4:	18c10784 	addi	r3,r3,1054
   8cce8:	80c8983a 	sll	r4,r16,r3
   8ccec:	b88ad83a 	srl	r5,r23,r2
   8ccf0:	b8c6983a 	sll	r3,r23,r3
   8ccf4:	80a0d83a 	srl	r16,r16,r2
   8ccf8:	2908b03a 	or	r4,r5,r4
   8ccfc:	1804c03a 	cmpne	r2,r3,zero
   8cd00:	2088b03a 	or	r4,r4,r2
   8cd04:	208001cc 	andi	r2,r4,7
   8cd08:	10000726 	beq	r2,zero,8cd28 <__muldf3+0x7c8>
   8cd0c:	20c003cc 	andi	r3,r4,15
   8cd10:	00800104 	movi	r2,4
   8cd14:	18800426 	beq	r3,r2,8cd28 <__muldf3+0x7c8>
   8cd18:	20c00104 	addi	r3,r4,4
   8cd1c:	1905803a 	cmpltu	r2,r3,r4
   8cd20:	80a1883a 	add	r16,r16,r2
   8cd24:	1809883a 	mov	r4,r3
   8cd28:	8080202c 	andhi	r2,r16,128
   8cd2c:	10001b26 	beq	r2,zero,8cd9c <__muldf3+0x83c>
   8cd30:	34c0004c 	andi	r19,r6,1
   8cd34:	01000044 	movi	r4,1
   8cd38:	0021883a 	mov	r16,zero
   8cd3c:	002f883a 	mov	r23,zero
   8cd40:	003e6106 	br	8c6c8 <__alt_data_end+0xfffc32e8>
   8cd44:	013ef884 	movi	r4,-1054
   8cd48:	20c9c83a 	sub	r4,r4,r3
   8cd4c:	01400804 	movi	r5,32
   8cd50:	8108d83a 	srl	r4,r16,r4
   8cd54:	11401526 	beq	r2,r5,8cdac <__muldf3+0x84c>
   8cd58:	18c10f84 	addi	r3,r3,1086
   8cd5c:	80e0983a 	sll	r16,r16,r3
   8cd60:	85eeb03a 	or	r23,r16,r23
   8cd64:	b804c03a 	cmpne	r2,r23,zero
   8cd68:	1108b03a 	or	r4,r2,r4
   8cd6c:	20c001cc 	andi	r3,r4,7
   8cd70:	1800061e 	bne	r3,zero,8cd8c <__muldf3+0x82c>
   8cd74:	0021883a 	mov	r16,zero
   8cd78:	202ed0fa 	srli	r23,r4,3
   8cd7c:	34c0004c 	andi	r19,r6,1
   8cd80:	0009883a 	mov	r4,zero
   8cd84:	b8eeb03a 	or	r23,r23,r3
   8cd88:	003e4f06 	br	8c6c8 <__alt_data_end+0xfffc32e8>
   8cd8c:	20c003cc 	andi	r3,r4,15
   8cd90:	00800104 	movi	r2,4
   8cd94:	0021883a 	mov	r16,zero
   8cd98:	18bfdf1e 	bne	r3,r2,8cd18 <__alt_data_end+0xfffc3938>
   8cd9c:	8004927a 	slli	r2,r16,9
   8cda0:	8006977a 	slli	r3,r16,29
   8cda4:	1020d33a 	srli	r16,r2,12
   8cda8:	003ff306 	br	8cd78 <__alt_data_end+0xfffc3998>
   8cdac:	0021883a 	mov	r16,zero
   8cdb0:	003feb06 	br	8cd60 <__alt_data_end+0xfffc3980>
   8cdb4:	00800434 	movhi	r2,16
   8cdb8:	84000234 	orhi	r16,r16,8
   8cdbc:	10bfffc4 	addi	r2,r2,-1
   8cdc0:	4cc0004c 	andi	r19,r9,1
   8cdc4:	80a0703a 	and	r16,r16,r2
   8cdc8:	003ea606 	br	8c864 <__alt_data_end+0xfffc3484>

0008cdcc <__subdf3>:
   8cdcc:	00c00434 	movhi	r3,16
   8cdd0:	18ffffc4 	addi	r3,r3,-1
   8cdd4:	defffb04 	addi	sp,sp,-20
   8cdd8:	28d2703a 	and	r9,r5,r3
   8cddc:	3814d53a 	srli	r10,r7,20
   8cde0:	38c6703a 	and	r3,r7,r3
   8cde4:	3004d77a 	srli	r2,r6,29
   8cde8:	dc800215 	stw	r18,8(sp)
   8cdec:	dc000015 	stw	r16,0(sp)
   8cdf0:	2824d7fa 	srli	r18,r5,31
   8cdf4:	2820d53a 	srli	r16,r5,20
   8cdf8:	481290fa 	slli	r9,r9,3
   8cdfc:	200ad77a 	srli	r5,r4,29
   8ce00:	180690fa 	slli	r3,r3,3
   8ce04:	dc400115 	stw	r17,4(sp)
   8ce08:	dfc00415 	stw	ra,16(sp)
   8ce0c:	202290fa 	slli	r17,r4,3
   8ce10:	dcc00315 	stw	r19,12(sp)
   8ce14:	5281ffcc 	andi	r10,r10,2047
   8ce18:	0101ffc4 	movi	r4,2047
   8ce1c:	9011883a 	mov	r8,r18
   8ce20:	8401ffcc 	andi	r16,r16,2047
   8ce24:	94803fcc 	andi	r18,r18,255
   8ce28:	494ab03a 	or	r5,r9,r5
   8ce2c:	380ed7fa 	srli	r7,r7,31
   8ce30:	1886b03a 	or	r3,r3,r2
   8ce34:	300c90fa 	slli	r6,r6,3
   8ce38:	51009026 	beq	r10,r4,8d07c <__subdf3+0x2b0>
   8ce3c:	39c0005c 	xori	r7,r7,1
   8ce40:	8285c83a 	sub	r2,r16,r10
   8ce44:	91c06f26 	beq	r18,r7,8d004 <__subdf3+0x238>
   8ce48:	0080b10e 	bge	zero,r2,8d110 <__subdf3+0x344>
   8ce4c:	50002a1e 	bne	r10,zero,8cef8 <__subdf3+0x12c>
   8ce50:	1988b03a 	or	r4,r3,r6
   8ce54:	2000941e 	bne	r4,zero,8d0a8 <__subdf3+0x2dc>
   8ce58:	888001cc 	andi	r2,r17,7
   8ce5c:	10005b26 	beq	r2,zero,8cfcc <__subdf3+0x200>
   8ce60:	88c003cc 	andi	r3,r17,15
   8ce64:	00800104 	movi	r2,4
   8ce68:	18805826 	beq	r3,r2,8cfcc <__subdf3+0x200>
   8ce6c:	88c00104 	addi	r3,r17,4
   8ce70:	1c63803a 	cmpltu	r17,r3,r17
   8ce74:	2c4b883a 	add	r5,r5,r17
   8ce78:	2880202c 	andhi	r2,r5,128
   8ce7c:	9200004c 	andi	r8,r18,1
   8ce80:	1823883a 	mov	r17,r3
   8ce84:	10005426 	beq	r2,zero,8cfd8 <__subdf3+0x20c>
   8ce88:	84000044 	addi	r16,r16,1
   8ce8c:	0081ffc4 	movi	r2,2047
   8ce90:	8080bf26 	beq	r16,r2,8d190 <__subdf3+0x3c4>
   8ce94:	013fe034 	movhi	r4,65408
   8ce98:	213fffc4 	addi	r4,r4,-1
   8ce9c:	290a703a 	and	r5,r5,r4
   8cea0:	2804977a 	slli	r2,r5,29
   8cea4:	280a927a 	slli	r5,r5,9
   8cea8:	8822d0fa 	srli	r17,r17,3
   8ceac:	8401ffcc 	andi	r16,r16,2047
   8ceb0:	2808d33a 	srli	r4,r5,12
   8ceb4:	1444b03a 	or	r2,r2,r17
   8ceb8:	8401ffcc 	andi	r16,r16,2047
   8cebc:	800a953a 	slli	r5,r16,20
   8cec0:	40c03fcc 	andi	r3,r8,255
   8cec4:	04000434 	movhi	r16,16
   8cec8:	180697fa 	slli	r3,r3,31
   8cecc:	843fffc4 	addi	r16,r16,-1
   8ced0:	2420703a 	and	r16,r4,r16
   8ced4:	8160b03a 	or	r16,r16,r5
   8ced8:	80c6b03a 	or	r3,r16,r3
   8cedc:	dfc00417 	ldw	ra,16(sp)
   8cee0:	dcc00317 	ldw	r19,12(sp)
   8cee4:	dc800217 	ldw	r18,8(sp)
   8cee8:	dc400117 	ldw	r17,4(sp)
   8ceec:	dc000017 	ldw	r16,0(sp)
   8cef0:	dec00504 	addi	sp,sp,20
   8cef4:	f800283a 	ret
   8cef8:	0101ffc4 	movi	r4,2047
   8cefc:	813fd626 	beq	r16,r4,8ce58 <__alt_data_end+0xfffc3a78>
   8cf00:	18c02034 	orhi	r3,r3,128
   8cf04:	01000e04 	movi	r4,56
   8cf08:	2080a416 	blt	r4,r2,8d19c <__subdf3+0x3d0>
   8cf0c:	010007c4 	movi	r4,31
   8cf10:	2080c716 	blt	r4,r2,8d230 <__subdf3+0x464>
   8cf14:	01000804 	movi	r4,32
   8cf18:	2089c83a 	sub	r4,r4,r2
   8cf1c:	1910983a 	sll	r8,r3,r4
   8cf20:	308ed83a 	srl	r7,r6,r2
   8cf24:	3108983a 	sll	r4,r6,r4
   8cf28:	1884d83a 	srl	r2,r3,r2
   8cf2c:	41ccb03a 	or	r6,r8,r7
   8cf30:	2008c03a 	cmpne	r4,r4,zero
   8cf34:	310cb03a 	or	r6,r6,r4
   8cf38:	898dc83a 	sub	r6,r17,r6
   8cf3c:	89a3803a 	cmpltu	r17,r17,r6
   8cf40:	288bc83a 	sub	r5,r5,r2
   8cf44:	2c4bc83a 	sub	r5,r5,r17
   8cf48:	3023883a 	mov	r17,r6
   8cf4c:	2880202c 	andhi	r2,r5,128
   8cf50:	10006b26 	beq	r2,zero,8d100 <__subdf3+0x334>
   8cf54:	04c02034 	movhi	r19,128
   8cf58:	9cffffc4 	addi	r19,r19,-1
   8cf5c:	2ce6703a 	and	r19,r5,r19
   8cf60:	98007c26 	beq	r19,zero,8d154 <__subdf3+0x388>
   8cf64:	9809883a 	mov	r4,r19
   8cf68:	008d8980 	call	8d898 <__clzsi2>
   8cf6c:	10fffe04 	addi	r3,r2,-8
   8cf70:	010007c4 	movi	r4,31
   8cf74:	20c07d16 	blt	r4,r3,8d16c <__subdf3+0x3a0>
   8cf78:	01400a04 	movi	r5,40
   8cf7c:	2885c83a 	sub	r2,r5,r2
   8cf80:	888ad83a 	srl	r5,r17,r2
   8cf84:	98e6983a 	sll	r19,r19,r3
   8cf88:	88e2983a 	sll	r17,r17,r3
   8cf8c:	2ce6b03a 	or	r19,r5,r19
   8cf90:	1c007a16 	blt	r3,r16,8d17c <__subdf3+0x3b0>
   8cf94:	1c21c83a 	sub	r16,r3,r16
   8cf98:	81400044 	addi	r5,r16,1
   8cf9c:	00c007c4 	movi	r3,31
   8cfa0:	19409616 	blt	r3,r5,8d1fc <__subdf3+0x430>
   8cfa4:	1c21c83a 	sub	r16,r3,r16
   8cfa8:	8c08983a 	sll	r4,r17,r16
   8cfac:	8946d83a 	srl	r3,r17,r5
   8cfb0:	9c20983a 	sll	r16,r19,r16
   8cfb4:	2008c03a 	cmpne	r4,r4,zero
   8cfb8:	994ad83a 	srl	r5,r19,r5
   8cfbc:	1c06b03a 	or	r3,r3,r16
   8cfc0:	1922b03a 	or	r17,r3,r4
   8cfc4:	0021883a 	mov	r16,zero
   8cfc8:	003fa306 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8cfcc:	2880202c 	andhi	r2,r5,128
   8cfd0:	9200004c 	andi	r8,r18,1
   8cfd4:	103fac1e 	bne	r2,zero,8ce88 <__alt_data_end+0xfffc3aa8>
   8cfd8:	2804977a 	slli	r2,r5,29
   8cfdc:	8822d0fa 	srli	r17,r17,3
   8cfe0:	00c1ffc4 	movi	r3,2047
   8cfe4:	280ad0fa 	srli	r5,r5,3
   8cfe8:	1444b03a 	or	r2,r2,r17
   8cfec:	80c02726 	beq	r16,r3,8d08c <__subdf3+0x2c0>
   8cff0:	01000434 	movhi	r4,16
   8cff4:	213fffc4 	addi	r4,r4,-1
   8cff8:	80e0703a 	and	r16,r16,r3
   8cffc:	2908703a 	and	r4,r5,r4
   8d000:	003fad06 	br	8ceb8 <__alt_data_end+0xfffc3ad8>
   8d004:	0080690e 	bge	zero,r2,8d1ac <__subdf3+0x3e0>
   8d008:	50002f26 	beq	r10,zero,8d0c8 <__subdf3+0x2fc>
   8d00c:	0101ffc4 	movi	r4,2047
   8d010:	813f9126 	beq	r16,r4,8ce58 <__alt_data_end+0xfffc3a78>
   8d014:	18c02034 	orhi	r3,r3,128
   8d018:	01000e04 	movi	r4,56
   8d01c:	2080b00e 	bge	r4,r2,8d2e0 <__subdf3+0x514>
   8d020:	198cb03a 	or	r6,r3,r6
   8d024:	300ec03a 	cmpne	r7,r6,zero
   8d028:	0005883a 	mov	r2,zero
   8d02c:	3c4f883a 	add	r7,r7,r17
   8d030:	3c63803a 	cmpltu	r17,r7,r17
   8d034:	114b883a 	add	r5,r2,r5
   8d038:	2c4b883a 	add	r5,r5,r17
   8d03c:	3823883a 	mov	r17,r7
   8d040:	2880202c 	andhi	r2,r5,128
   8d044:	10002e26 	beq	r2,zero,8d100 <__subdf3+0x334>
   8d048:	84000044 	addi	r16,r16,1
   8d04c:	0081ffc4 	movi	r2,2047
   8d050:	8080de26 	beq	r16,r2,8d3cc <__subdf3+0x600>
   8d054:	00bfe034 	movhi	r2,65408
   8d058:	10bfffc4 	addi	r2,r2,-1
   8d05c:	288a703a 	and	r5,r5,r2
   8d060:	880cd07a 	srli	r6,r17,1
   8d064:	280897fa 	slli	r4,r5,31
   8d068:	88c0004c 	andi	r3,r17,1
   8d06c:	30e2b03a 	or	r17,r6,r3
   8d070:	280ad07a 	srli	r5,r5,1
   8d074:	8922b03a 	or	r17,r17,r4
   8d078:	003f7706 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d07c:	1984b03a 	or	r2,r3,r6
   8d080:	103f6e26 	beq	r2,zero,8ce3c <__alt_data_end+0xfffc3a5c>
   8d084:	39c03fcc 	andi	r7,r7,255
   8d088:	003f6d06 	br	8ce40 <__alt_data_end+0xfffc3a60>
   8d08c:	1146b03a 	or	r3,r2,r5
   8d090:	18003f26 	beq	r3,zero,8d190 <__subdf3+0x3c4>
   8d094:	00c00434 	movhi	r3,16
   8d098:	29000234 	orhi	r4,r5,8
   8d09c:	18ffffc4 	addi	r3,r3,-1
   8d0a0:	20c8703a 	and	r4,r4,r3
   8d0a4:	003f8406 	br	8ceb8 <__alt_data_end+0xfffc3ad8>
   8d0a8:	10bfffc4 	addi	r2,r2,-1
   8d0ac:	1000501e 	bne	r2,zero,8d1f0 <__subdf3+0x424>
   8d0b0:	898fc83a 	sub	r7,r17,r6
   8d0b4:	89e3803a 	cmpltu	r17,r17,r7
   8d0b8:	28cbc83a 	sub	r5,r5,r3
   8d0bc:	2c4bc83a 	sub	r5,r5,r17
   8d0c0:	3823883a 	mov	r17,r7
   8d0c4:	003fa106 	br	8cf4c <__alt_data_end+0xfffc3b6c>
   8d0c8:	1988b03a 	or	r4,r3,r6
   8d0cc:	203f6226 	beq	r4,zero,8ce58 <__alt_data_end+0xfffc3a78>
   8d0d0:	10bfffc4 	addi	r2,r2,-1
   8d0d4:	10009b1e 	bne	r2,zero,8d344 <__subdf3+0x578>
   8d0d8:	344d883a 	add	r6,r6,r17
   8d0dc:	3463803a 	cmpltu	r17,r6,r17
   8d0e0:	194b883a 	add	r5,r3,r5
   8d0e4:	2c4b883a 	add	r5,r5,r17
   8d0e8:	3023883a 	mov	r17,r6
   8d0ec:	003fd406 	br	8d040 <__alt_data_end+0xfffc3c60>
   8d0f0:	1106b03a 	or	r3,r2,r4
   8d0f4:	1800b426 	beq	r3,zero,8d3c8 <__subdf3+0x5fc>
   8d0f8:	100b883a 	mov	r5,r2
   8d0fc:	2023883a 	mov	r17,r4
   8d100:	888001cc 	andi	r2,r17,7
   8d104:	103f561e 	bne	r2,zero,8ce60 <__alt_data_end+0xfffc3a80>
   8d108:	9200004c 	andi	r8,r18,1
   8d10c:	003fb206 	br	8cfd8 <__alt_data_end+0xfffc3bf8>
   8d110:	1000531e 	bne	r2,zero,8d260 <__subdf3+0x494>
   8d114:	80800044 	addi	r2,r16,1
   8d118:	1081ffcc 	andi	r2,r2,2047
   8d11c:	01000044 	movi	r4,1
   8d120:	2080a00e 	bge	r4,r2,8d3a4 <__subdf3+0x5d8>
   8d124:	8985c83a 	sub	r2,r17,r6
   8d128:	8889803a 	cmpltu	r4,r17,r2
   8d12c:	28e7c83a 	sub	r19,r5,r3
   8d130:	9927c83a 	sub	r19,r19,r4
   8d134:	9900202c 	andhi	r4,r19,128
   8d138:	20006226 	beq	r4,zero,8d2c4 <__subdf3+0x4f8>
   8d13c:	3463c83a 	sub	r17,r6,r17
   8d140:	194bc83a 	sub	r5,r3,r5
   8d144:	344d803a 	cmpltu	r6,r6,r17
   8d148:	29a7c83a 	sub	r19,r5,r6
   8d14c:	3825883a 	mov	r18,r7
   8d150:	983f841e 	bne	r19,zero,8cf64 <__alt_data_end+0xfffc3b84>
   8d154:	8809883a 	mov	r4,r17
   8d158:	008d8980 	call	8d898 <__clzsi2>
   8d15c:	10800804 	addi	r2,r2,32
   8d160:	10fffe04 	addi	r3,r2,-8
   8d164:	010007c4 	movi	r4,31
   8d168:	20ff830e 	bge	r4,r3,8cf78 <__alt_data_end+0xfffc3b98>
   8d16c:	14fff604 	addi	r19,r2,-40
   8d170:	8ce6983a 	sll	r19,r17,r19
   8d174:	0023883a 	mov	r17,zero
   8d178:	1c3f860e 	bge	r3,r16,8cf94 <__alt_data_end+0xfffc3bb4>
   8d17c:	017fe034 	movhi	r5,65408
   8d180:	297fffc4 	addi	r5,r5,-1
   8d184:	80e1c83a 	sub	r16,r16,r3
   8d188:	994a703a 	and	r5,r19,r5
   8d18c:	003f3206 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d190:	0009883a 	mov	r4,zero
   8d194:	0005883a 	mov	r2,zero
   8d198:	003f4706 	br	8ceb8 <__alt_data_end+0xfffc3ad8>
   8d19c:	198cb03a 	or	r6,r3,r6
   8d1a0:	300cc03a 	cmpne	r6,r6,zero
   8d1a4:	0005883a 	mov	r2,zero
   8d1a8:	003f6306 	br	8cf38 <__alt_data_end+0xfffc3b58>
   8d1ac:	10009d1e 	bne	r2,zero,8d424 <__subdf3+0x658>
   8d1b0:	81c00044 	addi	r7,r16,1
   8d1b4:	3881ffcc 	andi	r2,r7,2047
   8d1b8:	02400044 	movi	r9,1
   8d1bc:	4880680e 	bge	r9,r2,8d360 <__subdf3+0x594>
   8d1c0:	0081ffc4 	movi	r2,2047
   8d1c4:	3880ae26 	beq	r7,r2,8d480 <__subdf3+0x6b4>
   8d1c8:	344d883a 	add	r6,r6,r17
   8d1cc:	3463803a 	cmpltu	r17,r6,r17
   8d1d0:	194b883a 	add	r5,r3,r5
   8d1d4:	2c4b883a 	add	r5,r5,r17
   8d1d8:	282297fa 	slli	r17,r5,31
   8d1dc:	300cd07a 	srli	r6,r6,1
   8d1e0:	280ad07a 	srli	r5,r5,1
   8d1e4:	3821883a 	mov	r16,r7
   8d1e8:	89a2b03a 	or	r17,r17,r6
   8d1ec:	003f1a06 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d1f0:	0101ffc4 	movi	r4,2047
   8d1f4:	813f431e 	bne	r16,r4,8cf04 <__alt_data_end+0xfffc3b24>
   8d1f8:	003f1706 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d1fc:	80bff844 	addi	r2,r16,-31
   8d200:	00c00804 	movi	r3,32
   8d204:	9884d83a 	srl	r2,r19,r2
   8d208:	28c05126 	beq	r5,r3,8d350 <__subdf3+0x584>
   8d20c:	00c00fc4 	movi	r3,63
   8d210:	1c21c83a 	sub	r16,r3,r16
   8d214:	9c26983a 	sll	r19,r19,r16
   8d218:	9c62b03a 	or	r17,r19,r17
   8d21c:	8822c03a 	cmpne	r17,r17,zero
   8d220:	88a2b03a 	or	r17,r17,r2
   8d224:	000b883a 	mov	r5,zero
   8d228:	0021883a 	mov	r16,zero
   8d22c:	003fb406 	br	8d100 <__alt_data_end+0xfffc3d20>
   8d230:	113ff804 	addi	r4,r2,-32
   8d234:	01c00804 	movi	r7,32
   8d238:	1908d83a 	srl	r4,r3,r4
   8d23c:	11c04626 	beq	r2,r7,8d358 <__subdf3+0x58c>
   8d240:	01c01004 	movi	r7,64
   8d244:	3885c83a 	sub	r2,r7,r2
   8d248:	1884983a 	sll	r2,r3,r2
   8d24c:	118cb03a 	or	r6,r2,r6
   8d250:	300cc03a 	cmpne	r6,r6,zero
   8d254:	310cb03a 	or	r6,r6,r4
   8d258:	0005883a 	mov	r2,zero
   8d25c:	003f3606 	br	8cf38 <__alt_data_end+0xfffc3b58>
   8d260:	80002b26 	beq	r16,zero,8d310 <__subdf3+0x544>
   8d264:	0101ffc4 	movi	r4,2047
   8d268:	51006926 	beq	r10,r4,8d410 <__subdf3+0x644>
   8d26c:	0085c83a 	sub	r2,zero,r2
   8d270:	29402034 	orhi	r5,r5,128
   8d274:	01000e04 	movi	r4,56
   8d278:	20807d16 	blt	r4,r2,8d470 <__subdf3+0x6a4>
   8d27c:	010007c4 	movi	r4,31
   8d280:	2080d916 	blt	r4,r2,8d5e8 <__subdf3+0x81c>
   8d284:	01000804 	movi	r4,32
   8d288:	2089c83a 	sub	r4,r4,r2
   8d28c:	2912983a 	sll	r9,r5,r4
   8d290:	8890d83a 	srl	r8,r17,r2
   8d294:	8908983a 	sll	r4,r17,r4
   8d298:	2884d83a 	srl	r2,r5,r2
   8d29c:	4a22b03a 	or	r17,r9,r8
   8d2a0:	2008c03a 	cmpne	r4,r4,zero
   8d2a4:	8922b03a 	or	r17,r17,r4
   8d2a8:	3463c83a 	sub	r17,r6,r17
   8d2ac:	1885c83a 	sub	r2,r3,r2
   8d2b0:	344d803a 	cmpltu	r6,r6,r17
   8d2b4:	118bc83a 	sub	r5,r2,r6
   8d2b8:	5021883a 	mov	r16,r10
   8d2bc:	3825883a 	mov	r18,r7
   8d2c0:	003f2206 	br	8cf4c <__alt_data_end+0xfffc3b6c>
   8d2c4:	9886b03a 	or	r3,r19,r2
   8d2c8:	18001c1e 	bne	r3,zero,8d33c <__subdf3+0x570>
   8d2cc:	0011883a 	mov	r8,zero
   8d2d0:	000b883a 	mov	r5,zero
   8d2d4:	0023883a 	mov	r17,zero
   8d2d8:	0021883a 	mov	r16,zero
   8d2dc:	003f3e06 	br	8cfd8 <__alt_data_end+0xfffc3bf8>
   8d2e0:	010007c4 	movi	r4,31
   8d2e4:	20803c16 	blt	r4,r2,8d3d8 <__subdf3+0x60c>
   8d2e8:	01000804 	movi	r4,32
   8d2ec:	2089c83a 	sub	r4,r4,r2
   8d2f0:	1912983a 	sll	r9,r3,r4
   8d2f4:	308ed83a 	srl	r7,r6,r2
   8d2f8:	3108983a 	sll	r4,r6,r4
   8d2fc:	1884d83a 	srl	r2,r3,r2
   8d300:	49ceb03a 	or	r7,r9,r7
   8d304:	2008c03a 	cmpne	r4,r4,zero
   8d308:	390eb03a 	or	r7,r7,r4
   8d30c:	003f4706 	br	8d02c <__alt_data_end+0xfffc3c4c>
   8d310:	2c48b03a 	or	r4,r5,r17
   8d314:	20003e26 	beq	r4,zero,8d410 <__subdf3+0x644>
   8d318:	0084303a 	nor	r2,zero,r2
   8d31c:	10003a1e 	bne	r2,zero,8d408 <__subdf3+0x63c>
   8d320:	3463c83a 	sub	r17,r6,r17
   8d324:	194bc83a 	sub	r5,r3,r5
   8d328:	344d803a 	cmpltu	r6,r6,r17
   8d32c:	298bc83a 	sub	r5,r5,r6
   8d330:	5021883a 	mov	r16,r10
   8d334:	3825883a 	mov	r18,r7
   8d338:	003f0406 	br	8cf4c <__alt_data_end+0xfffc3b6c>
   8d33c:	1023883a 	mov	r17,r2
   8d340:	003f0706 	br	8cf60 <__alt_data_end+0xfffc3b80>
   8d344:	0101ffc4 	movi	r4,2047
   8d348:	813f331e 	bne	r16,r4,8d018 <__alt_data_end+0xfffc3c38>
   8d34c:	003ec206 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d350:	0027883a 	mov	r19,zero
   8d354:	003fb006 	br	8d218 <__alt_data_end+0xfffc3e38>
   8d358:	0005883a 	mov	r2,zero
   8d35c:	003fbb06 	br	8d24c <__alt_data_end+0xfffc3e6c>
   8d360:	2c44b03a 	or	r2,r5,r17
   8d364:	80008b1e 	bne	r16,zero,8d594 <__subdf3+0x7c8>
   8d368:	1000b526 	beq	r2,zero,8d640 <__subdf3+0x874>
   8d36c:	1984b03a 	or	r2,r3,r6
   8d370:	103eb926 	beq	r2,zero,8ce58 <__alt_data_end+0xfffc3a78>
   8d374:	3449883a 	add	r4,r6,r17
   8d378:	2463803a 	cmpltu	r17,r4,r17
   8d37c:	194b883a 	add	r5,r3,r5
   8d380:	2c4b883a 	add	r5,r5,r17
   8d384:	2880202c 	andhi	r2,r5,128
   8d388:	2023883a 	mov	r17,r4
   8d38c:	103f5c26 	beq	r2,zero,8d100 <__alt_data_end+0xfffc3d20>
   8d390:	00bfe034 	movhi	r2,65408
   8d394:	10bfffc4 	addi	r2,r2,-1
   8d398:	4821883a 	mov	r16,r9
   8d39c:	288a703a 	and	r5,r5,r2
   8d3a0:	003ead06 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d3a4:	2c44b03a 	or	r2,r5,r17
   8d3a8:	8000291e 	bne	r16,zero,8d450 <__subdf3+0x684>
   8d3ac:	10004f1e 	bne	r2,zero,8d4ec <__subdf3+0x720>
   8d3b0:	1984b03a 	or	r2,r3,r6
   8d3b4:	10000426 	beq	r2,zero,8d3c8 <__subdf3+0x5fc>
   8d3b8:	180b883a 	mov	r5,r3
   8d3bc:	3023883a 	mov	r17,r6
   8d3c0:	3825883a 	mov	r18,r7
   8d3c4:	003ea406 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d3c8:	0011883a 	mov	r8,zero
   8d3cc:	000b883a 	mov	r5,zero
   8d3d0:	0023883a 	mov	r17,zero
   8d3d4:	003f0006 	br	8cfd8 <__alt_data_end+0xfffc3bf8>
   8d3d8:	11fff804 	addi	r7,r2,-32
   8d3dc:	19c8d83a 	srl	r4,r3,r7
   8d3e0:	01c00804 	movi	r7,32
   8d3e4:	11c07e26 	beq	r2,r7,8d5e0 <__subdf3+0x814>
   8d3e8:	01c01004 	movi	r7,64
   8d3ec:	3885c83a 	sub	r2,r7,r2
   8d3f0:	1884983a 	sll	r2,r3,r2
   8d3f4:	118cb03a 	or	r6,r2,r6
   8d3f8:	300ec03a 	cmpne	r7,r6,zero
   8d3fc:	390eb03a 	or	r7,r7,r4
   8d400:	0005883a 	mov	r2,zero
   8d404:	003f0906 	br	8d02c <__alt_data_end+0xfffc3c4c>
   8d408:	0101ffc4 	movi	r4,2047
   8d40c:	513f991e 	bne	r10,r4,8d274 <__alt_data_end+0xfffc3e94>
   8d410:	180b883a 	mov	r5,r3
   8d414:	3023883a 	mov	r17,r6
   8d418:	5021883a 	mov	r16,r10
   8d41c:	3825883a 	mov	r18,r7
   8d420:	003e8d06 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d424:	80001a1e 	bne	r16,zero,8d490 <__subdf3+0x6c4>
   8d428:	2c48b03a 	or	r4,r5,r17
   8d42c:	20005526 	beq	r4,zero,8d584 <__subdf3+0x7b8>
   8d430:	0084303a 	nor	r2,zero,r2
   8d434:	1000511e 	bne	r2,zero,8d57c <__subdf3+0x7b0>
   8d438:	89a3883a 	add	r17,r17,r6
   8d43c:	194b883a 	add	r5,r3,r5
   8d440:	898d803a 	cmpltu	r6,r17,r6
   8d444:	298b883a 	add	r5,r5,r6
   8d448:	5021883a 	mov	r16,r10
   8d44c:	003efc06 	br	8d040 <__alt_data_end+0xfffc3c60>
   8d450:	1000341e 	bne	r2,zero,8d524 <__subdf3+0x758>
   8d454:	1984b03a 	or	r2,r3,r6
   8d458:	10006f26 	beq	r2,zero,8d618 <__subdf3+0x84c>
   8d45c:	180b883a 	mov	r5,r3
   8d460:	3023883a 	mov	r17,r6
   8d464:	3825883a 	mov	r18,r7
   8d468:	0401ffc4 	movi	r16,2047
   8d46c:	003e7a06 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d470:	2c62b03a 	or	r17,r5,r17
   8d474:	8822c03a 	cmpne	r17,r17,zero
   8d478:	0005883a 	mov	r2,zero
   8d47c:	003f8a06 	br	8d2a8 <__alt_data_end+0xfffc3ec8>
   8d480:	3821883a 	mov	r16,r7
   8d484:	000b883a 	mov	r5,zero
   8d488:	0023883a 	mov	r17,zero
   8d48c:	003ed206 	br	8cfd8 <__alt_data_end+0xfffc3bf8>
   8d490:	0101ffc4 	movi	r4,2047
   8d494:	51003b26 	beq	r10,r4,8d584 <__subdf3+0x7b8>
   8d498:	0085c83a 	sub	r2,zero,r2
   8d49c:	29402034 	orhi	r5,r5,128
   8d4a0:	01000e04 	movi	r4,56
   8d4a4:	20806216 	blt	r4,r2,8d630 <__subdf3+0x864>
   8d4a8:	010007c4 	movi	r4,31
   8d4ac:	20806b16 	blt	r4,r2,8d65c <__subdf3+0x890>
   8d4b0:	01000804 	movi	r4,32
   8d4b4:	2089c83a 	sub	r4,r4,r2
   8d4b8:	2912983a 	sll	r9,r5,r4
   8d4bc:	888ed83a 	srl	r7,r17,r2
   8d4c0:	8908983a 	sll	r4,r17,r4
   8d4c4:	2884d83a 	srl	r2,r5,r2
   8d4c8:	49e2b03a 	or	r17,r9,r7
   8d4cc:	2008c03a 	cmpne	r4,r4,zero
   8d4d0:	8922b03a 	or	r17,r17,r4
   8d4d4:	89a3883a 	add	r17,r17,r6
   8d4d8:	10c5883a 	add	r2,r2,r3
   8d4dc:	898d803a 	cmpltu	r6,r17,r6
   8d4e0:	118b883a 	add	r5,r2,r6
   8d4e4:	5021883a 	mov	r16,r10
   8d4e8:	003ed506 	br	8d040 <__alt_data_end+0xfffc3c60>
   8d4ec:	1984b03a 	or	r2,r3,r6
   8d4f0:	103e5926 	beq	r2,zero,8ce58 <__alt_data_end+0xfffc3a78>
   8d4f4:	8989c83a 	sub	r4,r17,r6
   8d4f8:	8911803a 	cmpltu	r8,r17,r4
   8d4fc:	28c5c83a 	sub	r2,r5,r3
   8d500:	1205c83a 	sub	r2,r2,r8
   8d504:	1200202c 	andhi	r8,r2,128
   8d508:	403ef926 	beq	r8,zero,8d0f0 <__alt_data_end+0xfffc3d10>
   8d50c:	3463c83a 	sub	r17,r6,r17
   8d510:	194bc83a 	sub	r5,r3,r5
   8d514:	344d803a 	cmpltu	r6,r6,r17
   8d518:	298bc83a 	sub	r5,r5,r6
   8d51c:	3825883a 	mov	r18,r7
   8d520:	003e4d06 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d524:	1984b03a 	or	r2,r3,r6
   8d528:	10002b26 	beq	r2,zero,8d5d8 <__subdf3+0x80c>
   8d52c:	2808d0fa 	srli	r4,r5,3
   8d530:	8822d0fa 	srli	r17,r17,3
   8d534:	280a977a 	slli	r5,r5,29
   8d538:	2080022c 	andhi	r2,r4,8
   8d53c:	2c62b03a 	or	r17,r5,r17
   8d540:	10000826 	beq	r2,zero,8d564 <__subdf3+0x798>
   8d544:	1810d0fa 	srli	r8,r3,3
   8d548:	4080022c 	andhi	r2,r8,8
   8d54c:	1000051e 	bne	r2,zero,8d564 <__subdf3+0x798>
   8d550:	300cd0fa 	srli	r6,r6,3
   8d554:	1804977a 	slli	r2,r3,29
   8d558:	4009883a 	mov	r4,r8
   8d55c:	3825883a 	mov	r18,r7
   8d560:	11a2b03a 	or	r17,r2,r6
   8d564:	880ad77a 	srli	r5,r17,29
   8d568:	200890fa 	slli	r4,r4,3
   8d56c:	882290fa 	slli	r17,r17,3
   8d570:	0401ffc4 	movi	r16,2047
   8d574:	290ab03a 	or	r5,r5,r4
   8d578:	003e3706 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d57c:	0101ffc4 	movi	r4,2047
   8d580:	513fc71e 	bne	r10,r4,8d4a0 <__alt_data_end+0xfffc40c0>
   8d584:	180b883a 	mov	r5,r3
   8d588:	3023883a 	mov	r17,r6
   8d58c:	5021883a 	mov	r16,r10
   8d590:	003e3106 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d594:	10002d26 	beq	r2,zero,8d64c <__subdf3+0x880>
   8d598:	1984b03a 	or	r2,r3,r6
   8d59c:	10000e26 	beq	r2,zero,8d5d8 <__subdf3+0x80c>
   8d5a0:	2808d0fa 	srli	r4,r5,3
   8d5a4:	8822d0fa 	srli	r17,r17,3
   8d5a8:	280a977a 	slli	r5,r5,29
   8d5ac:	2080022c 	andhi	r2,r4,8
   8d5b0:	2c62b03a 	or	r17,r5,r17
   8d5b4:	103feb26 	beq	r2,zero,8d564 <__alt_data_end+0xfffc4184>
   8d5b8:	180ed0fa 	srli	r7,r3,3
   8d5bc:	3880022c 	andhi	r2,r7,8
   8d5c0:	103fe81e 	bne	r2,zero,8d564 <__alt_data_end+0xfffc4184>
   8d5c4:	300cd0fa 	srli	r6,r6,3
   8d5c8:	1804977a 	slli	r2,r3,29
   8d5cc:	3809883a 	mov	r4,r7
   8d5d0:	11a2b03a 	or	r17,r2,r6
   8d5d4:	003fe306 	br	8d564 <__alt_data_end+0xfffc4184>
   8d5d8:	0401ffc4 	movi	r16,2047
   8d5dc:	003e1e06 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d5e0:	0005883a 	mov	r2,zero
   8d5e4:	003f8306 	br	8d3f4 <__alt_data_end+0xfffc4014>
   8d5e8:	113ff804 	addi	r4,r2,-32
   8d5ec:	02000804 	movi	r8,32
   8d5f0:	2908d83a 	srl	r4,r5,r4
   8d5f4:	12002526 	beq	r2,r8,8d68c <__subdf3+0x8c0>
   8d5f8:	02001004 	movi	r8,64
   8d5fc:	4085c83a 	sub	r2,r8,r2
   8d600:	288a983a 	sll	r5,r5,r2
   8d604:	2c62b03a 	or	r17,r5,r17
   8d608:	8822c03a 	cmpne	r17,r17,zero
   8d60c:	8922b03a 	or	r17,r17,r4
   8d610:	0005883a 	mov	r2,zero
   8d614:	003f2406 	br	8d2a8 <__alt_data_end+0xfffc3ec8>
   8d618:	01402034 	movhi	r5,128
   8d61c:	0011883a 	mov	r8,zero
   8d620:	297fffc4 	addi	r5,r5,-1
   8d624:	047ffe04 	movi	r17,-8
   8d628:	0401ffc4 	movi	r16,2047
   8d62c:	003e6a06 	br	8cfd8 <__alt_data_end+0xfffc3bf8>
   8d630:	2c62b03a 	or	r17,r5,r17
   8d634:	8822c03a 	cmpne	r17,r17,zero
   8d638:	0005883a 	mov	r2,zero
   8d63c:	003fa506 	br	8d4d4 <__alt_data_end+0xfffc40f4>
   8d640:	180b883a 	mov	r5,r3
   8d644:	3023883a 	mov	r17,r6
   8d648:	003e0306 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d64c:	180b883a 	mov	r5,r3
   8d650:	3023883a 	mov	r17,r6
   8d654:	0401ffc4 	movi	r16,2047
   8d658:	003dff06 	br	8ce58 <__alt_data_end+0xfffc3a78>
   8d65c:	113ff804 	addi	r4,r2,-32
   8d660:	01c00804 	movi	r7,32
   8d664:	2908d83a 	srl	r4,r5,r4
   8d668:	11c00a26 	beq	r2,r7,8d694 <__subdf3+0x8c8>
   8d66c:	01c01004 	movi	r7,64
   8d670:	3885c83a 	sub	r2,r7,r2
   8d674:	288a983a 	sll	r5,r5,r2
   8d678:	2c62b03a 	or	r17,r5,r17
   8d67c:	8822c03a 	cmpne	r17,r17,zero
   8d680:	8922b03a 	or	r17,r17,r4
   8d684:	0005883a 	mov	r2,zero
   8d688:	003f9206 	br	8d4d4 <__alt_data_end+0xfffc40f4>
   8d68c:	000b883a 	mov	r5,zero
   8d690:	003fdc06 	br	8d604 <__alt_data_end+0xfffc4224>
   8d694:	000b883a 	mov	r5,zero
   8d698:	003ff706 	br	8d678 <__alt_data_end+0xfffc4298>

0008d69c <__fixdfsi>:
   8d69c:	2806d53a 	srli	r3,r5,20
   8d6a0:	00800434 	movhi	r2,16
   8d6a4:	10bfffc4 	addi	r2,r2,-1
   8d6a8:	18c1ffcc 	andi	r3,r3,2047
   8d6ac:	0180ff84 	movi	r6,1022
   8d6b0:	2884703a 	and	r2,r5,r2
   8d6b4:	280ad7fa 	srli	r5,r5,31
   8d6b8:	30c0130e 	bge	r6,r3,8d708 <__fixdfsi+0x6c>
   8d6bc:	01810744 	movi	r6,1053
   8d6c0:	30c00d16 	blt	r6,r3,8d6f8 <__fixdfsi+0x5c>
   8d6c4:	01810cc4 	movi	r6,1075
   8d6c8:	30cdc83a 	sub	r6,r6,r3
   8d6cc:	01c007c4 	movi	r7,31
   8d6d0:	10800434 	orhi	r2,r2,16
   8d6d4:	39800e0e 	bge	r7,r6,8d710 <__fixdfsi+0x74>
   8d6d8:	010104c4 	movi	r4,1043
   8d6dc:	20c7c83a 	sub	r3,r4,r3
   8d6e0:	10c6d83a 	srl	r3,r2,r3
   8d6e4:	29403fcc 	andi	r5,r5,255
   8d6e8:	0145c83a 	sub	r2,zero,r5
   8d6ec:	1884f03a 	xor	r2,r3,r2
   8d6f0:	1145883a 	add	r2,r2,r5
   8d6f4:	f800283a 	ret
   8d6f8:	00a00034 	movhi	r2,32768
   8d6fc:	10bfffc4 	addi	r2,r2,-1
   8d700:	2885883a 	add	r2,r5,r2
   8d704:	f800283a 	ret
   8d708:	0005883a 	mov	r2,zero
   8d70c:	f800283a 	ret
   8d710:	18fefb44 	addi	r3,r3,-1043
   8d714:	2188d83a 	srl	r4,r4,r6
   8d718:	10c6983a 	sll	r3,r2,r3
   8d71c:	20c6b03a 	or	r3,r4,r3
   8d720:	003ff006 	br	8d6e4 <__alt_data_end+0xfffc4304>

0008d724 <__floatsidf>:
   8d724:	defffd04 	addi	sp,sp,-12
   8d728:	dc400115 	stw	r17,4(sp)
   8d72c:	dfc00215 	stw	ra,8(sp)
   8d730:	dc000015 	stw	r16,0(sp)
   8d734:	2023883a 	mov	r17,r4
   8d738:	20001426 	beq	r4,zero,8d78c <__floatsidf+0x68>
   8d73c:	2020d7fa 	srli	r16,r4,31
   8d740:	80000126 	beq	r16,zero,8d748 <__floatsidf+0x24>
   8d744:	0123c83a 	sub	r17,zero,r4
   8d748:	8809883a 	mov	r4,r17
   8d74c:	008d8980 	call	8d898 <__clzsi2>
   8d750:	01410784 	movi	r5,1054
   8d754:	00c00284 	movi	r3,10
   8d758:	288bc83a 	sub	r5,r5,r2
   8d75c:	18801c16 	blt	r3,r2,8d7d0 <__floatsidf+0xac>
   8d760:	00c002c4 	movi	r3,11
   8d764:	1887c83a 	sub	r3,r3,r2
   8d768:	88c8d83a 	srl	r4,r17,r3
   8d76c:	00c00434 	movhi	r3,16
   8d770:	18ffffc4 	addi	r3,r3,-1
   8d774:	10800544 	addi	r2,r2,21
   8d778:	20c8703a 	and	r4,r4,r3
   8d77c:	8884983a 	sll	r2,r17,r2
   8d780:	28c1ffcc 	andi	r3,r5,2047
   8d784:	800d883a 	mov	r6,r16
   8d788:	00000406 	br	8d79c <__floatsidf+0x78>
   8d78c:	000d883a 	mov	r6,zero
   8d790:	0007883a 	mov	r3,zero
   8d794:	0009883a 	mov	r4,zero
   8d798:	0005883a 	mov	r2,zero
   8d79c:	180a953a 	slli	r5,r3,20
   8d7a0:	31803fcc 	andi	r6,r6,255
   8d7a4:	00c00434 	movhi	r3,16
   8d7a8:	300c97fa 	slli	r6,r6,31
   8d7ac:	18ffffc4 	addi	r3,r3,-1
   8d7b0:	20c6703a 	and	r3,r4,r3
   8d7b4:	1946b03a 	or	r3,r3,r5
   8d7b8:	1986b03a 	or	r3,r3,r6
   8d7bc:	dfc00217 	ldw	ra,8(sp)
   8d7c0:	dc400117 	ldw	r17,4(sp)
   8d7c4:	dc000017 	ldw	r16,0(sp)
   8d7c8:	dec00304 	addi	sp,sp,12
   8d7cc:	f800283a 	ret
   8d7d0:	10fffd44 	addi	r3,r2,-11
   8d7d4:	88c8983a 	sll	r4,r17,r3
   8d7d8:	00800434 	movhi	r2,16
   8d7dc:	10bfffc4 	addi	r2,r2,-1
   8d7e0:	2088703a 	and	r4,r4,r2
   8d7e4:	28c1ffcc 	andi	r3,r5,2047
   8d7e8:	800d883a 	mov	r6,r16
   8d7ec:	0005883a 	mov	r2,zero
   8d7f0:	003fea06 	br	8d79c <__alt_data_end+0xfffc43bc>

0008d7f4 <__floatunsidf>:
   8d7f4:	defffe04 	addi	sp,sp,-8
   8d7f8:	dc000015 	stw	r16,0(sp)
   8d7fc:	dfc00115 	stw	ra,4(sp)
   8d800:	2021883a 	mov	r16,r4
   8d804:	20001026 	beq	r4,zero,8d848 <__floatunsidf+0x54>
   8d808:	008d8980 	call	8d898 <__clzsi2>
   8d80c:	01410784 	movi	r5,1054
   8d810:	100d883a 	mov	r6,r2
   8d814:	288bc83a 	sub	r5,r5,r2
   8d818:	00800284 	movi	r2,10
   8d81c:	11801616 	blt	r2,r6,8d878 <__floatunsidf+0x84>
   8d820:	008002c4 	movi	r2,11
   8d824:	1185c83a 	sub	r2,r2,r6
   8d828:	8084d83a 	srl	r2,r16,r2
   8d82c:	00c00434 	movhi	r3,16
   8d830:	31c00544 	addi	r7,r6,21
   8d834:	18ffffc4 	addi	r3,r3,-1
   8d838:	81e0983a 	sll	r16,r16,r7
   8d83c:	10cc703a 	and	r6,r2,r3
   8d840:	2941ffcc 	andi	r5,r5,2047
   8d844:	00000206 	br	8d850 <__floatunsidf+0x5c>
   8d848:	000b883a 	mov	r5,zero
   8d84c:	000d883a 	mov	r6,zero
   8d850:	280a953a 	slli	r5,r5,20
   8d854:	00c00434 	movhi	r3,16
   8d858:	18ffffc4 	addi	r3,r3,-1
   8d85c:	30c6703a 	and	r3,r6,r3
   8d860:	8005883a 	mov	r2,r16
   8d864:	1946b03a 	or	r3,r3,r5
   8d868:	dfc00117 	ldw	ra,4(sp)
   8d86c:	dc000017 	ldw	r16,0(sp)
   8d870:	dec00204 	addi	sp,sp,8
   8d874:	f800283a 	ret
   8d878:	31bffd44 	addi	r6,r6,-11
   8d87c:	818c983a 	sll	r6,r16,r6
   8d880:	00800434 	movhi	r2,16
   8d884:	10bfffc4 	addi	r2,r2,-1
   8d888:	2941ffcc 	andi	r5,r5,2047
   8d88c:	0021883a 	mov	r16,zero
   8d890:	308c703a 	and	r6,r6,r2
   8d894:	003fee06 	br	8d850 <__alt_data_end+0xfffc4470>

0008d898 <__clzsi2>:
   8d898:	00bfffd4 	movui	r2,65535
   8d89c:	11000b36 	bltu	r2,r4,8d8cc <__clzsi2+0x34>
   8d8a0:	00803fc4 	movi	r2,255
   8d8a4:	1100122e 	bgeu	r2,r4,8d8f0 <__clzsi2+0x58>
   8d8a8:	00c00204 	movi	r3,8
   8d8ac:	01400604 	movi	r5,24
   8d8b0:	20c8d83a 	srl	r4,r4,r3
   8d8b4:	00800274 	movhi	r2,9
   8d8b8:	10842a04 	addi	r2,r2,4264
   8d8bc:	1109883a 	add	r4,r2,r4
   8d8c0:	20800003 	ldbu	r2,0(r4)
   8d8c4:	2885c83a 	sub	r2,r5,r2
   8d8c8:	f800283a 	ret
   8d8cc:	00804034 	movhi	r2,256
   8d8d0:	10bfffc4 	addi	r2,r2,-1
   8d8d4:	11000336 	bltu	r2,r4,8d8e4 <__clzsi2+0x4c>
   8d8d8:	00c00404 	movi	r3,16
   8d8dc:	180b883a 	mov	r5,r3
   8d8e0:	003ff306 	br	8d8b0 <__alt_data_end+0xfffc44d0>
   8d8e4:	00c00604 	movi	r3,24
   8d8e8:	01400204 	movi	r5,8
   8d8ec:	003ff006 	br	8d8b0 <__alt_data_end+0xfffc44d0>
   8d8f0:	0007883a 	mov	r3,zero
   8d8f4:	01400804 	movi	r5,32
   8d8f8:	003fed06 	br	8d8b0 <__alt_data_end+0xfffc44d0>

0008d8fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d8fc:	defffe04 	addi	sp,sp,-8
   8d900:	dfc00115 	stw	ra,4(sp)
   8d904:	df000015 	stw	fp,0(sp)
   8d908:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d90c:	00800274 	movhi	r2,9
   8d910:	108b5104 	addi	r2,r2,11588
   8d914:	10800017 	ldw	r2,0(r2)
   8d918:	10000526 	beq	r2,zero,8d930 <alt_get_errno+0x34>
   8d91c:	00800274 	movhi	r2,9
   8d920:	108b5104 	addi	r2,r2,11588
   8d924:	10800017 	ldw	r2,0(r2)
   8d928:	103ee83a 	callr	r2
   8d92c:	00000206 	br	8d938 <alt_get_errno+0x3c>
   8d930:	00800274 	movhi	r2,9
   8d934:	10923704 	addi	r2,r2,18652
}
   8d938:	e037883a 	mov	sp,fp
   8d93c:	dfc00117 	ldw	ra,4(sp)
   8d940:	df000017 	ldw	fp,0(sp)
   8d944:	dec00204 	addi	sp,sp,8
   8d948:	f800283a 	ret

0008d94c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8d94c:	defffb04 	addi	sp,sp,-20
   8d950:	dfc00415 	stw	ra,16(sp)
   8d954:	df000315 	stw	fp,12(sp)
   8d958:	df000304 	addi	fp,sp,12
   8d95c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8d960:	e0bfff17 	ldw	r2,-4(fp)
   8d964:	10000816 	blt	r2,zero,8d988 <close+0x3c>
   8d968:	e13fff17 	ldw	r4,-4(fp)
   8d96c:	01400304 	movi	r5,12
   8d970:	008b0d80 	call	8b0d8 <__mulsi3>
   8d974:	1007883a 	mov	r3,r2
   8d978:	00800274 	movhi	r2,9
   8d97c:	1086b404 	addi	r2,r2,6864
   8d980:	1885883a 	add	r2,r3,r2
   8d984:	00000106 	br	8d98c <close+0x40>
   8d988:	0005883a 	mov	r2,zero
   8d98c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8d990:	e0bffd17 	ldw	r2,-12(fp)
   8d994:	10001926 	beq	r2,zero,8d9fc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8d998:	e0bffd17 	ldw	r2,-12(fp)
   8d99c:	10800017 	ldw	r2,0(r2)
   8d9a0:	10800417 	ldw	r2,16(r2)
   8d9a4:	10000626 	beq	r2,zero,8d9c0 <close+0x74>
   8d9a8:	e0bffd17 	ldw	r2,-12(fp)
   8d9ac:	10800017 	ldw	r2,0(r2)
   8d9b0:	10800417 	ldw	r2,16(r2)
   8d9b4:	e13ffd17 	ldw	r4,-12(fp)
   8d9b8:	103ee83a 	callr	r2
   8d9bc:	00000106 	br	8d9c4 <close+0x78>
   8d9c0:	0005883a 	mov	r2,zero
   8d9c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8d9c8:	e13fff17 	ldw	r4,-4(fp)
   8d9cc:	008e0700 	call	8e070 <alt_release_fd>
    if (rval < 0)
   8d9d0:	e0bffe17 	ldw	r2,-8(fp)
   8d9d4:	1000070e 	bge	r2,zero,8d9f4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   8d9d8:	008d8fc0 	call	8d8fc <alt_get_errno>
   8d9dc:	1007883a 	mov	r3,r2
   8d9e0:	e0bffe17 	ldw	r2,-8(fp)
   8d9e4:	0085c83a 	sub	r2,zero,r2
   8d9e8:	18800015 	stw	r2,0(r3)
      return -1;
   8d9ec:	00bfffc4 	movi	r2,-1
   8d9f0:	00000706 	br	8da10 <close+0xc4>
    }
    return 0;
   8d9f4:	0005883a 	mov	r2,zero
   8d9f8:	00000506 	br	8da10 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8d9fc:	008d8fc0 	call	8d8fc <alt_get_errno>
   8da00:	1007883a 	mov	r3,r2
   8da04:	00801444 	movi	r2,81
   8da08:	18800015 	stw	r2,0(r3)
    return -1;
   8da0c:	00bfffc4 	movi	r2,-1
  }
}
   8da10:	e037883a 	mov	sp,fp
   8da14:	dfc00117 	ldw	ra,4(sp)
   8da18:	df000017 	ldw	fp,0(sp)
   8da1c:	dec00204 	addi	sp,sp,8
   8da20:	f800283a 	ret

0008da24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8da24:	defffc04 	addi	sp,sp,-16
   8da28:	df000315 	stw	fp,12(sp)
   8da2c:	df000304 	addi	fp,sp,12
   8da30:	e13ffd15 	stw	r4,-12(fp)
   8da34:	e17ffe15 	stw	r5,-8(fp)
   8da38:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8da3c:	e0bfff17 	ldw	r2,-4(fp)
}
   8da40:	e037883a 	mov	sp,fp
   8da44:	df000017 	ldw	fp,0(sp)
   8da48:	dec00104 	addi	sp,sp,4
   8da4c:	f800283a 	ret

0008da50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8da50:	defffe04 	addi	sp,sp,-8
   8da54:	dfc00115 	stw	ra,4(sp)
   8da58:	df000015 	stw	fp,0(sp)
   8da5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8da60:	00800274 	movhi	r2,9
   8da64:	108b5104 	addi	r2,r2,11588
   8da68:	10800017 	ldw	r2,0(r2)
   8da6c:	10000526 	beq	r2,zero,8da84 <alt_get_errno+0x34>
   8da70:	00800274 	movhi	r2,9
   8da74:	108b5104 	addi	r2,r2,11588
   8da78:	10800017 	ldw	r2,0(r2)
   8da7c:	103ee83a 	callr	r2
   8da80:	00000206 	br	8da8c <alt_get_errno+0x3c>
   8da84:	00800274 	movhi	r2,9
   8da88:	10923704 	addi	r2,r2,18652
}
   8da8c:	e037883a 	mov	sp,fp
   8da90:	dfc00117 	ldw	ra,4(sp)
   8da94:	df000017 	ldw	fp,0(sp)
   8da98:	dec00204 	addi	sp,sp,8
   8da9c:	f800283a 	ret

0008daa0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8daa0:	defffb04 	addi	sp,sp,-20
   8daa4:	dfc00415 	stw	ra,16(sp)
   8daa8:	df000315 	stw	fp,12(sp)
   8daac:	df000304 	addi	fp,sp,12
   8dab0:	e13ffe15 	stw	r4,-8(fp)
   8dab4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8dab8:	e0bffe17 	ldw	r2,-8(fp)
   8dabc:	10000816 	blt	r2,zero,8dae0 <fstat+0x40>
   8dac0:	e13ffe17 	ldw	r4,-8(fp)
   8dac4:	01400304 	movi	r5,12
   8dac8:	008b0d80 	call	8b0d8 <__mulsi3>
   8dacc:	1007883a 	mov	r3,r2
   8dad0:	00800274 	movhi	r2,9
   8dad4:	1086b404 	addi	r2,r2,6864
   8dad8:	1885883a 	add	r2,r3,r2
   8dadc:	00000106 	br	8dae4 <fstat+0x44>
   8dae0:	0005883a 	mov	r2,zero
   8dae4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8dae8:	e0bffd17 	ldw	r2,-12(fp)
   8daec:	10001026 	beq	r2,zero,8db30 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8daf0:	e0bffd17 	ldw	r2,-12(fp)
   8daf4:	10800017 	ldw	r2,0(r2)
   8daf8:	10800817 	ldw	r2,32(r2)
   8dafc:	10000726 	beq	r2,zero,8db1c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   8db00:	e0bffd17 	ldw	r2,-12(fp)
   8db04:	10800017 	ldw	r2,0(r2)
   8db08:	10800817 	ldw	r2,32(r2)
   8db0c:	e13ffd17 	ldw	r4,-12(fp)
   8db10:	e17fff17 	ldw	r5,-4(fp)
   8db14:	103ee83a 	callr	r2
   8db18:	00000a06 	br	8db44 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8db1c:	e0bfff17 	ldw	r2,-4(fp)
   8db20:	00c80004 	movi	r3,8192
   8db24:	10c00115 	stw	r3,4(r2)
      return 0;
   8db28:	0005883a 	mov	r2,zero
   8db2c:	00000506 	br	8db44 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8db30:	008da500 	call	8da50 <alt_get_errno>
   8db34:	1007883a 	mov	r3,r2
   8db38:	00801444 	movi	r2,81
   8db3c:	18800015 	stw	r2,0(r3)
    return -1;
   8db40:	00bfffc4 	movi	r2,-1
  }
}
   8db44:	e037883a 	mov	sp,fp
   8db48:	dfc00117 	ldw	ra,4(sp)
   8db4c:	df000017 	ldw	fp,0(sp)
   8db50:	dec00204 	addi	sp,sp,8
   8db54:	f800283a 	ret

0008db58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8db58:	defffe04 	addi	sp,sp,-8
   8db5c:	dfc00115 	stw	ra,4(sp)
   8db60:	df000015 	stw	fp,0(sp)
   8db64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8db68:	00800274 	movhi	r2,9
   8db6c:	108b5104 	addi	r2,r2,11588
   8db70:	10800017 	ldw	r2,0(r2)
   8db74:	10000526 	beq	r2,zero,8db8c <alt_get_errno+0x34>
   8db78:	00800274 	movhi	r2,9
   8db7c:	108b5104 	addi	r2,r2,11588
   8db80:	10800017 	ldw	r2,0(r2)
   8db84:	103ee83a 	callr	r2
   8db88:	00000206 	br	8db94 <alt_get_errno+0x3c>
   8db8c:	00800274 	movhi	r2,9
   8db90:	10923704 	addi	r2,r2,18652
}
   8db94:	e037883a 	mov	sp,fp
   8db98:	dfc00117 	ldw	ra,4(sp)
   8db9c:	df000017 	ldw	fp,0(sp)
   8dba0:	dec00204 	addi	sp,sp,8
   8dba4:	f800283a 	ret

0008dba8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8dba8:	deffed04 	addi	sp,sp,-76
   8dbac:	dfc01215 	stw	ra,72(sp)
   8dbb0:	df001115 	stw	fp,68(sp)
   8dbb4:	df001104 	addi	fp,sp,68
   8dbb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8dbbc:	e0bfff17 	ldw	r2,-4(fp)
   8dbc0:	10000816 	blt	r2,zero,8dbe4 <isatty+0x3c>
   8dbc4:	e13fff17 	ldw	r4,-4(fp)
   8dbc8:	01400304 	movi	r5,12
   8dbcc:	008b0d80 	call	8b0d8 <__mulsi3>
   8dbd0:	1007883a 	mov	r3,r2
   8dbd4:	00800274 	movhi	r2,9
   8dbd8:	1086b404 	addi	r2,r2,6864
   8dbdc:	1885883a 	add	r2,r3,r2
   8dbe0:	00000106 	br	8dbe8 <isatty+0x40>
   8dbe4:	0005883a 	mov	r2,zero
   8dbe8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8dbec:	e0bfef17 	ldw	r2,-68(fp)
   8dbf0:	10000e26 	beq	r2,zero,8dc2c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8dbf4:	e0bfef17 	ldw	r2,-68(fp)
   8dbf8:	10800017 	ldw	r2,0(r2)
   8dbfc:	10800817 	ldw	r2,32(r2)
   8dc00:	1000021e 	bne	r2,zero,8dc0c <isatty+0x64>
    {
      return 1;
   8dc04:	00800044 	movi	r2,1
   8dc08:	00000d06 	br	8dc40 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8dc0c:	e0bff004 	addi	r2,fp,-64
   8dc10:	e13fff17 	ldw	r4,-4(fp)
   8dc14:	100b883a 	mov	r5,r2
   8dc18:	008daa00 	call	8daa0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8dc1c:	e0bff117 	ldw	r2,-60(fp)
   8dc20:	10880020 	cmpeqi	r2,r2,8192
   8dc24:	10803fcc 	andi	r2,r2,255
   8dc28:	00000506 	br	8dc40 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8dc2c:	008db580 	call	8db58 <alt_get_errno>
   8dc30:	1007883a 	mov	r3,r2
   8dc34:	00801444 	movi	r2,81
   8dc38:	18800015 	stw	r2,0(r3)
    return 0;
   8dc3c:	0005883a 	mov	r2,zero
  }
}
   8dc40:	e037883a 	mov	sp,fp
   8dc44:	dfc00117 	ldw	ra,4(sp)
   8dc48:	df000017 	ldw	fp,0(sp)
   8dc4c:	dec00204 	addi	sp,sp,8
   8dc50:	f800283a 	ret

0008dc54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8dc54:	defffc04 	addi	sp,sp,-16
   8dc58:	df000315 	stw	fp,12(sp)
   8dc5c:	df000304 	addi	fp,sp,12
   8dc60:	e13ffd15 	stw	r4,-12(fp)
   8dc64:	e17ffe15 	stw	r5,-8(fp)
   8dc68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8dc6c:	e0fffe17 	ldw	r3,-8(fp)
   8dc70:	e0bffd17 	ldw	r2,-12(fp)
   8dc74:	18800c26 	beq	r3,r2,8dca8 <alt_load_section+0x54>
  {
    while( to != end )
   8dc78:	00000806 	br	8dc9c <alt_load_section+0x48>
    {
      *to++ = *from++;
   8dc7c:	e0bffe17 	ldw	r2,-8(fp)
   8dc80:	10c00104 	addi	r3,r2,4
   8dc84:	e0fffe15 	stw	r3,-8(fp)
   8dc88:	e0fffd17 	ldw	r3,-12(fp)
   8dc8c:	19000104 	addi	r4,r3,4
   8dc90:	e13ffd15 	stw	r4,-12(fp)
   8dc94:	18c00017 	ldw	r3,0(r3)
   8dc98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8dc9c:	e0fffe17 	ldw	r3,-8(fp)
   8dca0:	e0bfff17 	ldw	r2,-4(fp)
   8dca4:	18bff51e 	bne	r3,r2,8dc7c <__alt_data_end+0xfffc489c>
    {
      *to++ = *from++;
    }
  }
}
   8dca8:	e037883a 	mov	sp,fp
   8dcac:	df000017 	ldw	fp,0(sp)
   8dcb0:	dec00104 	addi	sp,sp,4
   8dcb4:	f800283a 	ret

0008dcb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8dcb8:	defffe04 	addi	sp,sp,-8
   8dcbc:	dfc00115 	stw	ra,4(sp)
   8dcc0:	df000015 	stw	fp,0(sp)
   8dcc4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8dcc8:	01000274 	movhi	r4,9
   8dccc:	210b5604 	addi	r4,r4,11608
   8dcd0:	01400274 	movhi	r5,9
   8dcd4:	29448104 	addi	r5,r5,4612
   8dcd8:	01800274 	movhi	r6,9
   8dcdc:	318b5604 	addi	r6,r6,11608
   8dce0:	008dc540 	call	8dc54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8dce4:	01000234 	movhi	r4,8
   8dce8:	21000804 	addi	r4,r4,32
   8dcec:	01400234 	movhi	r5,8
   8dcf0:	29400804 	addi	r5,r5,32
   8dcf4:	01800234 	movhi	r6,8
   8dcf8:	31808c04 	addi	r6,r6,560
   8dcfc:	008dc540 	call	8dc54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8dd00:	01000274 	movhi	r4,9
   8dd04:	21037804 	addi	r4,r4,3552
   8dd08:	01400274 	movhi	r5,9
   8dd0c:	29437804 	addi	r5,r5,3552
   8dd10:	01800274 	movhi	r6,9
   8dd14:	31848104 	addi	r6,r6,4612
   8dd18:	008dc540 	call	8dc54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8dd1c:	008fddc0 	call	8fddc <alt_dcache_flush_all>
  alt_icache_flush_all();
   8dd20:	00900340 	call	90034 <alt_icache_flush_all>
}
   8dd24:	e037883a 	mov	sp,fp
   8dd28:	dfc00117 	ldw	ra,4(sp)
   8dd2c:	df000017 	ldw	fp,0(sp)
   8dd30:	dec00204 	addi	sp,sp,8
   8dd34:	f800283a 	ret

0008dd38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8dd38:	defffe04 	addi	sp,sp,-8
   8dd3c:	dfc00115 	stw	ra,4(sp)
   8dd40:	df000015 	stw	fp,0(sp)
   8dd44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8dd48:	00800274 	movhi	r2,9
   8dd4c:	108b5104 	addi	r2,r2,11588
   8dd50:	10800017 	ldw	r2,0(r2)
   8dd54:	10000526 	beq	r2,zero,8dd6c <alt_get_errno+0x34>
   8dd58:	00800274 	movhi	r2,9
   8dd5c:	108b5104 	addi	r2,r2,11588
   8dd60:	10800017 	ldw	r2,0(r2)
   8dd64:	103ee83a 	callr	r2
   8dd68:	00000206 	br	8dd74 <alt_get_errno+0x3c>
   8dd6c:	00800274 	movhi	r2,9
   8dd70:	10923704 	addi	r2,r2,18652
}
   8dd74:	e037883a 	mov	sp,fp
   8dd78:	dfc00117 	ldw	ra,4(sp)
   8dd7c:	df000017 	ldw	fp,0(sp)
   8dd80:	dec00204 	addi	sp,sp,8
   8dd84:	f800283a 	ret

0008dd88 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8dd88:	defff904 	addi	sp,sp,-28
   8dd8c:	dfc00615 	stw	ra,24(sp)
   8dd90:	df000515 	stw	fp,20(sp)
   8dd94:	df000504 	addi	fp,sp,20
   8dd98:	e13ffd15 	stw	r4,-12(fp)
   8dd9c:	e17ffe15 	stw	r5,-8(fp)
   8dda0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8dda4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8dda8:	e0bffd17 	ldw	r2,-12(fp)
   8ddac:	10000816 	blt	r2,zero,8ddd0 <lseek+0x48>
   8ddb0:	e13ffd17 	ldw	r4,-12(fp)
   8ddb4:	01400304 	movi	r5,12
   8ddb8:	008b0d80 	call	8b0d8 <__mulsi3>
   8ddbc:	1007883a 	mov	r3,r2
   8ddc0:	00800274 	movhi	r2,9
   8ddc4:	1086b404 	addi	r2,r2,6864
   8ddc8:	1885883a 	add	r2,r3,r2
   8ddcc:	00000106 	br	8ddd4 <lseek+0x4c>
   8ddd0:	0005883a 	mov	r2,zero
   8ddd4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8ddd8:	e0bffc17 	ldw	r2,-16(fp)
   8dddc:	10001026 	beq	r2,zero,8de20 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8dde0:	e0bffc17 	ldw	r2,-16(fp)
   8dde4:	10800017 	ldw	r2,0(r2)
   8dde8:	10800717 	ldw	r2,28(r2)
   8ddec:	10000926 	beq	r2,zero,8de14 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8ddf0:	e0bffc17 	ldw	r2,-16(fp)
   8ddf4:	10800017 	ldw	r2,0(r2)
   8ddf8:	10800717 	ldw	r2,28(r2)
   8ddfc:	e13ffc17 	ldw	r4,-16(fp)
   8de00:	e17ffe17 	ldw	r5,-8(fp)
   8de04:	e1bfff17 	ldw	r6,-4(fp)
   8de08:	103ee83a 	callr	r2
   8de0c:	e0bffb15 	stw	r2,-20(fp)
   8de10:	00000506 	br	8de28 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8de14:	00bfde84 	movi	r2,-134
   8de18:	e0bffb15 	stw	r2,-20(fp)
   8de1c:	00000206 	br	8de28 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   8de20:	00bfebc4 	movi	r2,-81
   8de24:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8de28:	e0bffb17 	ldw	r2,-20(fp)
   8de2c:	1000070e 	bge	r2,zero,8de4c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   8de30:	008dd380 	call	8dd38 <alt_get_errno>
   8de34:	1007883a 	mov	r3,r2
   8de38:	e0bffb17 	ldw	r2,-20(fp)
   8de3c:	0085c83a 	sub	r2,zero,r2
   8de40:	18800015 	stw	r2,0(r3)
    rc = -1;
   8de44:	00bfffc4 	movi	r2,-1
   8de48:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8de4c:	e0bffb17 	ldw	r2,-20(fp)
}
   8de50:	e037883a 	mov	sp,fp
   8de54:	dfc00117 	ldw	ra,4(sp)
   8de58:	df000017 	ldw	fp,0(sp)
   8de5c:	dec00204 	addi	sp,sp,8
   8de60:	f800283a 	ret

0008de64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8de64:	defffd04 	addi	sp,sp,-12
   8de68:	dfc00215 	stw	ra,8(sp)
   8de6c:	df000115 	stw	fp,4(sp)
   8de70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8de74:	0009883a 	mov	r4,zero
   8de78:	008e3280 	call	8e328 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8de7c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8de80:	008e35c0 	call	8e35c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8de84:	01000274 	movhi	r4,9
   8de88:	21046d04 	addi	r4,r4,4532
   8de8c:	01400274 	movhi	r5,9
   8de90:	29446d04 	addi	r5,r5,4532
   8de94:	01800274 	movhi	r6,9
   8de98:	31846d04 	addi	r6,r6,4532
   8de9c:	00901300 	call	90130 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8dea0:	008feec0 	call	8feec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8dea4:	01000274 	movhi	r4,9
   8dea8:	213fd204 	addi	r4,r4,-184
   8deac:	0090a3c0 	call	90a3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8deb0:	d126f417 	ldw	r4,-25648(gp)
   8deb4:	d0e6f517 	ldw	r3,-25644(gp)
   8deb8:	d0a6f617 	ldw	r2,-25640(gp)
   8debc:	180b883a 	mov	r5,r3
   8dec0:	100d883a 	mov	r6,r2
   8dec4:	0080ea40 	call	80ea4 <main>
   8dec8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8decc:	01000044 	movi	r4,1
   8ded0:	008d94c0 	call	8d94c <close>
  exit (result);
   8ded4:	e13fff17 	ldw	r4,-4(fp)
   8ded8:	0090a500 	call	90a50 <exit>

0008dedc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8dedc:	defffe04 	addi	sp,sp,-8
   8dee0:	df000115 	stw	fp,4(sp)
   8dee4:	df000104 	addi	fp,sp,4
   8dee8:	e13fff15 	stw	r4,-4(fp)
}
   8deec:	e037883a 	mov	sp,fp
   8def0:	df000017 	ldw	fp,0(sp)
   8def4:	dec00104 	addi	sp,sp,4
   8def8:	f800283a 	ret

0008defc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8defc:	defffe04 	addi	sp,sp,-8
   8df00:	df000115 	stw	fp,4(sp)
   8df04:	df000104 	addi	fp,sp,4
   8df08:	e13fff15 	stw	r4,-4(fp)
}
   8df0c:	e037883a 	mov	sp,fp
   8df10:	df000017 	ldw	fp,0(sp)
   8df14:	dec00104 	addi	sp,sp,4
   8df18:	f800283a 	ret

0008df1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8df1c:	defffe04 	addi	sp,sp,-8
   8df20:	dfc00115 	stw	ra,4(sp)
   8df24:	df000015 	stw	fp,0(sp)
   8df28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8df2c:	00800274 	movhi	r2,9
   8df30:	108b5104 	addi	r2,r2,11588
   8df34:	10800017 	ldw	r2,0(r2)
   8df38:	10000526 	beq	r2,zero,8df50 <alt_get_errno+0x34>
   8df3c:	00800274 	movhi	r2,9
   8df40:	108b5104 	addi	r2,r2,11588
   8df44:	10800017 	ldw	r2,0(r2)
   8df48:	103ee83a 	callr	r2
   8df4c:	00000206 	br	8df58 <alt_get_errno+0x3c>
   8df50:	00800274 	movhi	r2,9
   8df54:	10923704 	addi	r2,r2,18652
}
   8df58:	e037883a 	mov	sp,fp
   8df5c:	dfc00117 	ldw	ra,4(sp)
   8df60:	df000017 	ldw	fp,0(sp)
   8df64:	dec00204 	addi	sp,sp,8
   8df68:	f800283a 	ret

0008df6c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8df6c:	defff904 	addi	sp,sp,-28
   8df70:	dfc00615 	stw	ra,24(sp)
   8df74:	df000515 	stw	fp,20(sp)
   8df78:	df000504 	addi	fp,sp,20
   8df7c:	e13ffd15 	stw	r4,-12(fp)
   8df80:	e17ffe15 	stw	r5,-8(fp)
   8df84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8df88:	e0bffd17 	ldw	r2,-12(fp)
   8df8c:	10000816 	blt	r2,zero,8dfb0 <read+0x44>
   8df90:	e13ffd17 	ldw	r4,-12(fp)
   8df94:	01400304 	movi	r5,12
   8df98:	008b0d80 	call	8b0d8 <__mulsi3>
   8df9c:	1007883a 	mov	r3,r2
   8dfa0:	00800274 	movhi	r2,9
   8dfa4:	1086b404 	addi	r2,r2,6864
   8dfa8:	1885883a 	add	r2,r3,r2
   8dfac:	00000106 	br	8dfb4 <read+0x48>
   8dfb0:	0005883a 	mov	r2,zero
   8dfb4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8dfb8:	e0bffb17 	ldw	r2,-20(fp)
   8dfbc:	10002226 	beq	r2,zero,8e048 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8dfc0:	e0bffb17 	ldw	r2,-20(fp)
   8dfc4:	10800217 	ldw	r2,8(r2)
   8dfc8:	108000cc 	andi	r2,r2,3
   8dfcc:	10800060 	cmpeqi	r2,r2,1
   8dfd0:	1000181e 	bne	r2,zero,8e034 <read+0xc8>
        (fd->dev->read))
   8dfd4:	e0bffb17 	ldw	r2,-20(fp)
   8dfd8:	10800017 	ldw	r2,0(r2)
   8dfdc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8dfe0:	10001426 	beq	r2,zero,8e034 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8dfe4:	e0bffb17 	ldw	r2,-20(fp)
   8dfe8:	10800017 	ldw	r2,0(r2)
   8dfec:	10800517 	ldw	r2,20(r2)
   8dff0:	e0ffff17 	ldw	r3,-4(fp)
   8dff4:	e13ffb17 	ldw	r4,-20(fp)
   8dff8:	e17ffe17 	ldw	r5,-8(fp)
   8dffc:	180d883a 	mov	r6,r3
   8e000:	103ee83a 	callr	r2
   8e004:	e0bffc15 	stw	r2,-16(fp)
   8e008:	e0bffc17 	ldw	r2,-16(fp)
   8e00c:	1000070e 	bge	r2,zero,8e02c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   8e010:	008df1c0 	call	8df1c <alt_get_errno>
   8e014:	1007883a 	mov	r3,r2
   8e018:	e0bffc17 	ldw	r2,-16(fp)
   8e01c:	0085c83a 	sub	r2,zero,r2
   8e020:	18800015 	stw	r2,0(r3)
          return -1;
   8e024:	00bfffc4 	movi	r2,-1
   8e028:	00000c06 	br	8e05c <read+0xf0>
        }
        return rval;
   8e02c:	e0bffc17 	ldw	r2,-16(fp)
   8e030:	00000a06 	br	8e05c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8e034:	008df1c0 	call	8df1c <alt_get_errno>
   8e038:	1007883a 	mov	r3,r2
   8e03c:	00800344 	movi	r2,13
   8e040:	18800015 	stw	r2,0(r3)
   8e044:	00000406 	br	8e058 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8e048:	008df1c0 	call	8df1c <alt_get_errno>
   8e04c:	1007883a 	mov	r3,r2
   8e050:	00801444 	movi	r2,81
   8e054:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e058:	00bfffc4 	movi	r2,-1
}
   8e05c:	e037883a 	mov	sp,fp
   8e060:	dfc00117 	ldw	ra,4(sp)
   8e064:	df000017 	ldw	fp,0(sp)
   8e068:	dec00204 	addi	sp,sp,8
   8e06c:	f800283a 	ret

0008e070 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8e070:	defffc04 	addi	sp,sp,-16
   8e074:	dfc00315 	stw	ra,12(sp)
   8e078:	df000215 	stw	fp,8(sp)
   8e07c:	dc000115 	stw	r16,4(sp)
   8e080:	df000204 	addi	fp,sp,8
   8e084:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   8e088:	e0bffe17 	ldw	r2,-8(fp)
   8e08c:	108000d0 	cmplti	r2,r2,3
   8e090:	1000111e 	bne	r2,zero,8e0d8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   8e094:	04000274 	movhi	r16,9
   8e098:	8406b404 	addi	r16,r16,6864
   8e09c:	e0bffe17 	ldw	r2,-8(fp)
   8e0a0:	1009883a 	mov	r4,r2
   8e0a4:	01400304 	movi	r5,12
   8e0a8:	008b0d80 	call	8b0d8 <__mulsi3>
   8e0ac:	10800204 	addi	r2,r2,8
   8e0b0:	8085883a 	add	r2,r16,r2
   8e0b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8e0b8:	04000274 	movhi	r16,9
   8e0bc:	8406b404 	addi	r16,r16,6864
   8e0c0:	e0bffe17 	ldw	r2,-8(fp)
   8e0c4:	1009883a 	mov	r4,r2
   8e0c8:	01400304 	movi	r5,12
   8e0cc:	008b0d80 	call	8b0d8 <__mulsi3>
   8e0d0:	8085883a 	add	r2,r16,r2
   8e0d4:	10000015 	stw	zero,0(r2)
  }
}
   8e0d8:	e6ffff04 	addi	sp,fp,-4
   8e0dc:	dfc00217 	ldw	ra,8(sp)
   8e0e0:	df000117 	ldw	fp,4(sp)
   8e0e4:	dc000017 	ldw	r16,0(sp)
   8e0e8:	dec00304 	addi	sp,sp,12
   8e0ec:	f800283a 	ret

0008e0f0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8e0f0:	defff904 	addi	sp,sp,-28
   8e0f4:	df000615 	stw	fp,24(sp)
   8e0f8:	df000604 	addi	fp,sp,24
   8e0fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e100:	0005303a 	rdctl	r2,status
   8e104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e108:	e0fffc17 	ldw	r3,-16(fp)
   8e10c:	00bfff84 	movi	r2,-2
   8e110:	1884703a 	and	r2,r3,r2
   8e114:	1001703a 	wrctl	status,r2
  
  return context;
   8e118:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8e11c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8e120:	d0a00e17 	ldw	r2,-32712(gp)
   8e124:	10c000c4 	addi	r3,r2,3
   8e128:	00bfff04 	movi	r2,-4
   8e12c:	1884703a 	and	r2,r3,r2
   8e130:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8e134:	d0e00e17 	ldw	r3,-32712(gp)
   8e138:	e0bfff17 	ldw	r2,-4(fp)
   8e13c:	1887883a 	add	r3,r3,r2
   8e140:	00800374 	movhi	r2,13
   8e144:	10a4f804 	addi	r2,r2,-27680
   8e148:	10c0062e 	bgeu	r2,r3,8e164 <sbrk+0x74>
   8e14c:	e0bffa17 	ldw	r2,-24(fp)
   8e150:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e154:	e0bffd17 	ldw	r2,-12(fp)
   8e158:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8e15c:	00bfffc4 	movi	r2,-1
   8e160:	00000b06 	br	8e190 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8e164:	d0a00e17 	ldw	r2,-32712(gp)
   8e168:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   8e16c:	d0e00e17 	ldw	r3,-32712(gp)
   8e170:	e0bfff17 	ldw	r2,-4(fp)
   8e174:	1885883a 	add	r2,r3,r2
   8e178:	d0a00e15 	stw	r2,-32712(gp)
   8e17c:	e0bffa17 	ldw	r2,-24(fp)
   8e180:	e0bffe15 	stw	r2,-8(fp)
   8e184:	e0bffe17 	ldw	r2,-8(fp)
   8e188:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8e18c:	e0bffb17 	ldw	r2,-20(fp)
} 
   8e190:	e037883a 	mov	sp,fp
   8e194:	df000017 	ldw	fp,0(sp)
   8e198:	dec00104 	addi	sp,sp,4
   8e19c:	f800283a 	ret

0008e1a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e1a0:	defffe04 	addi	sp,sp,-8
   8e1a4:	dfc00115 	stw	ra,4(sp)
   8e1a8:	df000015 	stw	fp,0(sp)
   8e1ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e1b0:	00800274 	movhi	r2,9
   8e1b4:	108b5104 	addi	r2,r2,11588
   8e1b8:	10800017 	ldw	r2,0(r2)
   8e1bc:	10000526 	beq	r2,zero,8e1d4 <alt_get_errno+0x34>
   8e1c0:	00800274 	movhi	r2,9
   8e1c4:	108b5104 	addi	r2,r2,11588
   8e1c8:	10800017 	ldw	r2,0(r2)
   8e1cc:	103ee83a 	callr	r2
   8e1d0:	00000206 	br	8e1dc <alt_get_errno+0x3c>
   8e1d4:	00800274 	movhi	r2,9
   8e1d8:	10923704 	addi	r2,r2,18652
}
   8e1dc:	e037883a 	mov	sp,fp
   8e1e0:	dfc00117 	ldw	ra,4(sp)
   8e1e4:	df000017 	ldw	fp,0(sp)
   8e1e8:	dec00204 	addi	sp,sp,8
   8e1ec:	f800283a 	ret

0008e1f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8e1f0:	defff904 	addi	sp,sp,-28
   8e1f4:	dfc00615 	stw	ra,24(sp)
   8e1f8:	df000515 	stw	fp,20(sp)
   8e1fc:	df000504 	addi	fp,sp,20
   8e200:	e13ffd15 	stw	r4,-12(fp)
   8e204:	e17ffe15 	stw	r5,-8(fp)
   8e208:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e20c:	e0bffd17 	ldw	r2,-12(fp)
   8e210:	10000816 	blt	r2,zero,8e234 <write+0x44>
   8e214:	e13ffd17 	ldw	r4,-12(fp)
   8e218:	01400304 	movi	r5,12
   8e21c:	008b0d80 	call	8b0d8 <__mulsi3>
   8e220:	1007883a 	mov	r3,r2
   8e224:	00800274 	movhi	r2,9
   8e228:	1086b404 	addi	r2,r2,6864
   8e22c:	1885883a 	add	r2,r3,r2
   8e230:	00000106 	br	8e238 <write+0x48>
   8e234:	0005883a 	mov	r2,zero
   8e238:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8e23c:	e0bffb17 	ldw	r2,-20(fp)
   8e240:	10002126 	beq	r2,zero,8e2c8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8e244:	e0bffb17 	ldw	r2,-20(fp)
   8e248:	10800217 	ldw	r2,8(r2)
   8e24c:	108000cc 	andi	r2,r2,3
   8e250:	10001826 	beq	r2,zero,8e2b4 <write+0xc4>
   8e254:	e0bffb17 	ldw	r2,-20(fp)
   8e258:	10800017 	ldw	r2,0(r2)
   8e25c:	10800617 	ldw	r2,24(r2)
   8e260:	10001426 	beq	r2,zero,8e2b4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8e264:	e0bffb17 	ldw	r2,-20(fp)
   8e268:	10800017 	ldw	r2,0(r2)
   8e26c:	10800617 	ldw	r2,24(r2)
   8e270:	e0ffff17 	ldw	r3,-4(fp)
   8e274:	e13ffb17 	ldw	r4,-20(fp)
   8e278:	e17ffe17 	ldw	r5,-8(fp)
   8e27c:	180d883a 	mov	r6,r3
   8e280:	103ee83a 	callr	r2
   8e284:	e0bffc15 	stw	r2,-16(fp)
   8e288:	e0bffc17 	ldw	r2,-16(fp)
   8e28c:	1000070e 	bge	r2,zero,8e2ac <write+0xbc>
      {
        ALT_ERRNO = -rval;
   8e290:	008e1a00 	call	8e1a0 <alt_get_errno>
   8e294:	1007883a 	mov	r3,r2
   8e298:	e0bffc17 	ldw	r2,-16(fp)
   8e29c:	0085c83a 	sub	r2,zero,r2
   8e2a0:	18800015 	stw	r2,0(r3)
        return -1;
   8e2a4:	00bfffc4 	movi	r2,-1
   8e2a8:	00000c06 	br	8e2dc <write+0xec>
      }
      return rval;
   8e2ac:	e0bffc17 	ldw	r2,-16(fp)
   8e2b0:	00000a06 	br	8e2dc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8e2b4:	008e1a00 	call	8e1a0 <alt_get_errno>
   8e2b8:	1007883a 	mov	r3,r2
   8e2bc:	00800344 	movi	r2,13
   8e2c0:	18800015 	stw	r2,0(r3)
   8e2c4:	00000406 	br	8e2d8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8e2c8:	008e1a00 	call	8e1a0 <alt_get_errno>
   8e2cc:	1007883a 	mov	r3,r2
   8e2d0:	00801444 	movi	r2,81
   8e2d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e2d8:	00bfffc4 	movi	r2,-1
}
   8e2dc:	e037883a 	mov	sp,fp
   8e2e0:	dfc00117 	ldw	ra,4(sp)
   8e2e4:	df000017 	ldw	fp,0(sp)
   8e2e8:	dec00204 	addi	sp,sp,8
   8e2ec:	f800283a 	ret

0008e2f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8e2f0:	defffd04 	addi	sp,sp,-12
   8e2f4:	dfc00215 	stw	ra,8(sp)
   8e2f8:	df000115 	stw	fp,4(sp)
   8e2fc:	df000104 	addi	fp,sp,4
   8e300:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8e304:	e13fff17 	ldw	r4,-4(fp)
   8e308:	01400274 	movhi	r5,9
   8e30c:	294b4e04 	addi	r5,r5,11576
   8e310:	008fe480 	call	8fe48 <alt_dev_llist_insert>
}
   8e314:	e037883a 	mov	sp,fp
   8e318:	dfc00117 	ldw	ra,4(sp)
   8e31c:	df000017 	ldw	fp,0(sp)
   8e320:	dec00204 	addi	sp,sp,8
   8e324:	f800283a 	ret

0008e328 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8e328:	defffd04 	addi	sp,sp,-12
   8e32c:	dfc00215 	stw	ra,8(sp)
   8e330:	df000115 	stw	fp,4(sp)
   8e334:	df000104 	addi	fp,sp,4
   8e338:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   8e33c:	00907980 	call	90798 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8e340:	00800044 	movi	r2,1
   8e344:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8e348:	e037883a 	mov	sp,fp
   8e34c:	dfc00117 	ldw	ra,4(sp)
   8e350:	df000017 	ldw	fp,0(sp)
   8e354:	dec00204 	addi	sp,sp,8
   8e358:	f800283a 	ret

0008e35c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8e35c:	defffe04 	addi	sp,sp,-8
   8e360:	dfc00115 	stw	ra,4(sp)
   8e364:	df000015 	stw	fp,0(sp)
   8e368:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8e36c:	01000274 	movhi	r4,9
   8e370:	21071e04 	addi	r4,r4,7288
   8e374:	000b883a 	mov	r5,zero
   8e378:	01800044 	movi	r6,1
   8e37c:	008e5200 	call	8e520 <altera_avalon_jtag_uart_init>
   8e380:	01000274 	movhi	r4,9
   8e384:	21071404 	addi	r4,r4,7248
   8e388:	008e2f00 	call	8e2f0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   8e38c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_CONFIG, audio_config);
   8e390:	01000274 	movhi	r4,9
   8e394:	210b2c04 	addi	r4,r4,11440
   8e398:	008e2f00 	call	8e2f0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_CODEC, audio_codec);
   8e39c:	01000274 	movhi	r4,9
   8e3a0:	210b3804 	addi	r4,r4,11488
   8e3a4:	008e2f00 	call	8e2f0 <alt_dev_reg>
}
   8e3a8:	e037883a 	mov	sp,fp
   8e3ac:	dfc00117 	ldw	ra,4(sp)
   8e3b0:	df000017 	ldw	fp,0(sp)
   8e3b4:	dec00204 	addi	sp,sp,8
   8e3b8:	f800283a 	ret

0008e3bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8e3bc:	defffa04 	addi	sp,sp,-24
   8e3c0:	dfc00515 	stw	ra,20(sp)
   8e3c4:	df000415 	stw	fp,16(sp)
   8e3c8:	df000404 	addi	fp,sp,16
   8e3cc:	e13ffd15 	stw	r4,-12(fp)
   8e3d0:	e17ffe15 	stw	r5,-8(fp)
   8e3d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8e3d8:	e0bffd17 	ldw	r2,-12(fp)
   8e3dc:	10800017 	ldw	r2,0(r2)
   8e3e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8e3e4:	e0bffc17 	ldw	r2,-16(fp)
   8e3e8:	10c00a04 	addi	r3,r2,40
   8e3ec:	e0bffd17 	ldw	r2,-12(fp)
   8e3f0:	10800217 	ldw	r2,8(r2)
   8e3f4:	1809883a 	mov	r4,r3
   8e3f8:	e17ffe17 	ldw	r5,-8(fp)
   8e3fc:	e1bfff17 	ldw	r6,-4(fp)
   8e400:	100f883a 	mov	r7,r2
   8e404:	008e9dc0 	call	8e9dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8e408:	e037883a 	mov	sp,fp
   8e40c:	dfc00117 	ldw	ra,4(sp)
   8e410:	df000017 	ldw	fp,0(sp)
   8e414:	dec00204 	addi	sp,sp,8
   8e418:	f800283a 	ret

0008e41c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8e41c:	defffa04 	addi	sp,sp,-24
   8e420:	dfc00515 	stw	ra,20(sp)
   8e424:	df000415 	stw	fp,16(sp)
   8e428:	df000404 	addi	fp,sp,16
   8e42c:	e13ffd15 	stw	r4,-12(fp)
   8e430:	e17ffe15 	stw	r5,-8(fp)
   8e434:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8e438:	e0bffd17 	ldw	r2,-12(fp)
   8e43c:	10800017 	ldw	r2,0(r2)
   8e440:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8e444:	e0bffc17 	ldw	r2,-16(fp)
   8e448:	10c00a04 	addi	r3,r2,40
   8e44c:	e0bffd17 	ldw	r2,-12(fp)
   8e450:	10800217 	ldw	r2,8(r2)
   8e454:	1809883a 	mov	r4,r3
   8e458:	e17ffe17 	ldw	r5,-8(fp)
   8e45c:	e1bfff17 	ldw	r6,-4(fp)
   8e460:	100f883a 	mov	r7,r2
   8e464:	008ebe80 	call	8ebe8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8e468:	e037883a 	mov	sp,fp
   8e46c:	dfc00117 	ldw	ra,4(sp)
   8e470:	df000017 	ldw	fp,0(sp)
   8e474:	dec00204 	addi	sp,sp,8
   8e478:	f800283a 	ret

0008e47c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8e47c:	defffc04 	addi	sp,sp,-16
   8e480:	dfc00315 	stw	ra,12(sp)
   8e484:	df000215 	stw	fp,8(sp)
   8e488:	df000204 	addi	fp,sp,8
   8e48c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8e490:	e0bfff17 	ldw	r2,-4(fp)
   8e494:	10800017 	ldw	r2,0(r2)
   8e498:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8e49c:	e0bffe17 	ldw	r2,-8(fp)
   8e4a0:	10c00a04 	addi	r3,r2,40
   8e4a4:	e0bfff17 	ldw	r2,-4(fp)
   8e4a8:	10800217 	ldw	r2,8(r2)
   8e4ac:	1809883a 	mov	r4,r3
   8e4b0:	100b883a 	mov	r5,r2
   8e4b4:	008e8880 	call	8e888 <altera_avalon_jtag_uart_close>
}
   8e4b8:	e037883a 	mov	sp,fp
   8e4bc:	dfc00117 	ldw	ra,4(sp)
   8e4c0:	df000017 	ldw	fp,0(sp)
   8e4c4:	dec00204 	addi	sp,sp,8
   8e4c8:	f800283a 	ret

0008e4cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8e4cc:	defffa04 	addi	sp,sp,-24
   8e4d0:	dfc00515 	stw	ra,20(sp)
   8e4d4:	df000415 	stw	fp,16(sp)
   8e4d8:	df000404 	addi	fp,sp,16
   8e4dc:	e13ffd15 	stw	r4,-12(fp)
   8e4e0:	e17ffe15 	stw	r5,-8(fp)
   8e4e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8e4e8:	e0bffd17 	ldw	r2,-12(fp)
   8e4ec:	10800017 	ldw	r2,0(r2)
   8e4f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8e4f4:	e0bffc17 	ldw	r2,-16(fp)
   8e4f8:	10800a04 	addi	r2,r2,40
   8e4fc:	1009883a 	mov	r4,r2
   8e500:	e17ffe17 	ldw	r5,-8(fp)
   8e504:	e1bfff17 	ldw	r6,-4(fp)
   8e508:	008e8f00 	call	8e8f0 <altera_avalon_jtag_uart_ioctl>
}
   8e50c:	e037883a 	mov	sp,fp
   8e510:	dfc00117 	ldw	ra,4(sp)
   8e514:	df000017 	ldw	fp,0(sp)
   8e518:	dec00204 	addi	sp,sp,8
   8e51c:	f800283a 	ret

0008e520 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8e520:	defffb04 	addi	sp,sp,-20
   8e524:	dfc00415 	stw	ra,16(sp)
   8e528:	df000315 	stw	fp,12(sp)
   8e52c:	df000304 	addi	fp,sp,12
   8e530:	e13ffd15 	stw	r4,-12(fp)
   8e534:	e17ffe15 	stw	r5,-8(fp)
   8e538:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8e53c:	e0bffd17 	ldw	r2,-12(fp)
   8e540:	00c00044 	movi	r3,1
   8e544:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8e548:	e0bffd17 	ldw	r2,-12(fp)
   8e54c:	10800017 	ldw	r2,0(r2)
   8e550:	10800104 	addi	r2,r2,4
   8e554:	1007883a 	mov	r3,r2
   8e558:	e0bffd17 	ldw	r2,-12(fp)
   8e55c:	10800817 	ldw	r2,32(r2)
   8e560:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   8e564:	e0bfff17 	ldw	r2,-4(fp)
   8e568:	1009883a 	mov	r4,r2
   8e56c:	e17ffd17 	ldw	r5,-12(fp)
   8e570:	01800274 	movhi	r6,9
   8e574:	31b97604 	addi	r6,r6,-6696
   8e578:	00901a80 	call	901a8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8e57c:	e0bffd17 	ldw	r2,-12(fp)
   8e580:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8e584:	e0bffd17 	ldw	r2,-12(fp)
   8e588:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8e58c:	00800274 	movhi	r2,9
   8e590:	10923c04 	addi	r2,r2,18672
   8e594:	10800017 	ldw	r2,0(r2)
   8e598:	1809883a 	mov	r4,r3
   8e59c:	100b883a 	mov	r5,r2
   8e5a0:	01800274 	movhi	r6,9
   8e5a4:	31b9f804 	addi	r6,r6,-6176
   8e5a8:	e1fffd17 	ldw	r7,-12(fp)
   8e5ac:	008fc9c0 	call	8fc9c <alt_alarm_start>
   8e5b0:	1000040e 	bge	r2,zero,8e5c4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8e5b4:	e0fffd17 	ldw	r3,-12(fp)
   8e5b8:	00a00034 	movhi	r2,32768
   8e5bc:	10bfffc4 	addi	r2,r2,-1
   8e5c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8e5c4:	e037883a 	mov	sp,fp
   8e5c8:	dfc00117 	ldw	ra,4(sp)
   8e5cc:	df000017 	ldw	fp,0(sp)
   8e5d0:	dec00204 	addi	sp,sp,8
   8e5d4:	f800283a 	ret

0008e5d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8e5d8:	defff704 	addi	sp,sp,-36
   8e5dc:	df000815 	stw	fp,32(sp)
   8e5e0:	df000804 	addi	fp,sp,32
   8e5e4:	e13ffe15 	stw	r4,-8(fp)
   8e5e8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8e5ec:	e0bffe17 	ldw	r2,-8(fp)
   8e5f0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   8e5f4:	e0bffa17 	ldw	r2,-24(fp)
   8e5f8:	10800017 	ldw	r2,0(r2)
   8e5fc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8e600:	e0bffb17 	ldw	r2,-20(fp)
   8e604:	10800104 	addi	r2,r2,4
   8e608:	10800037 	ldwio	r2,0(r2)
   8e60c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8e610:	e0bffc17 	ldw	r2,-16(fp)
   8e614:	1080c00c 	andi	r2,r2,768
   8e618:	1000011e 	bne	r2,zero,8e620 <altera_avalon_jtag_uart_irq+0x48>
      break;
   8e61c:	00006c06 	br	8e7d0 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8e620:	e0bffc17 	ldw	r2,-16(fp)
   8e624:	1080400c 	andi	r2,r2,256
   8e628:	10003426 	beq	r2,zero,8e6fc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8e62c:	00800074 	movhi	r2,1
   8e630:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8e634:	e0bffa17 	ldw	r2,-24(fp)
   8e638:	10800a17 	ldw	r2,40(r2)
   8e63c:	10800044 	addi	r2,r2,1
   8e640:	1081ffcc 	andi	r2,r2,2047
   8e644:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   8e648:	e0bffa17 	ldw	r2,-24(fp)
   8e64c:	10c00b17 	ldw	r3,44(r2)
   8e650:	e0bffd17 	ldw	r2,-12(fp)
   8e654:	1880011e 	bne	r3,r2,8e65c <altera_avalon_jtag_uart_irq+0x84>
          break;
   8e658:	00001606 	br	8e6b4 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8e65c:	e0bffb17 	ldw	r2,-20(fp)
   8e660:	10800037 	ldwio	r2,0(r2)
   8e664:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8e668:	e0bff817 	ldw	r2,-32(fp)
   8e66c:	10a0000c 	andi	r2,r2,32768
   8e670:	1000011e 	bne	r2,zero,8e678 <altera_avalon_jtag_uart_irq+0xa0>
          break;
   8e674:	00000f06 	br	8e6b4 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8e678:	e0bffa17 	ldw	r2,-24(fp)
   8e67c:	10800a17 	ldw	r2,40(r2)
   8e680:	e0fff817 	ldw	r3,-32(fp)
   8e684:	1809883a 	mov	r4,r3
   8e688:	e0fffa17 	ldw	r3,-24(fp)
   8e68c:	1885883a 	add	r2,r3,r2
   8e690:	10800e04 	addi	r2,r2,56
   8e694:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8e698:	e0bffa17 	ldw	r2,-24(fp)
   8e69c:	10800a17 	ldw	r2,40(r2)
   8e6a0:	10800044 	addi	r2,r2,1
   8e6a4:	10c1ffcc 	andi	r3,r2,2047
   8e6a8:	e0bffa17 	ldw	r2,-24(fp)
   8e6ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8e6b0:	003fe006 	br	8e634 <__alt_data_end+0xfffc5254>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8e6b4:	e0bff817 	ldw	r2,-32(fp)
   8e6b8:	10bfffec 	andhi	r2,r2,65535
   8e6bc:	10000f26 	beq	r2,zero,8e6fc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8e6c0:	e0bffa17 	ldw	r2,-24(fp)
   8e6c4:	10c00817 	ldw	r3,32(r2)
   8e6c8:	00bfff84 	movi	r2,-2
   8e6cc:	1886703a 	and	r3,r3,r2
   8e6d0:	e0bffa17 	ldw	r2,-24(fp)
   8e6d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8e6d8:	e0bffb17 	ldw	r2,-20(fp)
   8e6dc:	10800104 	addi	r2,r2,4
   8e6e0:	1007883a 	mov	r3,r2
   8e6e4:	e0bffa17 	ldw	r2,-24(fp)
   8e6e8:	10800817 	ldw	r2,32(r2)
   8e6ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8e6f0:	e0bffb17 	ldw	r2,-20(fp)
   8e6f4:	10800104 	addi	r2,r2,4
   8e6f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8e6fc:	e0bffc17 	ldw	r2,-16(fp)
   8e700:	1080800c 	andi	r2,r2,512
   8e704:	10003126 	beq	r2,zero,8e7cc <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8e708:	e0bffc17 	ldw	r2,-16(fp)
   8e70c:	1004d43a 	srli	r2,r2,16
   8e710:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8e714:	00001406 	br	8e768 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8e718:	e0bffb17 	ldw	r2,-20(fp)
   8e71c:	e0fffa17 	ldw	r3,-24(fp)
   8e720:	18c00d17 	ldw	r3,52(r3)
   8e724:	e13ffa17 	ldw	r4,-24(fp)
   8e728:	20c7883a 	add	r3,r4,r3
   8e72c:	18c20e04 	addi	r3,r3,2104
   8e730:	18c00003 	ldbu	r3,0(r3)
   8e734:	18c03fcc 	andi	r3,r3,255
   8e738:	18c0201c 	xori	r3,r3,128
   8e73c:	18ffe004 	addi	r3,r3,-128
   8e740:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8e744:	e0bffa17 	ldw	r2,-24(fp)
   8e748:	10800d17 	ldw	r2,52(r2)
   8e74c:	10800044 	addi	r2,r2,1
   8e750:	10c1ffcc 	andi	r3,r2,2047
   8e754:	e0bffa17 	ldw	r2,-24(fp)
   8e758:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8e75c:	e0bff917 	ldw	r2,-28(fp)
   8e760:	10bfffc4 	addi	r2,r2,-1
   8e764:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8e768:	e0bff917 	ldw	r2,-28(fp)
   8e76c:	10000526 	beq	r2,zero,8e784 <altera_avalon_jtag_uart_irq+0x1ac>
   8e770:	e0bffa17 	ldw	r2,-24(fp)
   8e774:	10c00d17 	ldw	r3,52(r2)
   8e778:	e0bffa17 	ldw	r2,-24(fp)
   8e77c:	10800c17 	ldw	r2,48(r2)
   8e780:	18bfe51e 	bne	r3,r2,8e718 <__alt_data_end+0xfffc5338>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8e784:	e0bff917 	ldw	r2,-28(fp)
   8e788:	10001026 	beq	r2,zero,8e7cc <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8e78c:	e0bffa17 	ldw	r2,-24(fp)
   8e790:	10c00817 	ldw	r3,32(r2)
   8e794:	00bfff44 	movi	r2,-3
   8e798:	1886703a 	and	r3,r3,r2
   8e79c:	e0bffa17 	ldw	r2,-24(fp)
   8e7a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8e7a4:	e0bffa17 	ldw	r2,-24(fp)
   8e7a8:	10800017 	ldw	r2,0(r2)
   8e7ac:	10800104 	addi	r2,r2,4
   8e7b0:	1007883a 	mov	r3,r2
   8e7b4:	e0bffa17 	ldw	r2,-24(fp)
   8e7b8:	10800817 	ldw	r2,32(r2)
   8e7bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8e7c0:	e0bffb17 	ldw	r2,-20(fp)
   8e7c4:	10800104 	addi	r2,r2,4
   8e7c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8e7cc:	003f8c06 	br	8e600 <__alt_data_end+0xfffc5220>
}
   8e7d0:	e037883a 	mov	sp,fp
   8e7d4:	df000017 	ldw	fp,0(sp)
   8e7d8:	dec00104 	addi	sp,sp,4
   8e7dc:	f800283a 	ret

0008e7e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8e7e0:	defff804 	addi	sp,sp,-32
   8e7e4:	df000715 	stw	fp,28(sp)
   8e7e8:	df000704 	addi	fp,sp,28
   8e7ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8e7f0:	e0bffb17 	ldw	r2,-20(fp)
   8e7f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8e7f8:	e0bff917 	ldw	r2,-28(fp)
   8e7fc:	10800017 	ldw	r2,0(r2)
   8e800:	10800104 	addi	r2,r2,4
   8e804:	10800037 	ldwio	r2,0(r2)
   8e808:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8e80c:	e0bffa17 	ldw	r2,-24(fp)
   8e810:	1081000c 	andi	r2,r2,1024
   8e814:	10000b26 	beq	r2,zero,8e844 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8e818:	e0bff917 	ldw	r2,-28(fp)
   8e81c:	10800017 	ldw	r2,0(r2)
   8e820:	10800104 	addi	r2,r2,4
   8e824:	1007883a 	mov	r3,r2
   8e828:	e0bff917 	ldw	r2,-28(fp)
   8e82c:	10800817 	ldw	r2,32(r2)
   8e830:	10810014 	ori	r2,r2,1024
   8e834:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8e838:	e0bff917 	ldw	r2,-28(fp)
   8e83c:	10000915 	stw	zero,36(r2)
   8e840:	00000a06 	br	8e86c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8e844:	e0bff917 	ldw	r2,-28(fp)
   8e848:	10c00917 	ldw	r3,36(r2)
   8e84c:	00a00034 	movhi	r2,32768
   8e850:	10bfff04 	addi	r2,r2,-4
   8e854:	10c00536 	bltu	r2,r3,8e86c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8e858:	e0bff917 	ldw	r2,-28(fp)
   8e85c:	10800917 	ldw	r2,36(r2)
   8e860:	10c00044 	addi	r3,r2,1
   8e864:	e0bff917 	ldw	r2,-28(fp)
   8e868:	10c00915 	stw	r3,36(r2)
   8e86c:	00800274 	movhi	r2,9
   8e870:	10923c04 	addi	r2,r2,18672
   8e874:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8e878:	e037883a 	mov	sp,fp
   8e87c:	df000017 	ldw	fp,0(sp)
   8e880:	dec00104 	addi	sp,sp,4
   8e884:	f800283a 	ret

0008e888 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8e888:	defffd04 	addi	sp,sp,-12
   8e88c:	df000215 	stw	fp,8(sp)
   8e890:	df000204 	addi	fp,sp,8
   8e894:	e13ffe15 	stw	r4,-8(fp)
   8e898:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8e89c:	00000506 	br	8e8b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8e8a0:	e0bfff17 	ldw	r2,-4(fp)
   8e8a4:	1090000c 	andi	r2,r2,16384
   8e8a8:	10000226 	beq	r2,zero,8e8b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8e8ac:	00bffd44 	movi	r2,-11
   8e8b0:	00000b06 	br	8e8e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8e8b4:	e0bffe17 	ldw	r2,-8(fp)
   8e8b8:	10c00d17 	ldw	r3,52(r2)
   8e8bc:	e0bffe17 	ldw	r2,-8(fp)
   8e8c0:	10800c17 	ldw	r2,48(r2)
   8e8c4:	18800526 	beq	r3,r2,8e8dc <altera_avalon_jtag_uart_close+0x54>
   8e8c8:	e0bffe17 	ldw	r2,-8(fp)
   8e8cc:	10c00917 	ldw	r3,36(r2)
   8e8d0:	e0bffe17 	ldw	r2,-8(fp)
   8e8d4:	10800117 	ldw	r2,4(r2)
   8e8d8:	18bff136 	bltu	r3,r2,8e8a0 <__alt_data_end+0xfffc54c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8e8dc:	0005883a 	mov	r2,zero
}
   8e8e0:	e037883a 	mov	sp,fp
   8e8e4:	df000017 	ldw	fp,0(sp)
   8e8e8:	dec00104 	addi	sp,sp,4
   8e8ec:	f800283a 	ret

0008e8f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8e8f0:	defffa04 	addi	sp,sp,-24
   8e8f4:	df000515 	stw	fp,20(sp)
   8e8f8:	df000504 	addi	fp,sp,20
   8e8fc:	e13ffd15 	stw	r4,-12(fp)
   8e900:	e17ffe15 	stw	r5,-8(fp)
   8e904:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8e908:	00bff9c4 	movi	r2,-25
   8e90c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8e910:	e0bffe17 	ldw	r2,-8(fp)
   8e914:	10da8060 	cmpeqi	r3,r2,27137
   8e918:	1800031e 	bne	r3,zero,8e928 <altera_avalon_jtag_uart_ioctl+0x38>
   8e91c:	109a80a0 	cmpeqi	r2,r2,27138
   8e920:	1000191e 	bne	r2,zero,8e988 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   8e924:	00002806 	br	8e9c8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8e928:	e0bffd17 	ldw	r2,-12(fp)
   8e92c:	10c00117 	ldw	r3,4(r2)
   8e930:	00a00034 	movhi	r2,32768
   8e934:	10bfffc4 	addi	r2,r2,-1
   8e938:	18801226 	beq	r3,r2,8e984 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   8e93c:	e0bfff17 	ldw	r2,-4(fp)
   8e940:	10800017 	ldw	r2,0(r2)
   8e944:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8e948:	e0bffc17 	ldw	r2,-16(fp)
   8e94c:	10800090 	cmplti	r2,r2,2
   8e950:	1000061e 	bne	r2,zero,8e96c <altera_avalon_jtag_uart_ioctl+0x7c>
   8e954:	e0fffc17 	ldw	r3,-16(fp)
   8e958:	00a00034 	movhi	r2,32768
   8e95c:	10bfffc4 	addi	r2,r2,-1
   8e960:	18800226 	beq	r3,r2,8e96c <altera_avalon_jtag_uart_ioctl+0x7c>
   8e964:	e0bffc17 	ldw	r2,-16(fp)
   8e968:	00000206 	br	8e974 <altera_avalon_jtag_uart_ioctl+0x84>
   8e96c:	00a00034 	movhi	r2,32768
   8e970:	10bfff84 	addi	r2,r2,-2
   8e974:	e0fffd17 	ldw	r3,-12(fp)
   8e978:	18800115 	stw	r2,4(r3)
      rc = 0;
   8e97c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8e980:	00001106 	br	8e9c8 <altera_avalon_jtag_uart_ioctl+0xd8>
   8e984:	00001006 	br	8e9c8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8e988:	e0bffd17 	ldw	r2,-12(fp)
   8e98c:	10c00117 	ldw	r3,4(r2)
   8e990:	00a00034 	movhi	r2,32768
   8e994:	10bfffc4 	addi	r2,r2,-1
   8e998:	18800a26 	beq	r3,r2,8e9c4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8e99c:	e0bffd17 	ldw	r2,-12(fp)
   8e9a0:	10c00917 	ldw	r3,36(r2)
   8e9a4:	e0bffd17 	ldw	r2,-12(fp)
   8e9a8:	10800117 	ldw	r2,4(r2)
   8e9ac:	1885803a 	cmpltu	r2,r3,r2
   8e9b0:	10c03fcc 	andi	r3,r2,255
   8e9b4:	e0bfff17 	ldw	r2,-4(fp)
   8e9b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8e9bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8e9c0:	00000006 	br	8e9c4 <altera_avalon_jtag_uart_ioctl+0xd4>
   8e9c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8e9c8:	e0bffb17 	ldw	r2,-20(fp)
}
   8e9cc:	e037883a 	mov	sp,fp
   8e9d0:	df000017 	ldw	fp,0(sp)
   8e9d4:	dec00104 	addi	sp,sp,4
   8e9d8:	f800283a 	ret

0008e9dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8e9dc:	defff304 	addi	sp,sp,-52
   8e9e0:	dfc00c15 	stw	ra,48(sp)
   8e9e4:	df000b15 	stw	fp,44(sp)
   8e9e8:	df000b04 	addi	fp,sp,44
   8e9ec:	e13ffc15 	stw	r4,-16(fp)
   8e9f0:	e17ffd15 	stw	r5,-12(fp)
   8e9f4:	e1bffe15 	stw	r6,-8(fp)
   8e9f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8e9fc:	e0bffd17 	ldw	r2,-12(fp)
   8ea00:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8ea04:	00004906 	br	8eb2c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8ea08:	e0bffc17 	ldw	r2,-16(fp)
   8ea0c:	10800a17 	ldw	r2,40(r2)
   8ea10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8ea14:	e0bffc17 	ldw	r2,-16(fp)
   8ea18:	10800b17 	ldw	r2,44(r2)
   8ea1c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8ea20:	e0fff717 	ldw	r3,-36(fp)
   8ea24:	e0bff817 	ldw	r2,-32(fp)
   8ea28:	18800536 	bltu	r3,r2,8ea40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8ea2c:	e0fff717 	ldw	r3,-36(fp)
   8ea30:	e0bff817 	ldw	r2,-32(fp)
   8ea34:	1885c83a 	sub	r2,r3,r2
   8ea38:	e0bff615 	stw	r2,-40(fp)
   8ea3c:	00000406 	br	8ea50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8ea40:	00c20004 	movi	r3,2048
   8ea44:	e0bff817 	ldw	r2,-32(fp)
   8ea48:	1885c83a 	sub	r2,r3,r2
   8ea4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8ea50:	e0bff617 	ldw	r2,-40(fp)
   8ea54:	1000011e 	bne	r2,zero,8ea5c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   8ea58:	00001d06 	br	8ead0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   8ea5c:	e0fffe17 	ldw	r3,-8(fp)
   8ea60:	e0bff617 	ldw	r2,-40(fp)
   8ea64:	1880022e 	bgeu	r3,r2,8ea70 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8ea68:	e0bffe17 	ldw	r2,-8(fp)
   8ea6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8ea70:	e0bff817 	ldw	r2,-32(fp)
   8ea74:	10800e04 	addi	r2,r2,56
   8ea78:	e0fffc17 	ldw	r3,-16(fp)
   8ea7c:	1885883a 	add	r2,r3,r2
   8ea80:	e13ff517 	ldw	r4,-44(fp)
   8ea84:	100b883a 	mov	r5,r2
   8ea88:	e1bff617 	ldw	r6,-40(fp)
   8ea8c:	0086a680 	call	86a68 <memcpy>
      ptr   += n;
   8ea90:	e0fff517 	ldw	r3,-44(fp)
   8ea94:	e0bff617 	ldw	r2,-40(fp)
   8ea98:	1885883a 	add	r2,r3,r2
   8ea9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8eaa0:	e0fffe17 	ldw	r3,-8(fp)
   8eaa4:	e0bff617 	ldw	r2,-40(fp)
   8eaa8:	1885c83a 	sub	r2,r3,r2
   8eaac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eab0:	e0fff817 	ldw	r3,-32(fp)
   8eab4:	e0bff617 	ldw	r2,-40(fp)
   8eab8:	1885883a 	add	r2,r3,r2
   8eabc:	10c1ffcc 	andi	r3,r2,2047
   8eac0:	e0bffc17 	ldw	r2,-16(fp)
   8eac4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8eac8:	e0bffe17 	ldw	r2,-8(fp)
   8eacc:	00bfce16 	blt	zero,r2,8ea08 <__alt_data_end+0xfffc5628>

    /* If we read any data then return it */
    if (ptr != buffer)
   8ead0:	e0fff517 	ldw	r3,-44(fp)
   8ead4:	e0bffd17 	ldw	r2,-12(fp)
   8ead8:	18800126 	beq	r3,r2,8eae0 <altera_avalon_jtag_uart_read+0x104>
      break;
   8eadc:	00001506 	br	8eb34 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8eae0:	e0bfff17 	ldw	r2,-4(fp)
   8eae4:	1090000c 	andi	r2,r2,16384
   8eae8:	10000126 	beq	r2,zero,8eaf0 <altera_avalon_jtag_uart_read+0x114>
      break;
   8eaec:	00001106 	br	8eb34 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8eaf0:	0001883a 	nop
   8eaf4:	e0bffc17 	ldw	r2,-16(fp)
   8eaf8:	10c00a17 	ldw	r3,40(r2)
   8eafc:	e0bff717 	ldw	r2,-36(fp)
   8eb00:	1880051e 	bne	r3,r2,8eb18 <altera_avalon_jtag_uart_read+0x13c>
   8eb04:	e0bffc17 	ldw	r2,-16(fp)
   8eb08:	10c00917 	ldw	r3,36(r2)
   8eb0c:	e0bffc17 	ldw	r2,-16(fp)
   8eb10:	10800117 	ldw	r2,4(r2)
   8eb14:	18bff736 	bltu	r3,r2,8eaf4 <__alt_data_end+0xfffc5714>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8eb18:	e0bffc17 	ldw	r2,-16(fp)
   8eb1c:	10c00a17 	ldw	r3,40(r2)
   8eb20:	e0bff717 	ldw	r2,-36(fp)
   8eb24:	1880011e 	bne	r3,r2,8eb2c <altera_avalon_jtag_uart_read+0x150>
      break;
   8eb28:	00000206 	br	8eb34 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8eb2c:	e0bffe17 	ldw	r2,-8(fp)
   8eb30:	00bfb516 	blt	zero,r2,8ea08 <__alt_data_end+0xfffc5628>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8eb34:	e0fff517 	ldw	r3,-44(fp)
   8eb38:	e0bffd17 	ldw	r2,-12(fp)
   8eb3c:	18801826 	beq	r3,r2,8eba0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8eb40:	0005303a 	rdctl	r2,status
   8eb44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8eb48:	e0fffa17 	ldw	r3,-24(fp)
   8eb4c:	00bfff84 	movi	r2,-2
   8eb50:	1884703a 	and	r2,r3,r2
   8eb54:	1001703a 	wrctl	status,r2
  
  return context;
   8eb58:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8eb5c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8eb60:	e0bffc17 	ldw	r2,-16(fp)
   8eb64:	10800817 	ldw	r2,32(r2)
   8eb68:	10c00054 	ori	r3,r2,1
   8eb6c:	e0bffc17 	ldw	r2,-16(fp)
   8eb70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8eb74:	e0bffc17 	ldw	r2,-16(fp)
   8eb78:	10800017 	ldw	r2,0(r2)
   8eb7c:	10800104 	addi	r2,r2,4
   8eb80:	1007883a 	mov	r3,r2
   8eb84:	e0bffc17 	ldw	r2,-16(fp)
   8eb88:	10800817 	ldw	r2,32(r2)
   8eb8c:	18800035 	stwio	r2,0(r3)
   8eb90:	e0bff917 	ldw	r2,-28(fp)
   8eb94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8eb98:	e0bffb17 	ldw	r2,-20(fp)
   8eb9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8eba0:	e0fff517 	ldw	r3,-44(fp)
   8eba4:	e0bffd17 	ldw	r2,-12(fp)
   8eba8:	18800426 	beq	r3,r2,8ebbc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   8ebac:	e0fff517 	ldw	r3,-44(fp)
   8ebb0:	e0bffd17 	ldw	r2,-12(fp)
   8ebb4:	1885c83a 	sub	r2,r3,r2
   8ebb8:	00000606 	br	8ebd4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   8ebbc:	e0bfff17 	ldw	r2,-4(fp)
   8ebc0:	1090000c 	andi	r2,r2,16384
   8ebc4:	10000226 	beq	r2,zero,8ebd0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   8ebc8:	00bffd44 	movi	r2,-11
   8ebcc:	00000106 	br	8ebd4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   8ebd0:	00bffec4 	movi	r2,-5
}
   8ebd4:	e037883a 	mov	sp,fp
   8ebd8:	dfc00117 	ldw	ra,4(sp)
   8ebdc:	df000017 	ldw	fp,0(sp)
   8ebe0:	dec00204 	addi	sp,sp,8
   8ebe4:	f800283a 	ret

0008ebe8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8ebe8:	defff304 	addi	sp,sp,-52
   8ebec:	dfc00c15 	stw	ra,48(sp)
   8ebf0:	df000b15 	stw	fp,44(sp)
   8ebf4:	df000b04 	addi	fp,sp,44
   8ebf8:	e13ffc15 	stw	r4,-16(fp)
   8ebfc:	e17ffd15 	stw	r5,-12(fp)
   8ec00:	e1bffe15 	stw	r6,-8(fp)
   8ec04:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8ec08:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8ec0c:	e0bffd17 	ldw	r2,-12(fp)
   8ec10:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8ec14:	00003806 	br	8ecf8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8ec18:	e0bffc17 	ldw	r2,-16(fp)
   8ec1c:	10800c17 	ldw	r2,48(r2)
   8ec20:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   8ec24:	e0bffc17 	ldw	r2,-16(fp)
   8ec28:	10800d17 	ldw	r2,52(r2)
   8ec2c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8ec30:	e0fff817 	ldw	r3,-32(fp)
   8ec34:	e0bff517 	ldw	r2,-44(fp)
   8ec38:	1880062e 	bgeu	r3,r2,8ec54 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8ec3c:	e0fff517 	ldw	r3,-44(fp)
   8ec40:	e0bff817 	ldw	r2,-32(fp)
   8ec44:	1885c83a 	sub	r2,r3,r2
   8ec48:	10bfffc4 	addi	r2,r2,-1
   8ec4c:	e0bff615 	stw	r2,-40(fp)
   8ec50:	00000b06 	br	8ec80 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8ec54:	e0bff517 	ldw	r2,-44(fp)
   8ec58:	10000526 	beq	r2,zero,8ec70 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8ec5c:	00c20004 	movi	r3,2048
   8ec60:	e0bff817 	ldw	r2,-32(fp)
   8ec64:	1885c83a 	sub	r2,r3,r2
   8ec68:	e0bff615 	stw	r2,-40(fp)
   8ec6c:	00000406 	br	8ec80 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8ec70:	00c1ffc4 	movi	r3,2047
   8ec74:	e0bff817 	ldw	r2,-32(fp)
   8ec78:	1885c83a 	sub	r2,r3,r2
   8ec7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8ec80:	e0bff617 	ldw	r2,-40(fp)
   8ec84:	1000011e 	bne	r2,zero,8ec8c <altera_avalon_jtag_uart_write+0xa4>
        break;
   8ec88:	00001d06 	br	8ed00 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   8ec8c:	e0fffe17 	ldw	r3,-8(fp)
   8ec90:	e0bff617 	ldw	r2,-40(fp)
   8ec94:	1880022e 	bgeu	r3,r2,8eca0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   8ec98:	e0bffe17 	ldw	r2,-8(fp)
   8ec9c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8eca0:	e0bff817 	ldw	r2,-32(fp)
   8eca4:	10820e04 	addi	r2,r2,2104
   8eca8:	e0fffc17 	ldw	r3,-16(fp)
   8ecac:	1885883a 	add	r2,r3,r2
   8ecb0:	1009883a 	mov	r4,r2
   8ecb4:	e17ffd17 	ldw	r5,-12(fp)
   8ecb8:	e1bff617 	ldw	r6,-40(fp)
   8ecbc:	0086a680 	call	86a68 <memcpy>
      ptr   += n;
   8ecc0:	e0fffd17 	ldw	r3,-12(fp)
   8ecc4:	e0bff617 	ldw	r2,-40(fp)
   8ecc8:	1885883a 	add	r2,r3,r2
   8eccc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8ecd0:	e0fffe17 	ldw	r3,-8(fp)
   8ecd4:	e0bff617 	ldw	r2,-40(fp)
   8ecd8:	1885c83a 	sub	r2,r3,r2
   8ecdc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ece0:	e0fff817 	ldw	r3,-32(fp)
   8ece4:	e0bff617 	ldw	r2,-40(fp)
   8ece8:	1885883a 	add	r2,r3,r2
   8ecec:	10c1ffcc 	andi	r3,r2,2047
   8ecf0:	e0bffc17 	ldw	r2,-16(fp)
   8ecf4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8ecf8:	e0bffe17 	ldw	r2,-8(fp)
   8ecfc:	00bfc616 	blt	zero,r2,8ec18 <__alt_data_end+0xfffc5838>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ed00:	0005303a 	rdctl	r2,status
   8ed04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ed08:	e0fffa17 	ldw	r3,-24(fp)
   8ed0c:	00bfff84 	movi	r2,-2
   8ed10:	1884703a 	and	r2,r3,r2
   8ed14:	1001703a 	wrctl	status,r2
  
  return context;
   8ed18:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8ed1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ed20:	e0bffc17 	ldw	r2,-16(fp)
   8ed24:	10800817 	ldw	r2,32(r2)
   8ed28:	10c00094 	ori	r3,r2,2
   8ed2c:	e0bffc17 	ldw	r2,-16(fp)
   8ed30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ed34:	e0bffc17 	ldw	r2,-16(fp)
   8ed38:	10800017 	ldw	r2,0(r2)
   8ed3c:	10800104 	addi	r2,r2,4
   8ed40:	1007883a 	mov	r3,r2
   8ed44:	e0bffc17 	ldw	r2,-16(fp)
   8ed48:	10800817 	ldw	r2,32(r2)
   8ed4c:	18800035 	stwio	r2,0(r3)
   8ed50:	e0bff917 	ldw	r2,-28(fp)
   8ed54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ed58:	e0bffb17 	ldw	r2,-20(fp)
   8ed5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8ed60:	e0bffe17 	ldw	r2,-8(fp)
   8ed64:	0080120e 	bge	zero,r2,8edb0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   8ed68:	e0bfff17 	ldw	r2,-4(fp)
   8ed6c:	1090000c 	andi	r2,r2,16384
   8ed70:	10000126 	beq	r2,zero,8ed78 <altera_avalon_jtag_uart_write+0x190>
        break;
   8ed74:	00001006 	br	8edb8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8ed78:	0001883a 	nop
   8ed7c:	e0bffc17 	ldw	r2,-16(fp)
   8ed80:	10c00d17 	ldw	r3,52(r2)
   8ed84:	e0bff517 	ldw	r2,-44(fp)
   8ed88:	1880051e 	bne	r3,r2,8eda0 <altera_avalon_jtag_uart_write+0x1b8>
   8ed8c:	e0bffc17 	ldw	r2,-16(fp)
   8ed90:	10c00917 	ldw	r3,36(r2)
   8ed94:	e0bffc17 	ldw	r2,-16(fp)
   8ed98:	10800117 	ldw	r2,4(r2)
   8ed9c:	18bff736 	bltu	r3,r2,8ed7c <__alt_data_end+0xfffc599c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8eda0:	e0bffc17 	ldw	r2,-16(fp)
   8eda4:	10800917 	ldw	r2,36(r2)
   8eda8:	10000126 	beq	r2,zero,8edb0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   8edac:	00000206 	br	8edb8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   8edb0:	e0bffe17 	ldw	r2,-8(fp)
   8edb4:	00bf9716 	blt	zero,r2,8ec14 <__alt_data_end+0xfffc5834>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8edb8:	e0fffd17 	ldw	r3,-12(fp)
   8edbc:	e0bff717 	ldw	r2,-36(fp)
   8edc0:	18800426 	beq	r3,r2,8edd4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   8edc4:	e0fffd17 	ldw	r3,-12(fp)
   8edc8:	e0bff717 	ldw	r2,-36(fp)
   8edcc:	1885c83a 	sub	r2,r3,r2
   8edd0:	00000606 	br	8edec <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   8edd4:	e0bfff17 	ldw	r2,-4(fp)
   8edd8:	1090000c 	andi	r2,r2,16384
   8eddc:	10000226 	beq	r2,zero,8ede8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   8ede0:	00bffd44 	movi	r2,-11
   8ede4:	00000106 	br	8edec <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8ede8:	00bffec4 	movi	r2,-5
}
   8edec:	e037883a 	mov	sp,fp
   8edf0:	dfc00117 	ldw	ra,4(sp)
   8edf4:	df000017 	ldw	fp,0(sp)
   8edf8:	dec00204 	addi	sp,sp,8
   8edfc:	f800283a 	ret

0008ee00 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
   8ee00:	defffc04 	addi	sp,sp,-16
   8ee04:	dfc00315 	stw	ra,12(sp)
   8ee08:	df000215 	stw	fp,8(sp)
   8ee0c:	df000204 	addi	fp,sp,8
   8ee10:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
   8ee14:	e13fff17 	ldw	r4,-4(fp)
   8ee18:	01400274 	movhi	r5,9
   8ee1c:	294b4e04 	addi	r5,r5,11576
   8ee20:	008ffa40 	call	8ffa4 <alt_find_dev>
   8ee24:	e0bffe15 	stw	r2,-8(fp)
  return dev;
   8ee28:	e0bffe17 	ldw	r2,-8(fp)
}
   8ee2c:	e037883a 	mov	sp,fp
   8ee30:	dfc00117 	ldw	ra,4(sp)
   8ee34:	df000017 	ldw	fp,0(sp)
   8ee38:	dec00204 	addi	sp,sp,8
   8ee3c:	f800283a 	ret

0008ee40 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
   8ee40:	defffd04 	addi	sp,sp,-12
   8ee44:	df000215 	stw	fp,8(sp)
   8ee48:	df000204 	addi	fp,sp,8
   8ee4c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   8ee50:	e0bfff17 	ldw	r2,-4(fp)
   8ee54:	10800a17 	ldw	r2,40(r2)
   8ee58:	10800037 	ldwio	r2,0(r2)
   8ee5c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
   8ee60:	e0bffe17 	ldw	r2,-8(fp)
   8ee64:	10800054 	ori	r2,r2,1
   8ee68:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   8ee6c:	e0bfff17 	ldw	r2,-4(fp)
   8ee70:	10800a17 	ldw	r2,40(r2)
   8ee74:	1007883a 	mov	r3,r2
   8ee78:	e0bffe17 	ldw	r2,-8(fp)
   8ee7c:	18800035 	stwio	r2,0(r3)
}
   8ee80:	e037883a 	mov	sp,fp
   8ee84:	df000017 	ldw	fp,0(sp)
   8ee88:	dec00104 	addi	sp,sp,4
   8ee8c:	f800283a 	ret

0008ee90 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
   8ee90:	defffd04 	addi	sp,sp,-12
   8ee94:	df000215 	stw	fp,8(sp)
   8ee98:	df000204 	addi	fp,sp,8
   8ee9c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   8eea0:	e0bfff17 	ldw	r2,-4(fp)
   8eea4:	10800a17 	ldw	r2,40(r2)
   8eea8:	10800037 	ldwio	r2,0(r2)
   8eeac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
   8eeb0:	e0fffe17 	ldw	r3,-8(fp)
   8eeb4:	00bfff84 	movi	r2,-2
   8eeb8:	1884703a 	and	r2,r3,r2
   8eebc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   8eec0:	e0bfff17 	ldw	r2,-4(fp)
   8eec4:	10800a17 	ldw	r2,40(r2)
   8eec8:	1007883a 	mov	r3,r2
   8eecc:	e0bffe17 	ldw	r2,-8(fp)
   8eed0:	18800035 	stwio	r2,0(r3)
}
   8eed4:	e037883a 	mov	sp,fp
   8eed8:	df000017 	ldw	fp,0(sp)
   8eedc:	dec00104 	addi	sp,sp,4
   8eee0:	f800283a 	ret

0008eee4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
   8eee4:	defffd04 	addi	sp,sp,-12
   8eee8:	df000215 	stw	fp,8(sp)
   8eeec:	df000204 	addi	fp,sp,8
   8eef0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   8eef4:	e0bfff17 	ldw	r2,-4(fp)
   8eef8:	10800a17 	ldw	r2,40(r2)
   8eefc:	10800037 	ldwio	r2,0(r2)
   8ef00:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
   8ef04:	e0bffe17 	ldw	r2,-8(fp)
   8ef08:	10800094 	ori	r2,r2,2
   8ef0c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   8ef10:	e0bfff17 	ldw	r2,-4(fp)
   8ef14:	10800a17 	ldw	r2,40(r2)
   8ef18:	1007883a 	mov	r3,r2
   8ef1c:	e0bffe17 	ldw	r2,-8(fp)
   8ef20:	18800035 	stwio	r2,0(r3)
}
   8ef24:	e037883a 	mov	sp,fp
   8ef28:	df000017 	ldw	fp,0(sp)
   8ef2c:	dec00104 	addi	sp,sp,4
   8ef30:	f800283a 	ret

0008ef34 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
   8ef34:	defffd04 	addi	sp,sp,-12
   8ef38:	df000215 	stw	fp,8(sp)
   8ef3c:	df000204 	addi	fp,sp,8
   8ef40:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   8ef44:	e0bfff17 	ldw	r2,-4(fp)
   8ef48:	10800a17 	ldw	r2,40(r2)
   8ef4c:	10800037 	ldwio	r2,0(r2)
   8ef50:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
   8ef54:	e0fffe17 	ldw	r3,-8(fp)
   8ef58:	00bfff44 	movi	r2,-3
   8ef5c:	1884703a 	and	r2,r3,r2
   8ef60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   8ef64:	e0bfff17 	ldw	r2,-4(fp)
   8ef68:	10800a17 	ldw	r2,40(r2)
   8ef6c:	1007883a 	mov	r3,r2
   8ef70:	e0bffe17 	ldw	r2,-8(fp)
   8ef74:	18800035 	stwio	r2,0(r3)
}
   8ef78:	e037883a 	mov	sp,fp
   8ef7c:	df000017 	ldw	fp,0(sp)
   8ef80:	dec00104 	addi	sp,sp,4
   8ef84:	f800283a 	ret

0008ef88 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
   8ef88:	defffd04 	addi	sp,sp,-12
   8ef8c:	df000215 	stw	fp,8(sp)
   8ef90:	df000204 	addi	fp,sp,8
   8ef94:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   8ef98:	e0bfff17 	ldw	r2,-4(fp)
   8ef9c:	10800a17 	ldw	r2,40(r2)
   8efa0:	10800037 	ldwio	r2,0(r2)
   8efa4:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
   8efa8:	e0bffe17 	ldw	r2,-8(fp)
   8efac:	1080400c 	andi	r2,r2,256
   8efb0:	1004c03a 	cmpne	r2,r2,zero
   8efb4:	10803fcc 	andi	r2,r2,255
}
   8efb8:	e037883a 	mov	sp,fp
   8efbc:	df000017 	ldw	fp,0(sp)
   8efc0:	dec00104 	addi	sp,sp,4
   8efc4:	f800283a 	ret

0008efc8 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
   8efc8:	defffd04 	addi	sp,sp,-12
   8efcc:	df000215 	stw	fp,8(sp)
   8efd0:	df000204 	addi	fp,sp,8
   8efd4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   8efd8:	e0bfff17 	ldw	r2,-4(fp)
   8efdc:	10800a17 	ldw	r2,40(r2)
   8efe0:	10800037 	ldwio	r2,0(r2)
   8efe4:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
   8efe8:	e0bffe17 	ldw	r2,-8(fp)
   8efec:	1080800c 	andi	r2,r2,512
   8eff0:	1004c03a 	cmpne	r2,r2,zero
   8eff4:	10803fcc 	andi	r2,r2,255
}
   8eff8:	e037883a 	mov	sp,fp
   8effc:	df000017 	ldw	fp,0(sp)
   8f000:	dec00104 	addi	sp,sp,4
   8f004:	f800283a 	ret

0008f008 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
   8f008:	defffd04 	addi	sp,sp,-12
   8f00c:	df000215 	stw	fp,8(sp)
   8f010:	df000204 	addi	fp,sp,8
   8f014:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   8f018:	e0bfff17 	ldw	r2,-4(fp)
   8f01c:	10800a17 	ldw	r2,40(r2)
   8f020:	10800037 	ldwio	r2,0(r2)
   8f024:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
   8f028:	e0bffe17 	ldw	r2,-8(fp)
   8f02c:	10800114 	ori	r2,r2,4
   8f030:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
   8f034:	e0bffe17 	ldw	r2,-8(fp)
   8f038:	10800214 	ori	r2,r2,8
   8f03c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   8f040:	e0bfff17 	ldw	r2,-4(fp)
   8f044:	10800a17 	ldw	r2,40(r2)
   8f048:	1007883a 	mov	r3,r2
   8f04c:	e0bffe17 	ldw	r2,-8(fp)
   8f050:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
   8f054:	e0fffe17 	ldw	r3,-8(fp)
   8f058:	00bffec4 	movi	r2,-5
   8f05c:	1884703a 	and	r2,r3,r2
   8f060:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
   8f064:	e0fffe17 	ldw	r3,-8(fp)
   8f068:	00bffdc4 	movi	r2,-9
   8f06c:	1884703a 	and	r2,r3,r2
   8f070:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   8f074:	e0bfff17 	ldw	r2,-4(fp)
   8f078:	10800a17 	ldw	r2,40(r2)
   8f07c:	1007883a 	mov	r3,r2
   8f080:	e0bffe17 	ldw	r2,-8(fp)
   8f084:	18800035 	stwio	r2,0(r3)
}
   8f088:	e037883a 	mov	sp,fp
   8f08c:	df000017 	ldw	fp,0(sp)
   8f090:	dec00104 	addi	sp,sp,4
   8f094:	f800283a 	ret

0008f098 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
   8f098:	defffc04 	addi	sp,sp,-16
   8f09c:	df000315 	stw	fp,12(sp)
   8f0a0:	df000304 	addi	fp,sp,12
   8f0a4:	e13ffe15 	stw	r4,-8(fp)
   8f0a8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   8f0ac:	e0bffe17 	ldw	r2,-8(fp)
   8f0b0:	10800a17 	ldw	r2,40(r2)
   8f0b4:	10800104 	addi	r2,r2,4
   8f0b8:	10800037 	ldwio	r2,0(r2)
   8f0bc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
   8f0c0:	e0bfff17 	ldw	r2,-4(fp)
   8f0c4:	1000041e 	bne	r2,zero,8f0d8 <alt_up_audio_read_fifo_avail+0x40>
   8f0c8:	e0bffd17 	ldw	r2,-12(fp)
   8f0cc:	10bfc00c 	andi	r2,r2,65280
   8f0d0:	1004d23a 	srli	r2,r2,8
   8f0d4:	00000206 	br	8f0e0 <alt_up_audio_read_fifo_avail+0x48>
   8f0d8:	e0bffd17 	ldw	r2,-12(fp)
   8f0dc:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   8f0e0:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
   8f0e4:	e0bffd17 	ldw	r2,-12(fp)
}
   8f0e8:	e037883a 	mov	sp,fp
   8f0ec:	df000017 	ldw	fp,0(sp)
   8f0f0:	dec00104 	addi	sp,sp,4
   8f0f4:	f800283a 	ret

0008f0f8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   8f0f8:	defffa04 	addi	sp,sp,-24
   8f0fc:	dfc00515 	stw	ra,20(sp)
   8f100:	df000415 	stw	fp,16(sp)
   8f104:	df000404 	addi	fp,sp,16
   8f108:	e13ffd15 	stw	r4,-12(fp)
   8f10c:	e17ffe15 	stw	r5,-8(fp)
   8f110:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
   8f114:	e13ffd17 	ldw	r4,-12(fp)
   8f118:	01400044 	movi	r5,1
   8f11c:	008f0980 	call	8f098 <alt_up_audio_read_fifo_avail>
   8f120:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   8f124:	e0bffc17 	ldw	r2,-16(fp)
   8f128:	10801868 	cmpgeui	r2,r2,97
   8f12c:	1000021e 	bne	r2,zero,8f138 <alt_up_audio_record_r+0x40>
		return 0;
   8f130:	0005883a 	mov	r2,zero
   8f134:	00000506 	br	8f14c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   8f138:	e13ffd17 	ldw	r4,-12(fp)
   8f13c:	e17ffe17 	ldw	r5,-8(fp)
   8f140:	e1bfff17 	ldw	r6,-4(fp)
   8f144:	01c00044 	movi	r7,1
   8f148:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>
}
   8f14c:	e037883a 	mov	sp,fp
   8f150:	dfc00117 	ldw	ra,4(sp)
   8f154:	df000017 	ldw	fp,0(sp)
   8f158:	dec00204 	addi	sp,sp,8
   8f15c:	f800283a 	ret

0008f160 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   8f160:	defffa04 	addi	sp,sp,-24
   8f164:	dfc00515 	stw	ra,20(sp)
   8f168:	df000415 	stw	fp,16(sp)
   8f16c:	df000404 	addi	fp,sp,16
   8f170:	e13ffd15 	stw	r4,-12(fp)
   8f174:	e17ffe15 	stw	r5,-8(fp)
   8f178:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
   8f17c:	e13ffd17 	ldw	r4,-12(fp)
   8f180:	000b883a 	mov	r5,zero
   8f184:	008f0980 	call	8f098 <alt_up_audio_read_fifo_avail>
   8f188:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   8f18c:	e0bffc17 	ldw	r2,-16(fp)
   8f190:	10801868 	cmpgeui	r2,r2,97
   8f194:	1000021e 	bne	r2,zero,8f1a0 <alt_up_audio_record_l+0x40>
		return 0;
   8f198:	0005883a 	mov	r2,zero
   8f19c:	00000506 	br	8f1b4 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   8f1a0:	e13ffd17 	ldw	r4,-12(fp)
   8f1a4:	e17ffe17 	ldw	r5,-8(fp)
   8f1a8:	e1bfff17 	ldw	r6,-4(fp)
   8f1ac:	000f883a 	mov	r7,zero
   8f1b0:	008f2f80 	call	8f2f8 <alt_up_audio_read_fifo>
}
   8f1b4:	e037883a 	mov	sp,fp
   8f1b8:	dfc00117 	ldw	ra,4(sp)
   8f1bc:	df000017 	ldw	fp,0(sp)
   8f1c0:	dec00204 	addi	sp,sp,8
   8f1c4:	f800283a 	ret

0008f1c8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
   8f1c8:	defffc04 	addi	sp,sp,-16
   8f1cc:	df000315 	stw	fp,12(sp)
   8f1d0:	df000304 	addi	fp,sp,12
   8f1d4:	e13ffe15 	stw	r4,-8(fp)
   8f1d8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   8f1dc:	e0bffe17 	ldw	r2,-8(fp)
   8f1e0:	10800a17 	ldw	r2,40(r2)
   8f1e4:	10800104 	addi	r2,r2,4
   8f1e8:	10800037 	ldwio	r2,0(r2)
   8f1ec:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   8f1f0:	e0bfff17 	ldw	r2,-4(fp)
   8f1f4:	1000031e 	bne	r2,zero,8f204 <alt_up_audio_write_fifo_space+0x3c>
   8f1f8:	e0bffd17 	ldw	r2,-12(fp)
   8f1fc:	1004d63a 	srli	r2,r2,24
   8f200:	00000306 	br	8f210 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   8f204:	e0bffd17 	ldw	r2,-12(fp)
   8f208:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   8f20c:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   8f210:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
   8f214:	e0bffd17 	ldw	r2,-12(fp)
}
   8f218:	e037883a 	mov	sp,fp
   8f21c:	df000017 	ldw	fp,0(sp)
   8f220:	dec00104 	addi	sp,sp,4
   8f224:	f800283a 	ret

0008f228 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   8f228:	defffa04 	addi	sp,sp,-24
   8f22c:	dfc00515 	stw	ra,20(sp)
   8f230:	df000415 	stw	fp,16(sp)
   8f234:	df000404 	addi	fp,sp,16
   8f238:	e13ffd15 	stw	r4,-12(fp)
   8f23c:	e17ffe15 	stw	r5,-8(fp)
   8f240:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
   8f244:	e13ffd17 	ldw	r4,-12(fp)
   8f248:	01400044 	movi	r5,1
   8f24c:	008f1c80 	call	8f1c8 <alt_up_audio_write_fifo_space>
   8f250:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   8f254:	e0bffc17 	ldw	r2,-16(fp)
   8f258:	10801868 	cmpgeui	r2,r2,97
   8f25c:	1000021e 	bne	r2,zero,8f268 <alt_up_audio_play_r+0x40>
		return 0;
   8f260:	0005883a 	mov	r2,zero
   8f264:	00000506 	br	8f27c <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   8f268:	e13ffd17 	ldw	r4,-12(fp)
   8f26c:	e17ffe17 	ldw	r5,-8(fp)
   8f270:	e1bfff17 	ldw	r6,-4(fp)
   8f274:	01c00044 	movi	r7,1
   8f278:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
}
   8f27c:	e037883a 	mov	sp,fp
   8f280:	dfc00117 	ldw	ra,4(sp)
   8f284:	df000017 	ldw	fp,0(sp)
   8f288:	dec00204 	addi	sp,sp,8
   8f28c:	f800283a 	ret

0008f290 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   8f290:	defffa04 	addi	sp,sp,-24
   8f294:	dfc00515 	stw	ra,20(sp)
   8f298:	df000415 	stw	fp,16(sp)
   8f29c:	df000404 	addi	fp,sp,16
   8f2a0:	e13ffd15 	stw	r4,-12(fp)
   8f2a4:	e17ffe15 	stw	r5,-8(fp)
   8f2a8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
   8f2ac:	e13ffd17 	ldw	r4,-12(fp)
   8f2b0:	000b883a 	mov	r5,zero
   8f2b4:	008f1c80 	call	8f1c8 <alt_up_audio_write_fifo_space>
   8f2b8:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   8f2bc:	e0bffc17 	ldw	r2,-16(fp)
   8f2c0:	10801868 	cmpgeui	r2,r2,97
   8f2c4:	1000021e 	bne	r2,zero,8f2d0 <alt_up_audio_play_l+0x40>
		return 0;
   8f2c8:	0005883a 	mov	r2,zero
   8f2cc:	00000506 	br	8f2e4 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   8f2d0:	e13ffd17 	ldw	r4,-12(fp)
   8f2d4:	e17ffe17 	ldw	r5,-8(fp)
   8f2d8:	e1bfff17 	ldw	r6,-4(fp)
   8f2dc:	000f883a 	mov	r7,zero
   8f2e0:	008f3d80 	call	8f3d8 <alt_up_audio_write_fifo>
}
   8f2e4:	e037883a 	mov	sp,fp
   8f2e8:	dfc00117 	ldw	ra,4(sp)
   8f2ec:	df000017 	ldw	fp,0(sp)
   8f2f0:	dec00204 	addi	sp,sp,8
   8f2f4:	f800283a 	ret

0008f2f8 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   8f2f8:	defff904 	addi	sp,sp,-28
   8f2fc:	df000615 	stw	fp,24(sp)
   8f300:	df000604 	addi	fp,sp,24
   8f304:	e13ffc15 	stw	r4,-16(fp)
   8f308:	e17ffd15 	stw	r5,-12(fp)
   8f30c:	e1bffe15 	stw	r6,-8(fp)
   8f310:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   8f314:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   8f318:	00002706 	br	8f3b8 <alt_up_audio_read_fifo+0xc0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   8f31c:	e0bffc17 	ldw	r2,-16(fp)
   8f320:	10800a17 	ldw	r2,40(r2)
   8f324:	10800104 	addi	r2,r2,4
   8f328:	10800037 	ldwio	r2,0(r2)
   8f32c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
   8f330:	e0bfff17 	ldw	r2,-4(fp)
   8f334:	1000041e 	bne	r2,zero,8f348 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
   8f338:	e0bffb17 	ldw	r2,-20(fp)
   8f33c:	10bfc00c 	andi	r2,r2,65280
			:
   8f340:	1004d23a 	srli	r2,r2,8
   8f344:	00000206 	br	8f350 <alt_up_audio_read_fifo+0x58>
   8f348:	e0bffb17 	ldw	r2,-20(fp)
   8f34c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   8f350:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
   8f354:	e0bffb17 	ldw	r2,-20(fp)
   8f358:	10001626 	beq	r2,zero,8f3b4 <alt_up_audio_read_fifo+0xbc>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   8f35c:	e0bffa17 	ldw	r2,-24(fp)
   8f360:	1085883a 	add	r2,r2,r2
   8f364:	1085883a 	add	r2,r2,r2
   8f368:	1007883a 	mov	r3,r2
   8f36c:	e0bffd17 	ldw	r2,-12(fp)
   8f370:	10c5883a 	add	r2,r2,r3
   8f374:	e0ffff17 	ldw	r3,-4(fp)
   8f378:	1800051e 	bne	r3,zero,8f390 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   8f37c:	e0fffc17 	ldw	r3,-16(fp)
   8f380:	18c00a17 	ldw	r3,40(r3)
   8f384:	18c00204 	addi	r3,r3,8
   8f388:	18c00037 	ldwio	r3,0(r3)
   8f38c:	00000406 	br	8f3a0 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
   8f390:	e0fffc17 	ldw	r3,-16(fp)
   8f394:	18c00a17 	ldw	r3,40(r3)
   8f398:	18c00304 	addi	r3,r3,12
   8f39c:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   8f3a0:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
   8f3a4:	e0bffa17 	ldw	r2,-24(fp)
   8f3a8:	10800044 	addi	r2,r2,1
   8f3ac:	e0bffa15 	stw	r2,-24(fp)
   8f3b0:	00000106 	br	8f3b8 <alt_up_audio_read_fifo+0xc0>
		}
		else
		{
			// no more data to read
			break;
   8f3b4:	00000306 	br	8f3c4 <alt_up_audio_read_fifo+0xcc>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   8f3b8:	e0fffa17 	ldw	r3,-24(fp)
   8f3bc:	e0bffe17 	ldw	r2,-8(fp)
   8f3c0:	18bfd616 	blt	r3,r2,8f31c <__alt_data_end+0xfffc5f3c>
		{
			// no more data to read
			break;
		}
	}
	return count;
   8f3c4:	e0bffa17 	ldw	r2,-24(fp)
}
   8f3c8:	e037883a 	mov	sp,fp
   8f3cc:	df000017 	ldw	fp,0(sp)
   8f3d0:	dec00104 	addi	sp,sp,4
   8f3d4:	f800283a 	ret

0008f3d8 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   8f3d8:	defff904 	addi	sp,sp,-28
   8f3dc:	df000615 	stw	fp,24(sp)
   8f3e0:	df000604 	addi	fp,sp,24
   8f3e4:	e13ffc15 	stw	r4,-16(fp)
   8f3e8:	e17ffd15 	stw	r5,-12(fp)
   8f3ec:	e1bffe15 	stw	r6,-8(fp)
   8f3f0:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   8f3f4:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   8f3f8:	00003106 	br	8f4c0 <alt_up_audio_write_fifo+0xe8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   8f3fc:	e0bffc17 	ldw	r2,-16(fp)
   8f400:	10800a17 	ldw	r2,40(r2)
   8f404:	10800104 	addi	r2,r2,4
   8f408:	10800037 	ldwio	r2,0(r2)
   8f40c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   8f410:	e0bfff17 	ldw	r2,-4(fp)
   8f414:	1000031e 	bne	r2,zero,8f424 <alt_up_audio_write_fifo+0x4c>
   8f418:	e0bffb17 	ldw	r2,-20(fp)
   8f41c:	1004d63a 	srli	r2,r2,24
   8f420:	00000306 	br	8f430 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   8f424:	e0bffb17 	ldw	r2,-20(fp)
   8f428:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   8f42c:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   8f430:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
   8f434:	e0bffb17 	ldw	r2,-20(fp)
   8f438:	10002026 	beq	r2,zero,8f4bc <alt_up_audio_write_fifo+0xe4>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
   8f43c:	e0bfff17 	ldw	r2,-4(fp)
   8f440:	10000f1e 	bne	r2,zero,8f480 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
   8f444:	e0bffc17 	ldw	r2,-16(fp)
   8f448:	10800a17 	ldw	r2,40(r2)
   8f44c:	10800204 	addi	r2,r2,8
   8f450:	1009883a 	mov	r4,r2
   8f454:	e0bffa17 	ldw	r2,-24(fp)
   8f458:	10c00044 	addi	r3,r2,1
   8f45c:	e0fffa15 	stw	r3,-24(fp)
   8f460:	1085883a 	add	r2,r2,r2
   8f464:	1085883a 	add	r2,r2,r2
   8f468:	1007883a 	mov	r3,r2
   8f46c:	e0bffd17 	ldw	r2,-12(fp)
   8f470:	10c5883a 	add	r2,r2,r3
   8f474:	10800017 	ldw	r2,0(r2)
   8f478:	20800035 	stwio	r2,0(r4)
   8f47c:	00001006 	br	8f4c0 <alt_up_audio_write_fifo+0xe8>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
   8f480:	e0bffc17 	ldw	r2,-16(fp)
   8f484:	10800a17 	ldw	r2,40(r2)
   8f488:	10800304 	addi	r2,r2,12
   8f48c:	1009883a 	mov	r4,r2
   8f490:	e0bffa17 	ldw	r2,-24(fp)
   8f494:	10c00044 	addi	r3,r2,1
   8f498:	e0fffa15 	stw	r3,-24(fp)
   8f49c:	1085883a 	add	r2,r2,r2
   8f4a0:	1085883a 	add	r2,r2,r2
   8f4a4:	1007883a 	mov	r3,r2
   8f4a8:	e0bffd17 	ldw	r2,-12(fp)
   8f4ac:	10c5883a 	add	r2,r2,r3
   8f4b0:	10800017 	ldw	r2,0(r2)
   8f4b4:	20800035 	stwio	r2,0(r4)
   8f4b8:	00000106 	br	8f4c0 <alt_up_audio_write_fifo+0xe8>
		}
		else
		{
			// no more space to write
			break;
   8f4bc:	00000306 	br	8f4cc <alt_up_audio_write_fifo+0xf4>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   8f4c0:	e0fffa17 	ldw	r3,-24(fp)
   8f4c4:	e0bffe17 	ldw	r2,-8(fp)
   8f4c8:	18bfcc16 	blt	r3,r2,8f3fc <__alt_data_end+0xfffc601c>
		{
			// no more space to write
			break;
		}
	}
	return count;
   8f4cc:	e0bffa17 	ldw	r2,-24(fp)
}
   8f4d0:	e037883a 	mov	sp,fp
   8f4d4:	df000017 	ldw	fp,0(sp)
   8f4d8:	dec00104 	addi	sp,sp,4
   8f4dc:	f800283a 	ret

0008f4e0 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
   8f4e0:	defffd04 	addi	sp,sp,-12
   8f4e4:	df000215 	stw	fp,8(sp)
   8f4e8:	df000204 	addi	fp,sp,8
   8f4ec:	e13ffe15 	stw	r4,-8(fp)
   8f4f0:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   8f4f4:	e0bfff17 	ldw	r2,-4(fp)
   8f4f8:	1000051e 	bne	r2,zero,8f510 <alt_up_audio_read_fifo_head+0x30>
   8f4fc:	e0bffe17 	ldw	r2,-8(fp)
   8f500:	10800a17 	ldw	r2,40(r2)
   8f504:	10800204 	addi	r2,r2,8
   8f508:	10800037 	ldwio	r2,0(r2)
   8f50c:	00000406 	br	8f520 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
   8f510:	e0bffe17 	ldw	r2,-8(fp)
   8f514:	10800a17 	ldw	r2,40(r2)
   8f518:	10800304 	addi	r2,r2,12
   8f51c:	10800037 	ldwio	r2,0(r2)
}
   8f520:	e037883a 	mov	sp,fp
   8f524:	df000017 	ldw	fp,0(sp)
   8f528:	dec00104 	addi	sp,sp,4
   8f52c:	f800283a 	ret

0008f530 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
   8f530:	defffc04 	addi	sp,sp,-16
   8f534:	df000315 	stw	fp,12(sp)
   8f538:	df000304 	addi	fp,sp,12
   8f53c:	e13ffd15 	stw	r4,-12(fp)
   8f540:	e17ffe15 	stw	r5,-8(fp)
   8f544:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
   8f548:	e0bfff17 	ldw	r2,-4(fp)
   8f54c:	1000071e 	bne	r2,zero,8f56c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
   8f550:	e0bffd17 	ldw	r2,-12(fp)
   8f554:	10800a17 	ldw	r2,40(r2)
   8f558:	10800204 	addi	r2,r2,8
   8f55c:	1007883a 	mov	r3,r2
   8f560:	e0bffe17 	ldw	r2,-8(fp)
   8f564:	18800035 	stwio	r2,0(r3)
   8f568:	00000606 	br	8f584 <alt_up_audio_write_fifo_head+0x54>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
   8f56c:	e0bffd17 	ldw	r2,-12(fp)
   8f570:	10800a17 	ldw	r2,40(r2)
   8f574:	10800304 	addi	r2,r2,12
   8f578:	1007883a 	mov	r3,r2
   8f57c:	e0bffe17 	ldw	r2,-8(fp)
   8f580:	18800035 	stwio	r2,0(r3)
}
   8f584:	e037883a 	mov	sp,fp
   8f588:	df000017 	ldw	fp,0(sp)
   8f58c:	dec00104 	addi	sp,sp,4
   8f590:	f800283a 	ret

0008f594 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
   8f594:	defffc04 	addi	sp,sp,-16
   8f598:	dfc00315 	stw	ra,12(sp)
   8f59c:	df000215 	stw	fp,8(sp)
   8f5a0:	df000204 	addi	fp,sp,8
   8f5a4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
   8f5a8:	e13fff17 	ldw	r4,-4(fp)
   8f5ac:	01400274 	movhi	r5,9
   8f5b0:	294b4e04 	addi	r5,r5,11576
   8f5b4:	008ffa40 	call	8ffa4 <alt_find_dev>
   8f5b8:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
   8f5bc:	e0bffe17 	ldw	r2,-8(fp)
   8f5c0:	10800a17 	ldw	r2,40(r2)
   8f5c4:	10800104 	addi	r2,r2,4
   8f5c8:	10800037 	ldwio	r2,0(r2)
   8f5cc:	10803fec 	andhi	r2,r2,255
   8f5d0:	1005d43a 	srai	r2,r2,16
   8f5d4:	1007883a 	mov	r3,r2
   8f5d8:	e0bffe17 	ldw	r2,-8(fp)
   8f5dc:	10c00b15 	stw	r3,44(r2)

  return dev;
   8f5e0:	e0bffe17 	ldw	r2,-8(fp)
}
   8f5e4:	e037883a 	mov	sp,fp
   8f5e8:	dfc00117 	ldw	ra,4(sp)
   8f5ec:	df000017 	ldw	fp,0(sp)
   8f5f0:	dec00204 	addi	sp,sp,8
   8f5f4:	f800283a 	ret

0008f5f8 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8f5f8:	defffc04 	addi	sp,sp,-16
   8f5fc:	df000315 	stw	fp,12(sp)
   8f600:	df000304 	addi	fp,sp,12
   8f604:	e13ffd15 	stw	r4,-12(fp)
   8f608:	e17ffe15 	stw	r5,-8(fp)
   8f60c:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   8f610:	e0bffd17 	ldw	r2,-12(fp)
   8f614:	10800a17 	ldw	r2,40(r2)
   8f618:	10800204 	addi	r2,r2,8
   8f61c:	1007883a 	mov	r3,r2
   8f620:	e0bffe17 	ldw	r2,-8(fp)
   8f624:	10803fcc 	andi	r2,r2,255
   8f628:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
   8f62c:	e0bffd17 	ldw	r2,-12(fp)
   8f630:	10800a17 	ldw	r2,40(r2)
   8f634:	10800304 	addi	r2,r2,12
   8f638:	1007883a 	mov	r3,r2
   8f63c:	e0bfff17 	ldw	r2,-4(fp)
   8f640:	10bfffcc 	andi	r2,r2,65535
   8f644:	18800035 	stwio	r2,0(r3)

	return 0;
   8f648:	0005883a 	mov	r2,zero
}
   8f64c:	e037883a 	mov	sp,fp
   8f650:	df000017 	ldw	fp,0(sp)
   8f654:	dec00104 	addi	sp,sp,4
   8f658:	f800283a 	ret

0008f65c <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
   8f65c:	defffb04 	addi	sp,sp,-20
   8f660:	dfc00415 	stw	ra,16(sp)
   8f664:	df000315 	stw	fp,12(sp)
   8f668:	df000304 	addi	fp,sp,12
   8f66c:	e13ffd15 	stw	r4,-12(fp)
   8f670:	e17ffe15 	stw	r5,-8(fp)
   8f674:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   8f678:	e0bffd17 	ldw	r2,-12(fp)
   8f67c:	10800a17 	ldw	r2,40(r2)
   8f680:	10800204 	addi	r2,r2,8
   8f684:	1007883a 	mov	r3,r2
   8f688:	e0bffe17 	ldw	r2,-8(fp)
   8f68c:	10803fcc 	andi	r2,r2,255
   8f690:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
   8f694:	e0bffd17 	ldw	r2,-12(fp)
   8f698:	10800a17 	ldw	r2,40(r2)
   8f69c:	10800304 	addi	r2,r2,12
   8f6a0:	10800037 	ldwio	r2,0(r2)
   8f6a4:	1007883a 	mov	r3,r2
   8f6a8:	e0bfff17 	ldw	r2,-4(fp)
   8f6ac:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
   8f6b0:	e13ffd17 	ldw	r4,-12(fp)
   8f6b4:	008f7800 	call	8f780 <alt_up_av_config_read_acknowledge>
   8f6b8:	10000226 	beq	r2,zero,8f6c4 <alt_up_av_config_read_data+0x68>
		return -1;
   8f6bc:	00bfffc4 	movi	r2,-1
   8f6c0:	00000106 	br	8f6c8 <alt_up_av_config_read_data+0x6c>

	return 0;
   8f6c4:	0005883a 	mov	r2,zero
}
   8f6c8:	e037883a 	mov	sp,fp
   8f6cc:	dfc00117 	ldw	ra,4(sp)
   8f6d0:	df000017 	ldw	fp,0(sp)
   8f6d4:	dec00204 	addi	sp,sp,8
   8f6d8:	f800283a 	ret

0008f6dc <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
   8f6dc:	defffe04 	addi	sp,sp,-8
   8f6e0:	df000115 	stw	fp,4(sp)
   8f6e4:	df000104 	addi	fp,sp,4
   8f6e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
   8f6ec:	e0bfff17 	ldw	r2,-4(fp)
   8f6f0:	10800a17 	ldw	r2,40(r2)
   8f6f4:	1007883a 	mov	r3,r2
   8f6f8:	00800044 	movi	r2,1
   8f6fc:	18800025 	stbio	r2,0(r3)
	return 0;
   8f700:	0005883a 	mov	r2,zero
}
   8f704:	e037883a 	mov	sp,fp
   8f708:	df000017 	ldw	fp,0(sp)
   8f70c:	dec00104 	addi	sp,sp,4
   8f710:	f800283a 	ret

0008f714 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
   8f714:	defffe04 	addi	sp,sp,-8
   8f718:	df000115 	stw	fp,4(sp)
   8f71c:	df000104 	addi	fp,sp,4
   8f720:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
   8f724:	e0bfff17 	ldw	r2,-4(fp)
   8f728:	10800a17 	ldw	r2,40(r2)
   8f72c:	1007883a 	mov	r3,r2
   8f730:	00800084 	movi	r2,2
   8f734:	18800025 	stbio	r2,0(r3)
	return 0;
   8f738:	0005883a 	mov	r2,zero
}
   8f73c:	e037883a 	mov	sp,fp
   8f740:	df000017 	ldw	fp,0(sp)
   8f744:	dec00104 	addi	sp,sp,4
   8f748:	f800283a 	ret

0008f74c <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
   8f74c:	defffe04 	addi	sp,sp,-8
   8f750:	df000115 	stw	fp,4(sp)
   8f754:	df000104 	addi	fp,sp,4
   8f758:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
   8f75c:	e0bfff17 	ldw	r2,-4(fp)
   8f760:	10800a17 	ldw	r2,40(r2)
   8f764:	0007883a 	mov	r3,zero
   8f768:	10c00025 	stbio	r3,0(r2)
	return 0;
   8f76c:	0005883a 	mov	r2,zero
}
   8f770:	e037883a 	mov	sp,fp
   8f774:	df000017 	ldw	fp,0(sp)
   8f778:	dec00104 	addi	sp,sp,4
   8f77c:	f800283a 	ret

0008f780 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
   8f780:	defffe04 	addi	sp,sp,-8
   8f784:	df000115 	stw	fp,4(sp)
   8f788:	df000104 	addi	fp,sp,4
   8f78c:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
   8f790:	e0bfff17 	ldw	r2,-4(fp)
   8f794:	10800a17 	ldw	r2,40(r2)
   8f798:	10800104 	addi	r2,r2,4
   8f79c:	10800037 	ldwio	r2,0(r2)
   8f7a0:	1080008c 	andi	r2,r2,2
   8f7a4:	1005d07a 	srai	r2,r2,1
   8f7a8:	10000626 	beq	r2,zero,8f7c4 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
   8f7ac:	e0bfff17 	ldw	r2,-4(fp)
   8f7b0:	10800a17 	ldw	r2,40(r2)
   8f7b4:	10800104 	addi	r2,r2,4
   8f7b8:	10800037 	ldwio	r2,0(r2)
   8f7bc:	1080004c 	andi	r2,r2,1
   8f7c0:	00000106 	br	8f7c8 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
   8f7c4:	00bfffc4 	movi	r2,-1
}
   8f7c8:	e037883a 	mov	sp,fp
   8f7cc:	df000017 	ldw	fp,0(sp)
   8f7d0:	dec00104 	addi	sp,sp,4
   8f7d4:	f800283a 	ret

0008f7d8 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
   8f7d8:	defffe04 	addi	sp,sp,-8
   8f7dc:	df000115 	stw	fp,4(sp)
   8f7e0:	df000104 	addi	fp,sp,4
   8f7e4:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
   8f7e8:	e0bfff17 	ldw	r2,-4(fp)
   8f7ec:	10800a17 	ldw	r2,40(r2)
   8f7f0:	10800104 	addi	r2,r2,4
   8f7f4:	10800037 	ldwio	r2,0(r2)
   8f7f8:	1080008c 	andi	r2,r2,2
   8f7fc:	1005d07a 	srai	r2,r2,1
}
   8f800:	e037883a 	mov	sp,fp
   8f804:	df000017 	ldw	fp,0(sp)
   8f808:	dec00104 	addi	sp,sp,4
   8f80c:	f800283a 	ret

0008f810 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8f810:	defffa04 	addi	sp,sp,-24
   8f814:	dfc00515 	stw	ra,20(sp)
   8f818:	df000415 	stw	fp,16(sp)
   8f81c:	df000404 	addi	fp,sp,16
   8f820:	e13ffd15 	stw	r4,-12(fp)
   8f824:	e17ffe15 	stw	r5,-8(fp)
   8f828:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   8f82c:	e0bffd17 	ldw	r2,-12(fp)
   8f830:	10800b17 	ldw	r2,44(r2)
   8f834:	10800060 	cmpeqi	r2,r2,1
   8f838:	10000e1e 	bne	r2,zero,8f874 <alt_up_av_config_write_audio_cfg_register+0x64>
   8f83c:	e0bffd17 	ldw	r2,-12(fp)
   8f840:	10800b17 	ldw	r2,44(r2)
   8f844:	108000a0 	cmpeqi	r2,r2,2
   8f848:	10000a1e 	bne	r2,zero,8f874 <alt_up_av_config_write_audio_cfg_register+0x64>
   8f84c:	e0bffd17 	ldw	r2,-12(fp)
   8f850:	10800b17 	ldw	r2,44(r2)
   8f854:	108000e0 	cmpeqi	r2,r2,3
   8f858:	1000061e 	bne	r2,zero,8f874 <alt_up_av_config_write_audio_cfg_register+0x64>
   8f85c:	e0bffd17 	ldw	r2,-12(fp)
   8f860:	10800b17 	ldw	r2,44(r2)
   8f864:	10800120 	cmpeqi	r2,r2,4
   8f868:	1000021e 	bne	r2,zero,8f874 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
   8f86c:	00bffa84 	movi	r2,-22
   8f870:	00000b06 	br	8f8a0 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
   8f874:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
   8f878:	e0bffd17 	ldw	r2,-12(fp)
   8f87c:	10800a17 	ldw	r2,40(r2)
   8f880:	10800084 	addi	r2,r2,2
   8f884:	1007883a 	mov	r3,r2
   8f888:	e0bffc17 	ldw	r2,-16(fp)
   8f88c:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
   8f890:	e13ffd17 	ldw	r4,-12(fp)
   8f894:	e17ffe17 	ldw	r5,-8(fp)
   8f898:	e1bfff17 	ldw	r6,-4(fp)
   8f89c:	008f5f80 	call	8f5f8 <alt_up_av_config_write_data>
}
   8f8a0:	e037883a 	mov	sp,fp
   8f8a4:	dfc00117 	ldw	ra,4(sp)
   8f8a8:	df000017 	ldw	fp,0(sp)
   8f8ac:	dec00204 	addi	sp,sp,8
   8f8b0:	f800283a 	ret

0008f8b4 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
   8f8b4:	defffa04 	addi	sp,sp,-24
   8f8b8:	dfc00515 	stw	ra,20(sp)
   8f8bc:	df000415 	stw	fp,16(sp)
   8f8c0:	df000404 	addi	fp,sp,16
   8f8c4:	e13ffc15 	stw	r4,-16(fp)
   8f8c8:	e17ffd15 	stw	r5,-12(fp)
   8f8cc:	e1bffe15 	stw	r6,-8(fp)
   8f8d0:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   8f8d4:	e0bffc17 	ldw	r2,-16(fp)
   8f8d8:	10800b17 	ldw	r2,44(r2)
   8f8dc:	108000a0 	cmpeqi	r2,r2,2
   8f8e0:	10000a1e 	bne	r2,zero,8f90c <alt_up_av_config_read_video_cfg_register+0x58>
   8f8e4:	e0bffc17 	ldw	r2,-16(fp)
   8f8e8:	10800b17 	ldw	r2,44(r2)
   8f8ec:	108000e0 	cmpeqi	r2,r2,3
   8f8f0:	1000061e 	bne	r2,zero,8f90c <alt_up_av_config_read_video_cfg_register+0x58>
   8f8f4:	e0bffc17 	ldw	r2,-16(fp)
   8f8f8:	10800b17 	ldw	r2,44(r2)
   8f8fc:	10800120 	cmpeqi	r2,r2,4
   8f900:	1000021e 	bne	r2,zero,8f90c <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
   8f904:	00bffa84 	movi	r2,-22
   8f908:	00002006 	br	8f98c <alt_up_av_config_read_video_cfg_register+0xd8>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   8f90c:	e0bffc17 	ldw	r2,-16(fp)
   8f910:	10800b17 	ldw	r2,44(r2)
   8f914:	108000a0 	cmpeqi	r2,r2,2
   8f918:	1000041e 	bne	r2,zero,8f92c <alt_up_av_config_read_video_cfg_register+0x78>
   8f91c:	e0bffc17 	ldw	r2,-16(fp)
   8f920:	10800b17 	ldw	r2,44(r2)
   8f924:	10800118 	cmpnei	r2,r2,4
   8f928:	1000061e 	bne	r2,zero,8f944 <alt_up_av_config_read_video_cfg_register+0x90>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   8f92c:	e0bfff17 	ldw	r2,-4(fp)
   8f930:	10800060 	cmpeqi	r2,r2,1
   8f934:	1000021e 	bne	r2,zero,8f940 <alt_up_av_config_read_video_cfg_register+0x8c>
			return -EINVAL;
   8f938:	00bffa84 	movi	r2,-22
   8f93c:	00001306 	br	8f98c <alt_up_av_config_read_video_cfg_register+0xd8>
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
		return -EINVAL;

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   8f940:	00000806 	br	8f964 <alt_up_av_config_read_video_cfg_register+0xb0>
			return -EINVAL;
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   8f944:	e0bfff17 	ldw	r2,-4(fp)
   8f948:	10800060 	cmpeqi	r2,r2,1
   8f94c:	1000051e 	bne	r2,zero,8f964 <alt_up_av_config_read_video_cfg_register+0xb0>
   8f950:	e0bfff17 	ldw	r2,-4(fp)
   8f954:	108000a0 	cmpeqi	r2,r2,2
   8f958:	1000021e 	bne	r2,zero,8f964 <alt_up_av_config_read_video_cfg_register+0xb0>
			return -EINVAL;
   8f95c:	00bffa84 	movi	r2,-22
   8f960:	00000a06 	br	8f98c <alt_up_av_config_read_video_cfg_register+0xd8>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   8f964:	e0bffc17 	ldw	r2,-16(fp)
   8f968:	10800a17 	ldw	r2,40(r2)
   8f96c:	10800084 	addi	r2,r2,2
   8f970:	1007883a 	mov	r3,r2
   8f974:	e0bfff17 	ldw	r2,-4(fp)
   8f978:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
   8f97c:	e13ffc17 	ldw	r4,-16(fp)
   8f980:	e17ffd17 	ldw	r5,-12(fp)
   8f984:	e1bffe17 	ldw	r6,-8(fp)
   8f988:	008f65c0 	call	8f65c <alt_up_av_config_read_data>
}
   8f98c:	e037883a 	mov	sp,fp
   8f990:	dfc00117 	ldw	ra,4(sp)
   8f994:	df000017 	ldw	fp,0(sp)
   8f998:	dec00204 	addi	sp,sp,8
   8f99c:	f800283a 	ret

0008f9a0 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
   8f9a0:	defffa04 	addi	sp,sp,-24
   8f9a4:	dfc00515 	stw	ra,20(sp)
   8f9a8:	df000415 	stw	fp,16(sp)
   8f9ac:	df000404 	addi	fp,sp,16
   8f9b0:	e13ffc15 	stw	r4,-16(fp)
   8f9b4:	e17ffd15 	stw	r5,-12(fp)
   8f9b8:	e1bffe15 	stw	r6,-8(fp)
   8f9bc:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   8f9c0:	e0bffc17 	ldw	r2,-16(fp)
   8f9c4:	10800b17 	ldw	r2,44(r2)
   8f9c8:	108000a0 	cmpeqi	r2,r2,2
   8f9cc:	10000a1e 	bne	r2,zero,8f9f8 <alt_up_av_config_write_video_cfg_register+0x58>
   8f9d0:	e0bffc17 	ldw	r2,-16(fp)
   8f9d4:	10800b17 	ldw	r2,44(r2)
   8f9d8:	108000e0 	cmpeqi	r2,r2,3
   8f9dc:	1000061e 	bne	r2,zero,8f9f8 <alt_up_av_config_write_video_cfg_register+0x58>
   8f9e0:	e0bffc17 	ldw	r2,-16(fp)
   8f9e4:	10800b17 	ldw	r2,44(r2)
   8f9e8:	10800120 	cmpeqi	r2,r2,4
   8f9ec:	1000021e 	bne	r2,zero,8f9f8 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
   8f9f0:	00bffa84 	movi	r2,-22
   8f9f4:	00002006 	br	8fa78 <alt_up_av_config_write_video_cfg_register+0xd8>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   8f9f8:	e0bffc17 	ldw	r2,-16(fp)
   8f9fc:	10800b17 	ldw	r2,44(r2)
   8fa00:	108000a0 	cmpeqi	r2,r2,2
   8fa04:	1000041e 	bne	r2,zero,8fa18 <alt_up_av_config_write_video_cfg_register+0x78>
   8fa08:	e0bffc17 	ldw	r2,-16(fp)
   8fa0c:	10800b17 	ldw	r2,44(r2)
   8fa10:	10800118 	cmpnei	r2,r2,4
   8fa14:	1000061e 	bne	r2,zero,8fa30 <alt_up_av_config_write_video_cfg_register+0x90>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   8fa18:	e0bfff17 	ldw	r2,-4(fp)
   8fa1c:	10800060 	cmpeqi	r2,r2,1
   8fa20:	1000021e 	bne	r2,zero,8fa2c <alt_up_av_config_write_video_cfg_register+0x8c>
			return -EINVAL;
   8fa24:	00bffa84 	movi	r2,-22
   8fa28:	00001306 	br	8fa78 <alt_up_av_config_write_video_cfg_register+0xd8>
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
		return -EINVAL;

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   8fa2c:	00000806 	br	8fa50 <alt_up_av_config_write_video_cfg_register+0xb0>
			return -EINVAL;
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   8fa30:	e0bfff17 	ldw	r2,-4(fp)
   8fa34:	10800060 	cmpeqi	r2,r2,1
   8fa38:	1000051e 	bne	r2,zero,8fa50 <alt_up_av_config_write_video_cfg_register+0xb0>
   8fa3c:	e0bfff17 	ldw	r2,-4(fp)
   8fa40:	108000a0 	cmpeqi	r2,r2,2
   8fa44:	1000021e 	bne	r2,zero,8fa50 <alt_up_av_config_write_video_cfg_register+0xb0>
			return -EINVAL;
   8fa48:	00bffa84 	movi	r2,-22
   8fa4c:	00000a06 	br	8fa78 <alt_up_av_config_write_video_cfg_register+0xd8>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   8fa50:	e0bffc17 	ldw	r2,-16(fp)
   8fa54:	10800a17 	ldw	r2,40(r2)
   8fa58:	10800084 	addi	r2,r2,2
   8fa5c:	1007883a 	mov	r3,r2
   8fa60:	e0bfff17 	ldw	r2,-4(fp)
   8fa64:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
   8fa68:	e13ffc17 	ldw	r4,-16(fp)
   8fa6c:	e17ffd17 	ldw	r5,-12(fp)
   8fa70:	e1bffe17 	ldw	r6,-8(fp)
   8fa74:	008f5f80 	call	8f5f8 <alt_up_av_config_write_data>
}
   8fa78:	e037883a 	mov	sp,fp
   8fa7c:	dfc00117 	ldw	ra,4(sp)
   8fa80:	df000017 	ldw	fp,0(sp)
   8fa84:	dec00204 	addi	sp,sp,8
   8fa88:	f800283a 	ret

0008fa8c <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   8fa8c:	defffb04 	addi	sp,sp,-20
   8fa90:	dfc00415 	stw	ra,16(sp)
   8fa94:	df000315 	stw	fp,12(sp)
   8fa98:	df000304 	addi	fp,sp,12
   8fa9c:	e13ffd15 	stw	r4,-12(fp)
   8faa0:	e17ffe15 	stw	r5,-8(fp)
   8faa4:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   8faa8:	e0bffd17 	ldw	r2,-12(fp)
   8faac:	10800b17 	ldw	r2,44(r2)
   8fab0:	10800220 	cmpeqi	r2,r2,8
   8fab4:	1000021e 	bne	r2,zero,8fac0 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
   8fab8:	00bffa84 	movi	r2,-22
   8fabc:	00000406 	br	8fad0 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
   8fac0:	e13ffd17 	ldw	r4,-12(fp)
   8fac4:	e17ffe17 	ldw	r5,-8(fp)
   8fac8:	e1bfff17 	ldw	r6,-4(fp)
   8facc:	008f65c0 	call	8f65c <alt_up_av_config_read_data>
}
   8fad0:	e037883a 	mov	sp,fp
   8fad4:	dfc00117 	ldw	ra,4(sp)
   8fad8:	df000017 	ldw	fp,0(sp)
   8fadc:	dec00204 	addi	sp,sp,8
   8fae0:	f800283a 	ret

0008fae4 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8fae4:	defffb04 	addi	sp,sp,-20
   8fae8:	dfc00415 	stw	ra,16(sp)
   8faec:	df000315 	stw	fp,12(sp)
   8faf0:	df000304 	addi	fp,sp,12
   8faf4:	e13ffd15 	stw	r4,-12(fp)
   8faf8:	e17ffe15 	stw	r5,-8(fp)
   8fafc:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   8fb00:	e0bffd17 	ldw	r2,-12(fp)
   8fb04:	10800b17 	ldw	r2,44(r2)
   8fb08:	10800220 	cmpeqi	r2,r2,8
   8fb0c:	1000021e 	bne	r2,zero,8fb18 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
   8fb10:	00bffa84 	movi	r2,-22
   8fb14:	00000406 	br	8fb28 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
   8fb18:	e13ffd17 	ldw	r4,-12(fp)
   8fb1c:	e17ffe17 	ldw	r5,-8(fp)
   8fb20:	e1bfff17 	ldw	r6,-4(fp)
   8fb24:	008f5f80 	call	8f5f8 <alt_up_av_config_write_data>
}
   8fb28:	e037883a 	mov	sp,fp
   8fb2c:	dfc00117 	ldw	ra,4(sp)
   8fb30:	df000017 	ldw	fp,0(sp)
   8fb34:	dec00204 	addi	sp,sp,8
   8fb38:	f800283a 	ret

0008fb3c <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   8fb3c:	defffb04 	addi	sp,sp,-20
   8fb40:	dfc00415 	stw	ra,16(sp)
   8fb44:	df000315 	stw	fp,12(sp)
   8fb48:	df000304 	addi	fp,sp,12
   8fb4c:	e13ffd15 	stw	r4,-12(fp)
   8fb50:	e17ffe15 	stw	r5,-8(fp)
   8fb54:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   8fb58:	e0bffd17 	ldw	r2,-12(fp)
   8fb5c:	10800b17 	ldw	r2,44(r2)
   8fb60:	10800260 	cmpeqi	r2,r2,9
   8fb64:	1000021e 	bne	r2,zero,8fb70 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
   8fb68:	00bffa84 	movi	r2,-22
   8fb6c:	00000406 	br	8fb80 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
   8fb70:	e13ffd17 	ldw	r4,-12(fp)
   8fb74:	e17ffe17 	ldw	r5,-8(fp)
   8fb78:	e1bfff17 	ldw	r6,-4(fp)
   8fb7c:	008f65c0 	call	8f65c <alt_up_av_config_read_data>
}
   8fb80:	e037883a 	mov	sp,fp
   8fb84:	dfc00117 	ldw	ra,4(sp)
   8fb88:	df000017 	ldw	fp,0(sp)
   8fb8c:	dec00204 	addi	sp,sp,8
   8fb90:	f800283a 	ret

0008fb94 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8fb94:	defffb04 	addi	sp,sp,-20
   8fb98:	dfc00415 	stw	ra,16(sp)
   8fb9c:	df000315 	stw	fp,12(sp)
   8fba0:	df000304 	addi	fp,sp,12
   8fba4:	e13ffd15 	stw	r4,-12(fp)
   8fba8:	e17ffe15 	stw	r5,-8(fp)
   8fbac:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   8fbb0:	e0bffd17 	ldw	r2,-12(fp)
   8fbb4:	10800b17 	ldw	r2,44(r2)
   8fbb8:	10800260 	cmpeqi	r2,r2,9
   8fbbc:	1000021e 	bne	r2,zero,8fbc8 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
   8fbc0:	00bffa84 	movi	r2,-22
   8fbc4:	00000406 	br	8fbd8 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
   8fbc8:	e13ffd17 	ldw	r4,-12(fp)
   8fbcc:	e17ffe17 	ldw	r5,-8(fp)
   8fbd0:	e1bfff17 	ldw	r6,-4(fp)
   8fbd4:	008f5f80 	call	8f5f8 <alt_up_av_config_write_data>
}
   8fbd8:	e037883a 	mov	sp,fp
   8fbdc:	dfc00117 	ldw	ra,4(sp)
   8fbe0:	df000017 	ldw	fp,0(sp)
   8fbe4:	dec00204 	addi	sp,sp,8
   8fbe8:	f800283a 	ret

0008fbec <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   8fbec:	defffb04 	addi	sp,sp,-20
   8fbf0:	dfc00415 	stw	ra,16(sp)
   8fbf4:	df000315 	stw	fp,12(sp)
   8fbf8:	df000304 	addi	fp,sp,12
   8fbfc:	e13ffd15 	stw	r4,-12(fp)
   8fc00:	e17ffe15 	stw	r5,-8(fp)
   8fc04:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   8fc08:	e0bffd17 	ldw	r2,-12(fp)
   8fc0c:	10800b17 	ldw	r2,44(r2)
   8fc10:	108002a0 	cmpeqi	r2,r2,10
   8fc14:	1000021e 	bne	r2,zero,8fc20 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
   8fc18:	00bffa84 	movi	r2,-22
   8fc1c:	00000406 	br	8fc30 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
   8fc20:	e13ffd17 	ldw	r4,-12(fp)
   8fc24:	e17ffe17 	ldw	r5,-8(fp)
   8fc28:	e1bfff17 	ldw	r6,-4(fp)
   8fc2c:	008f65c0 	call	8f65c <alt_up_av_config_read_data>
}
   8fc30:	e037883a 	mov	sp,fp
   8fc34:	dfc00117 	ldw	ra,4(sp)
   8fc38:	df000017 	ldw	fp,0(sp)
   8fc3c:	dec00204 	addi	sp,sp,8
   8fc40:	f800283a 	ret

0008fc44 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8fc44:	defffb04 	addi	sp,sp,-20
   8fc48:	dfc00415 	stw	ra,16(sp)
   8fc4c:	df000315 	stw	fp,12(sp)
   8fc50:	df000304 	addi	fp,sp,12
   8fc54:	e13ffd15 	stw	r4,-12(fp)
   8fc58:	e17ffe15 	stw	r5,-8(fp)
   8fc5c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   8fc60:	e0bffd17 	ldw	r2,-12(fp)
   8fc64:	10800b17 	ldw	r2,44(r2)
   8fc68:	108002a0 	cmpeqi	r2,r2,10
   8fc6c:	1000021e 	bne	r2,zero,8fc78 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
   8fc70:	00bffa84 	movi	r2,-22
   8fc74:	00000406 	br	8fc88 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
   8fc78:	e13ffd17 	ldw	r4,-12(fp)
   8fc7c:	e17ffe17 	ldw	r5,-8(fp)
   8fc80:	e1bfff17 	ldw	r6,-4(fp)
   8fc84:	008f5f80 	call	8f5f8 <alt_up_av_config_write_data>
}
   8fc88:	e037883a 	mov	sp,fp
   8fc8c:	dfc00117 	ldw	ra,4(sp)
   8fc90:	df000017 	ldw	fp,0(sp)
   8fc94:	dec00204 	addi	sp,sp,8
   8fc98:	f800283a 	ret

0008fc9c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8fc9c:	defff504 	addi	sp,sp,-44
   8fca0:	df000a15 	stw	fp,40(sp)
   8fca4:	df000a04 	addi	fp,sp,40
   8fca8:	e13ffc15 	stw	r4,-16(fp)
   8fcac:	e17ffd15 	stw	r5,-12(fp)
   8fcb0:	e1bffe15 	stw	r6,-8(fp)
   8fcb4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8fcb8:	e03ff615 	stw	zero,-40(fp)
   8fcbc:	00800274 	movhi	r2,9
   8fcc0:	10923c04 	addi	r2,r2,18672
   8fcc4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8fcc8:	10003f26 	beq	r2,zero,8fdc8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   8fccc:	e0bffc17 	ldw	r2,-16(fp)
   8fcd0:	10003b26 	beq	r2,zero,8fdc0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   8fcd4:	e0bffc17 	ldw	r2,-16(fp)
   8fcd8:	e0fffe17 	ldw	r3,-8(fp)
   8fcdc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8fce0:	e0bffc17 	ldw	r2,-16(fp)
   8fce4:	e0ffff17 	ldw	r3,-4(fp)
   8fce8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fcec:	0005303a 	rdctl	r2,status
   8fcf0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fcf4:	e0fff817 	ldw	r3,-32(fp)
   8fcf8:	00bfff84 	movi	r2,-2
   8fcfc:	1884703a 	and	r2,r3,r2
   8fd00:	1001703a 	wrctl	status,r2
  
  return context;
   8fd04:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8fd08:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8fd0c:	00800274 	movhi	r2,9
   8fd10:	10923d04 	addi	r2,r2,18676
   8fd14:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8fd18:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8fd1c:	e0fffd17 	ldw	r3,-12(fp)
   8fd20:	e0bff617 	ldw	r2,-40(fp)
   8fd24:	1885883a 	add	r2,r3,r2
   8fd28:	10c00044 	addi	r3,r2,1
   8fd2c:	e0bffc17 	ldw	r2,-16(fp)
   8fd30:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8fd34:	e0bffc17 	ldw	r2,-16(fp)
   8fd38:	10c00217 	ldw	r3,8(r2)
   8fd3c:	e0bff617 	ldw	r2,-40(fp)
   8fd40:	1880042e 	bgeu	r3,r2,8fd54 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   8fd44:	e0bffc17 	ldw	r2,-16(fp)
   8fd48:	00c00044 	movi	r3,1
   8fd4c:	10c00405 	stb	r3,16(r2)
   8fd50:	00000206 	br	8fd5c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   8fd54:	e0bffc17 	ldw	r2,-16(fp)
   8fd58:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8fd5c:	e0fffc17 	ldw	r3,-16(fp)
   8fd60:	00800274 	movhi	r2,9
   8fd64:	108b5404 	addi	r2,r2,11600
   8fd68:	e0bff915 	stw	r2,-28(fp)
   8fd6c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8fd70:	e0bffa17 	ldw	r2,-24(fp)
   8fd74:	e0fff917 	ldw	r3,-28(fp)
   8fd78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8fd7c:	e0bff917 	ldw	r2,-28(fp)
   8fd80:	10c00017 	ldw	r3,0(r2)
   8fd84:	e0bffa17 	ldw	r2,-24(fp)
   8fd88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8fd8c:	e0bff917 	ldw	r2,-28(fp)
   8fd90:	10800017 	ldw	r2,0(r2)
   8fd94:	e0fffa17 	ldw	r3,-24(fp)
   8fd98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8fd9c:	e0bff917 	ldw	r2,-28(fp)
   8fda0:	e0fffa17 	ldw	r3,-24(fp)
   8fda4:	10c00015 	stw	r3,0(r2)
   8fda8:	e0bff717 	ldw	r2,-36(fp)
   8fdac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fdb0:	e0bffb17 	ldw	r2,-20(fp)
   8fdb4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8fdb8:	0005883a 	mov	r2,zero
   8fdbc:	00000306 	br	8fdcc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   8fdc0:	00bffa84 	movi	r2,-22
   8fdc4:	00000106 	br	8fdcc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   8fdc8:	00bfde84 	movi	r2,-134
  }
}
   8fdcc:	e037883a 	mov	sp,fp
   8fdd0:	df000017 	ldw	fp,0(sp)
   8fdd4:	dec00104 	addi	sp,sp,4
   8fdd8:	f800283a 	ret

0008fddc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8fddc:	deffff04 	addi	sp,sp,-4
   8fde0:	df000015 	stw	fp,0(sp)
   8fde4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8fde8:	e037883a 	mov	sp,fp
   8fdec:	df000017 	ldw	fp,0(sp)
   8fdf0:	dec00104 	addi	sp,sp,4
   8fdf4:	f800283a 	ret

0008fdf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8fdf8:	defffe04 	addi	sp,sp,-8
   8fdfc:	dfc00115 	stw	ra,4(sp)
   8fe00:	df000015 	stw	fp,0(sp)
   8fe04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8fe08:	00800274 	movhi	r2,9
   8fe0c:	108b5104 	addi	r2,r2,11588
   8fe10:	10800017 	ldw	r2,0(r2)
   8fe14:	10000526 	beq	r2,zero,8fe2c <alt_get_errno+0x34>
   8fe18:	00800274 	movhi	r2,9
   8fe1c:	108b5104 	addi	r2,r2,11588
   8fe20:	10800017 	ldw	r2,0(r2)
   8fe24:	103ee83a 	callr	r2
   8fe28:	00000206 	br	8fe34 <alt_get_errno+0x3c>
   8fe2c:	00800274 	movhi	r2,9
   8fe30:	10923704 	addi	r2,r2,18652
}
   8fe34:	e037883a 	mov	sp,fp
   8fe38:	dfc00117 	ldw	ra,4(sp)
   8fe3c:	df000017 	ldw	fp,0(sp)
   8fe40:	dec00204 	addi	sp,sp,8
   8fe44:	f800283a 	ret

0008fe48 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8fe48:	defffa04 	addi	sp,sp,-24
   8fe4c:	dfc00515 	stw	ra,20(sp)
   8fe50:	df000415 	stw	fp,16(sp)
   8fe54:	df000404 	addi	fp,sp,16
   8fe58:	e13ffe15 	stw	r4,-8(fp)
   8fe5c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8fe60:	e0bffe17 	ldw	r2,-8(fp)
   8fe64:	10000326 	beq	r2,zero,8fe74 <alt_dev_llist_insert+0x2c>
   8fe68:	e0bffe17 	ldw	r2,-8(fp)
   8fe6c:	10800217 	ldw	r2,8(r2)
   8fe70:	1000061e 	bne	r2,zero,8fe8c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   8fe74:	008fdf80 	call	8fdf8 <alt_get_errno>
   8fe78:	1007883a 	mov	r3,r2
   8fe7c:	00800584 	movi	r2,22
   8fe80:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8fe84:	00bffa84 	movi	r2,-22
   8fe88:	00001306 	br	8fed8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8fe8c:	e0bffe17 	ldw	r2,-8(fp)
   8fe90:	e0ffff17 	ldw	r3,-4(fp)
   8fe94:	e0fffc15 	stw	r3,-16(fp)
   8fe98:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8fe9c:	e0bffd17 	ldw	r2,-12(fp)
   8fea0:	e0fffc17 	ldw	r3,-16(fp)
   8fea4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8fea8:	e0bffc17 	ldw	r2,-16(fp)
   8feac:	10c00017 	ldw	r3,0(r2)
   8feb0:	e0bffd17 	ldw	r2,-12(fp)
   8feb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8feb8:	e0bffc17 	ldw	r2,-16(fp)
   8febc:	10800017 	ldw	r2,0(r2)
   8fec0:	e0fffd17 	ldw	r3,-12(fp)
   8fec4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8fec8:	e0bffc17 	ldw	r2,-16(fp)
   8fecc:	e0fffd17 	ldw	r3,-12(fp)
   8fed0:	10c00015 	stw	r3,0(r2)

  return 0;  
   8fed4:	0005883a 	mov	r2,zero
}
   8fed8:	e037883a 	mov	sp,fp
   8fedc:	dfc00117 	ldw	ra,4(sp)
   8fee0:	df000017 	ldw	fp,0(sp)
   8fee4:	dec00204 	addi	sp,sp,8
   8fee8:	f800283a 	ret

0008feec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8feec:	defffd04 	addi	sp,sp,-12
   8fef0:	dfc00215 	stw	ra,8(sp)
   8fef4:	df000115 	stw	fp,4(sp)
   8fef8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8fefc:	00800274 	movhi	r2,9
   8ff00:	10837704 	addi	r2,r2,3548
   8ff04:	e0bfff15 	stw	r2,-4(fp)
   8ff08:	00000606 	br	8ff24 <_do_ctors+0x38>
        (*ctor) (); 
   8ff0c:	e0bfff17 	ldw	r2,-4(fp)
   8ff10:	10800017 	ldw	r2,0(r2)
   8ff14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8ff18:	e0bfff17 	ldw	r2,-4(fp)
   8ff1c:	10bfff04 	addi	r2,r2,-4
   8ff20:	e0bfff15 	stw	r2,-4(fp)
   8ff24:	e0ffff17 	ldw	r3,-4(fp)
   8ff28:	00800274 	movhi	r2,9
   8ff2c:	10837804 	addi	r2,r2,3552
   8ff30:	18bff62e 	bgeu	r3,r2,8ff0c <__alt_data_end+0xfffc6b2c>
        (*ctor) (); 
}
   8ff34:	e037883a 	mov	sp,fp
   8ff38:	dfc00117 	ldw	ra,4(sp)
   8ff3c:	df000017 	ldw	fp,0(sp)
   8ff40:	dec00204 	addi	sp,sp,8
   8ff44:	f800283a 	ret

0008ff48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8ff48:	defffd04 	addi	sp,sp,-12
   8ff4c:	dfc00215 	stw	ra,8(sp)
   8ff50:	df000115 	stw	fp,4(sp)
   8ff54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8ff58:	00800274 	movhi	r2,9
   8ff5c:	10837704 	addi	r2,r2,3548
   8ff60:	e0bfff15 	stw	r2,-4(fp)
   8ff64:	00000606 	br	8ff80 <_do_dtors+0x38>
        (*dtor) (); 
   8ff68:	e0bfff17 	ldw	r2,-4(fp)
   8ff6c:	10800017 	ldw	r2,0(r2)
   8ff70:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8ff74:	e0bfff17 	ldw	r2,-4(fp)
   8ff78:	10bfff04 	addi	r2,r2,-4
   8ff7c:	e0bfff15 	stw	r2,-4(fp)
   8ff80:	e0ffff17 	ldw	r3,-4(fp)
   8ff84:	00800274 	movhi	r2,9
   8ff88:	10837804 	addi	r2,r2,3552
   8ff8c:	18bff62e 	bgeu	r3,r2,8ff68 <__alt_data_end+0xfffc6b88>
        (*dtor) (); 
}
   8ff90:	e037883a 	mov	sp,fp
   8ff94:	dfc00117 	ldw	ra,4(sp)
   8ff98:	df000017 	ldw	fp,0(sp)
   8ff9c:	dec00204 	addi	sp,sp,8
   8ffa0:	f800283a 	ret

0008ffa4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8ffa4:	defffa04 	addi	sp,sp,-24
   8ffa8:	dfc00515 	stw	ra,20(sp)
   8ffac:	df000415 	stw	fp,16(sp)
   8ffb0:	df000404 	addi	fp,sp,16
   8ffb4:	e13ffe15 	stw	r4,-8(fp)
   8ffb8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8ffbc:	e0bfff17 	ldw	r2,-4(fp)
   8ffc0:	10800017 	ldw	r2,0(r2)
   8ffc4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8ffc8:	e13ffe17 	ldw	r4,-8(fp)
   8ffcc:	00812200 	call	81220 <strlen>
   8ffd0:	10800044 	addi	r2,r2,1
   8ffd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8ffd8:	00000d06 	br	90010 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8ffdc:	e0bffc17 	ldw	r2,-16(fp)
   8ffe0:	10c00217 	ldw	r3,8(r2)
   8ffe4:	e0bffd17 	ldw	r2,-12(fp)
   8ffe8:	1809883a 	mov	r4,r3
   8ffec:	e17ffe17 	ldw	r5,-8(fp)
   8fff0:	100d883a 	mov	r6,r2
   8fff4:	0090a880 	call	90a88 <memcmp>
   8fff8:	1000021e 	bne	r2,zero,90004 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8fffc:	e0bffc17 	ldw	r2,-16(fp)
   90000:	00000706 	br	90020 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   90004:	e0bffc17 	ldw	r2,-16(fp)
   90008:	10800017 	ldw	r2,0(r2)
   9000c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90010:	e0fffc17 	ldw	r3,-16(fp)
   90014:	e0bfff17 	ldw	r2,-4(fp)
   90018:	18bff01e 	bne	r3,r2,8ffdc <__alt_data_end+0xfffc6bfc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9001c:	0005883a 	mov	r2,zero
}
   90020:	e037883a 	mov	sp,fp
   90024:	dfc00117 	ldw	ra,4(sp)
   90028:	df000017 	ldw	fp,0(sp)
   9002c:	dec00204 	addi	sp,sp,8
   90030:	f800283a 	ret

00090034 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   90034:	deffff04 	addi	sp,sp,-4
   90038:	df000015 	stw	fp,0(sp)
   9003c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   90040:	e037883a 	mov	sp,fp
   90044:	df000017 	ldw	fp,0(sp)
   90048:	dec00104 	addi	sp,sp,4
   9004c:	f800283a 	ret

00090050 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   90050:	defff804 	addi	sp,sp,-32
   90054:	dfc00715 	stw	ra,28(sp)
   90058:	df000615 	stw	fp,24(sp)
   9005c:	dc000515 	stw	r16,20(sp)
   90060:	df000604 	addi	fp,sp,24
   90064:	e13ffb15 	stw	r4,-20(fp)
   90068:	e17ffc15 	stw	r5,-16(fp)
   9006c:	e1bffd15 	stw	r6,-12(fp)
   90070:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   90074:	e13ffc17 	ldw	r4,-16(fp)
   90078:	e17ffd17 	ldw	r5,-12(fp)
   9007c:	e1bffe17 	ldw	r6,-8(fp)
   90080:	009049c0 	call	9049c <open>
   90084:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   90088:	e0bffa17 	ldw	r2,-24(fp)
   9008c:	10002216 	blt	r2,zero,90118 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   90090:	04000274 	movhi	r16,9
   90094:	8406b404 	addi	r16,r16,6864
   90098:	e0bffa17 	ldw	r2,-24(fp)
   9009c:	1009883a 	mov	r4,r2
   900a0:	01400304 	movi	r5,12
   900a4:	008b0d80 	call	8b0d8 <__mulsi3>
   900a8:	8085883a 	add	r2,r16,r2
   900ac:	10c00017 	ldw	r3,0(r2)
   900b0:	e0bffb17 	ldw	r2,-20(fp)
   900b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   900b8:	04000274 	movhi	r16,9
   900bc:	8406b404 	addi	r16,r16,6864
   900c0:	e0bffa17 	ldw	r2,-24(fp)
   900c4:	1009883a 	mov	r4,r2
   900c8:	01400304 	movi	r5,12
   900cc:	008b0d80 	call	8b0d8 <__mulsi3>
   900d0:	10800104 	addi	r2,r2,4
   900d4:	8085883a 	add	r2,r16,r2
   900d8:	10c00017 	ldw	r3,0(r2)
   900dc:	e0bffb17 	ldw	r2,-20(fp)
   900e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   900e4:	04000274 	movhi	r16,9
   900e8:	8406b404 	addi	r16,r16,6864
   900ec:	e0bffa17 	ldw	r2,-24(fp)
   900f0:	1009883a 	mov	r4,r2
   900f4:	01400304 	movi	r5,12
   900f8:	008b0d80 	call	8b0d8 <__mulsi3>
   900fc:	10800204 	addi	r2,r2,8
   90100:	8085883a 	add	r2,r16,r2
   90104:	10c00017 	ldw	r3,0(r2)
   90108:	e0bffb17 	ldw	r2,-20(fp)
   9010c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   90110:	e13ffa17 	ldw	r4,-24(fp)
   90114:	008e0700 	call	8e070 <alt_release_fd>
  }
} 
   90118:	e6ffff04 	addi	sp,fp,-4
   9011c:	dfc00217 	ldw	ra,8(sp)
   90120:	df000117 	ldw	fp,4(sp)
   90124:	dc000017 	ldw	r16,0(sp)
   90128:	dec00304 	addi	sp,sp,12
   9012c:	f800283a 	ret

00090130 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   90130:	defffb04 	addi	sp,sp,-20
   90134:	dfc00415 	stw	ra,16(sp)
   90138:	df000315 	stw	fp,12(sp)
   9013c:	df000304 	addi	fp,sp,12
   90140:	e13ffd15 	stw	r4,-12(fp)
   90144:	e17ffe15 	stw	r5,-8(fp)
   90148:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9014c:	01000274 	movhi	r4,9
   90150:	2106b704 	addi	r4,r4,6876
   90154:	e17ffd17 	ldw	r5,-12(fp)
   90158:	01800044 	movi	r6,1
   9015c:	01c07fc4 	movi	r7,511
   90160:	00900500 	call	90050 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   90164:	01000274 	movhi	r4,9
   90168:	2106b404 	addi	r4,r4,6864
   9016c:	e17ffe17 	ldw	r5,-8(fp)
   90170:	000d883a 	mov	r6,zero
   90174:	01c07fc4 	movi	r7,511
   90178:	00900500 	call	90050 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   9017c:	01000274 	movhi	r4,9
   90180:	2106ba04 	addi	r4,r4,6888
   90184:	e17fff17 	ldw	r5,-4(fp)
   90188:	01800044 	movi	r6,1
   9018c:	01c07fc4 	movi	r7,511
   90190:	00900500 	call	90050 <alt_open_fd>
}  
   90194:	e037883a 	mov	sp,fp
   90198:	dfc00117 	ldw	ra,4(sp)
   9019c:	df000017 	ldw	fp,0(sp)
   901a0:	dec00204 	addi	sp,sp,8
   901a4:	f800283a 	ret

000901a8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   901a8:	defff004 	addi	sp,sp,-64
   901ac:	df000f15 	stw	fp,60(sp)
   901b0:	df000f04 	addi	fp,sp,60
   901b4:	e13ffd15 	stw	r4,-12(fp)
   901b8:	e17ffe15 	stw	r5,-8(fp)
   901bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   901c0:	00bffa84 	movi	r2,-22
   901c4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   901c8:	e0bffd17 	ldw	r2,-12(fp)
   901cc:	10800828 	cmpgeui	r2,r2,32
   901d0:	10005c1e 	bne	r2,zero,90344 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   901d4:	0005303a 	rdctl	r2,status
   901d8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   901dc:	e0fff317 	ldw	r3,-52(fp)
   901e0:	00bfff84 	movi	r2,-2
   901e4:	1884703a 	and	r2,r3,r2
   901e8:	1001703a 	wrctl	status,r2
  
  return context;
   901ec:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   901f0:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   901f4:	008002b4 	movhi	r2,10
   901f8:	10924904 	addi	r2,r2,18724
   901fc:	e0fffd17 	ldw	r3,-12(fp)
   90200:	180690fa 	slli	r3,r3,3
   90204:	10c5883a 	add	r2,r2,r3
   90208:	e0ffff17 	ldw	r3,-4(fp)
   9020c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   90210:	008002b4 	movhi	r2,10
   90214:	10924904 	addi	r2,r2,18724
   90218:	e0fffd17 	ldw	r3,-12(fp)
   9021c:	180690fa 	slli	r3,r3,3
   90220:	18c00104 	addi	r3,r3,4
   90224:	10c5883a 	add	r2,r2,r3
   90228:	e0fffe17 	ldw	r3,-8(fp)
   9022c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   90230:	e0bfff17 	ldw	r2,-4(fp)
   90234:	10001f26 	beq	r2,zero,902b4 <alt_irq_register+0x10c>
   90238:	e0bffd17 	ldw	r2,-12(fp)
   9023c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90240:	0005303a 	rdctl	r2,status
   90244:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90248:	e0fff517 	ldw	r3,-44(fp)
   9024c:	00bfff84 	movi	r2,-2
   90250:	1884703a 	and	r2,r3,r2
   90254:	1001703a 	wrctl	status,r2
  
  return context;
   90258:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9025c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   90260:	e0bff417 	ldw	r2,-48(fp)
   90264:	00c00044 	movi	r3,1
   90268:	1884983a 	sll	r2,r3,r2
   9026c:	1007883a 	mov	r3,r2
   90270:	00800274 	movhi	r2,9
   90274:	10923b04 	addi	r2,r2,18668
   90278:	10800017 	ldw	r2,0(r2)
   9027c:	1886b03a 	or	r3,r3,r2
   90280:	00800274 	movhi	r2,9
   90284:	10923b04 	addi	r2,r2,18668
   90288:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9028c:	00800274 	movhi	r2,9
   90290:	10923b04 	addi	r2,r2,18668
   90294:	10800017 	ldw	r2,0(r2)
   90298:	100170fa 	wrctl	ienable,r2
   9029c:	e0bff617 	ldw	r2,-40(fp)
   902a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   902a4:	e0bff717 	ldw	r2,-36(fp)
   902a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   902ac:	0005883a 	mov	r2,zero
   902b0:	00001f06 	br	90330 <alt_irq_register+0x188>
   902b4:	e0bffd17 	ldw	r2,-12(fp)
   902b8:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   902bc:	0005303a 	rdctl	r2,status
   902c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   902c4:	e0fff917 	ldw	r3,-28(fp)
   902c8:	00bfff84 	movi	r2,-2
   902cc:	1884703a 	and	r2,r3,r2
   902d0:	1001703a 	wrctl	status,r2
  
  return context;
   902d4:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   902d8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   902dc:	e0bff817 	ldw	r2,-32(fp)
   902e0:	00c00044 	movi	r3,1
   902e4:	1884983a 	sll	r2,r3,r2
   902e8:	0084303a 	nor	r2,zero,r2
   902ec:	1007883a 	mov	r3,r2
   902f0:	00800274 	movhi	r2,9
   902f4:	10923b04 	addi	r2,r2,18668
   902f8:	10800017 	ldw	r2,0(r2)
   902fc:	1886703a 	and	r3,r3,r2
   90300:	00800274 	movhi	r2,9
   90304:	10923b04 	addi	r2,r2,18668
   90308:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9030c:	00800274 	movhi	r2,9
   90310:	10923b04 	addi	r2,r2,18668
   90314:	10800017 	ldw	r2,0(r2)
   90318:	100170fa 	wrctl	ienable,r2
   9031c:	e0bffa17 	ldw	r2,-24(fp)
   90320:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90324:	e0bffb17 	ldw	r2,-20(fp)
   90328:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9032c:	0005883a 	mov	r2,zero
   90330:	e0bff115 	stw	r2,-60(fp)
   90334:	e0bff217 	ldw	r2,-56(fp)
   90338:	e0bffc15 	stw	r2,-16(fp)
   9033c:	e0bffc17 	ldw	r2,-16(fp)
   90340:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   90344:	e0bff117 	ldw	r2,-60(fp)
}
   90348:	e037883a 	mov	sp,fp
   9034c:	df000017 	ldw	fp,0(sp)
   90350:	dec00104 	addi	sp,sp,4
   90354:	f800283a 	ret

00090358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90358:	defffe04 	addi	sp,sp,-8
   9035c:	dfc00115 	stw	ra,4(sp)
   90360:	df000015 	stw	fp,0(sp)
   90364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   90368:	00800274 	movhi	r2,9
   9036c:	108b5104 	addi	r2,r2,11588
   90370:	10800017 	ldw	r2,0(r2)
   90374:	10000526 	beq	r2,zero,9038c <alt_get_errno+0x34>
   90378:	00800274 	movhi	r2,9
   9037c:	108b5104 	addi	r2,r2,11588
   90380:	10800017 	ldw	r2,0(r2)
   90384:	103ee83a 	callr	r2
   90388:	00000206 	br	90394 <alt_get_errno+0x3c>
   9038c:	00800274 	movhi	r2,9
   90390:	10923704 	addi	r2,r2,18652
}
   90394:	e037883a 	mov	sp,fp
   90398:	dfc00117 	ldw	ra,4(sp)
   9039c:	df000017 	ldw	fp,0(sp)
   903a0:	dec00204 	addi	sp,sp,8
   903a4:	f800283a 	ret

000903a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   903a8:	defffb04 	addi	sp,sp,-20
   903ac:	dfc00415 	stw	ra,16(sp)
   903b0:	df000315 	stw	fp,12(sp)
   903b4:	dc000215 	stw	r16,8(sp)
   903b8:	df000304 	addi	fp,sp,12
   903bc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   903c0:	e0bffe17 	ldw	r2,-8(fp)
   903c4:	10800217 	ldw	r2,8(r2)
   903c8:	10d00034 	orhi	r3,r2,16384
   903cc:	e0bffe17 	ldw	r2,-8(fp)
   903d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   903d4:	e03ffd15 	stw	zero,-12(fp)
   903d8:	00002306 	br	90468 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   903dc:	04000274 	movhi	r16,9
   903e0:	8406b404 	addi	r16,r16,6864
   903e4:	e0bffd17 	ldw	r2,-12(fp)
   903e8:	1009883a 	mov	r4,r2
   903ec:	01400304 	movi	r5,12
   903f0:	008b0d80 	call	8b0d8 <__mulsi3>
   903f4:	8085883a 	add	r2,r16,r2
   903f8:	10c00017 	ldw	r3,0(r2)
   903fc:	e0bffe17 	ldw	r2,-8(fp)
   90400:	10800017 	ldw	r2,0(r2)
   90404:	1880151e 	bne	r3,r2,9045c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   90408:	04000274 	movhi	r16,9
   9040c:	8406b404 	addi	r16,r16,6864
   90410:	e0bffd17 	ldw	r2,-12(fp)
   90414:	1009883a 	mov	r4,r2
   90418:	01400304 	movi	r5,12
   9041c:	008b0d80 	call	8b0d8 <__mulsi3>
   90420:	10800204 	addi	r2,r2,8
   90424:	8085883a 	add	r2,r16,r2
   90428:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9042c:	10000b0e 	bge	r2,zero,9045c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   90430:	e13ffd17 	ldw	r4,-12(fp)
   90434:	01400304 	movi	r5,12
   90438:	008b0d80 	call	8b0d8 <__mulsi3>
   9043c:	1007883a 	mov	r3,r2
   90440:	00800274 	movhi	r2,9
   90444:	1086b404 	addi	r2,r2,6864
   90448:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9044c:	e0bffe17 	ldw	r2,-8(fp)
   90450:	18800226 	beq	r3,r2,9045c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   90454:	00bffcc4 	movi	r2,-13
   90458:	00000a06 	br	90484 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9045c:	e0bffd17 	ldw	r2,-12(fp)
   90460:	10800044 	addi	r2,r2,1
   90464:	e0bffd15 	stw	r2,-12(fp)
   90468:	00800274 	movhi	r2,9
   9046c:	108b5004 	addi	r2,r2,11584
   90470:	10800017 	ldw	r2,0(r2)
   90474:	1007883a 	mov	r3,r2
   90478:	e0bffd17 	ldw	r2,-12(fp)
   9047c:	18bfd72e 	bgeu	r3,r2,903dc <__alt_data_end+0xfffc6ffc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   90480:	0005883a 	mov	r2,zero
}
   90484:	e6ffff04 	addi	sp,fp,-4
   90488:	dfc00217 	ldw	ra,8(sp)
   9048c:	df000117 	ldw	fp,4(sp)
   90490:	dc000017 	ldw	r16,0(sp)
   90494:	dec00304 	addi	sp,sp,12
   90498:	f800283a 	ret

0009049c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   9049c:	defff604 	addi	sp,sp,-40
   904a0:	dfc00915 	stw	ra,36(sp)
   904a4:	df000815 	stw	fp,32(sp)
   904a8:	df000804 	addi	fp,sp,32
   904ac:	e13ffd15 	stw	r4,-12(fp)
   904b0:	e17ffe15 	stw	r5,-8(fp)
   904b4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   904b8:	00bfffc4 	movi	r2,-1
   904bc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   904c0:	00bffb44 	movi	r2,-19
   904c4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   904c8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   904cc:	e13ffd17 	ldw	r4,-12(fp)
   904d0:	01400274 	movhi	r5,9
   904d4:	294b4e04 	addi	r5,r5,11576
   904d8:	008ffa40 	call	8ffa4 <alt_find_dev>
   904dc:	e0bff815 	stw	r2,-32(fp)
   904e0:	e0bff817 	ldw	r2,-32(fp)
   904e4:	1000051e 	bne	r2,zero,904fc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   904e8:	e13ffd17 	ldw	r4,-12(fp)
   904ec:	00907b80 	call	907b8 <alt_find_file>
   904f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   904f4:	00800044 	movi	r2,1
   904f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   904fc:	e0bff817 	ldw	r2,-32(fp)
   90500:	10002b26 	beq	r2,zero,905b0 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   90504:	e13ff817 	ldw	r4,-32(fp)
   90508:	00908cc0 	call	908cc <alt_get_fd>
   9050c:	e0bff915 	stw	r2,-28(fp)
   90510:	e0bff917 	ldw	r2,-28(fp)
   90514:	1000030e 	bge	r2,zero,90524 <open+0x88>
    {
      status = index;
   90518:	e0bff917 	ldw	r2,-28(fp)
   9051c:	e0bffa15 	stw	r2,-24(fp)
   90520:	00002506 	br	905b8 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   90524:	e13ff917 	ldw	r4,-28(fp)
   90528:	01400304 	movi	r5,12
   9052c:	008b0d80 	call	8b0d8 <__mulsi3>
   90530:	1007883a 	mov	r3,r2
   90534:	00800274 	movhi	r2,9
   90538:	1086b404 	addi	r2,r2,6864
   9053c:	1885883a 	add	r2,r3,r2
   90540:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   90544:	e0fffe17 	ldw	r3,-8(fp)
   90548:	00900034 	movhi	r2,16384
   9054c:	10bfffc4 	addi	r2,r2,-1
   90550:	1886703a 	and	r3,r3,r2
   90554:	e0bffc17 	ldw	r2,-16(fp)
   90558:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   9055c:	e0bffb17 	ldw	r2,-20(fp)
   90560:	1000051e 	bne	r2,zero,90578 <open+0xdc>
   90564:	e13ffc17 	ldw	r4,-16(fp)
   90568:	00903a80 	call	903a8 <alt_file_locked>
   9056c:	e0bffa15 	stw	r2,-24(fp)
   90570:	e0bffa17 	ldw	r2,-24(fp)
   90574:	10001016 	blt	r2,zero,905b8 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   90578:	e0bff817 	ldw	r2,-32(fp)
   9057c:	10800317 	ldw	r2,12(r2)
   90580:	10000826 	beq	r2,zero,905a4 <open+0x108>
   90584:	e0bff817 	ldw	r2,-32(fp)
   90588:	10800317 	ldw	r2,12(r2)
   9058c:	e13ffc17 	ldw	r4,-16(fp)
   90590:	e17ffd17 	ldw	r5,-12(fp)
   90594:	e1bffe17 	ldw	r6,-8(fp)
   90598:	e1ffff17 	ldw	r7,-4(fp)
   9059c:	103ee83a 	callr	r2
   905a0:	00000106 	br	905a8 <open+0x10c>
   905a4:	0005883a 	mov	r2,zero
   905a8:	e0bffa15 	stw	r2,-24(fp)
   905ac:	00000206 	br	905b8 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   905b0:	00bffb44 	movi	r2,-19
   905b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   905b8:	e0bffa17 	ldw	r2,-24(fp)
   905bc:	1000090e 	bge	r2,zero,905e4 <open+0x148>
  {
    alt_release_fd (index);  
   905c0:	e13ff917 	ldw	r4,-28(fp)
   905c4:	008e0700 	call	8e070 <alt_release_fd>
    ALT_ERRNO = -status;
   905c8:	00903580 	call	90358 <alt_get_errno>
   905cc:	1007883a 	mov	r3,r2
   905d0:	e0bffa17 	ldw	r2,-24(fp)
   905d4:	0085c83a 	sub	r2,zero,r2
   905d8:	18800015 	stw	r2,0(r3)
    return -1;
   905dc:	00bfffc4 	movi	r2,-1
   905e0:	00000106 	br	905e8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   905e4:	e0bff917 	ldw	r2,-28(fp)
}
   905e8:	e037883a 	mov	sp,fp
   905ec:	dfc00117 	ldw	ra,4(sp)
   905f0:	df000017 	ldw	fp,0(sp)
   905f4:	dec00204 	addi	sp,sp,8
   905f8:	f800283a 	ret

000905fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   905fc:	defffa04 	addi	sp,sp,-24
   90600:	df000515 	stw	fp,20(sp)
   90604:	df000504 	addi	fp,sp,20
   90608:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9060c:	0005303a 	rdctl	r2,status
   90610:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90614:	e0fffc17 	ldw	r3,-16(fp)
   90618:	00bfff84 	movi	r2,-2
   9061c:	1884703a 	and	r2,r3,r2
   90620:	1001703a 	wrctl	status,r2
  
  return context;
   90624:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   90628:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   9062c:	e0bfff17 	ldw	r2,-4(fp)
   90630:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   90634:	e0bffd17 	ldw	r2,-12(fp)
   90638:	10800017 	ldw	r2,0(r2)
   9063c:	e0fffd17 	ldw	r3,-12(fp)
   90640:	18c00117 	ldw	r3,4(r3)
   90644:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   90648:	e0bffd17 	ldw	r2,-12(fp)
   9064c:	10800117 	ldw	r2,4(r2)
   90650:	e0fffd17 	ldw	r3,-12(fp)
   90654:	18c00017 	ldw	r3,0(r3)
   90658:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   9065c:	e0bffd17 	ldw	r2,-12(fp)
   90660:	e0fffd17 	ldw	r3,-12(fp)
   90664:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   90668:	e0bffd17 	ldw	r2,-12(fp)
   9066c:	e0fffd17 	ldw	r3,-12(fp)
   90670:	10c00015 	stw	r3,0(r2)
   90674:	e0bffb17 	ldw	r2,-20(fp)
   90678:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9067c:	e0bffe17 	ldw	r2,-8(fp)
   90680:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   90684:	e037883a 	mov	sp,fp
   90688:	df000017 	ldw	fp,0(sp)
   9068c:	dec00104 	addi	sp,sp,4
   90690:	f800283a 	ret

00090694 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   90694:	defffb04 	addi	sp,sp,-20
   90698:	dfc00415 	stw	ra,16(sp)
   9069c:	df000315 	stw	fp,12(sp)
   906a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   906a4:	d0a01017 	ldw	r2,-32704(gp)
   906a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   906ac:	d0a6f917 	ldw	r2,-25628(gp)
   906b0:	10800044 	addi	r2,r2,1
   906b4:	d0a6f915 	stw	r2,-25628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   906b8:	00002e06 	br	90774 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   906bc:	e0bffd17 	ldw	r2,-12(fp)
   906c0:	10800017 	ldw	r2,0(r2)
   906c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   906c8:	e0bffd17 	ldw	r2,-12(fp)
   906cc:	10800403 	ldbu	r2,16(r2)
   906d0:	10803fcc 	andi	r2,r2,255
   906d4:	10000426 	beq	r2,zero,906e8 <alt_tick+0x54>
   906d8:	d0a6f917 	ldw	r2,-25628(gp)
   906dc:	1000021e 	bne	r2,zero,906e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   906e0:	e0bffd17 	ldw	r2,-12(fp)
   906e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   906e8:	e0bffd17 	ldw	r2,-12(fp)
   906ec:	10800217 	ldw	r2,8(r2)
   906f0:	d0e6f917 	ldw	r3,-25628(gp)
   906f4:	18801d36 	bltu	r3,r2,9076c <alt_tick+0xd8>
   906f8:	e0bffd17 	ldw	r2,-12(fp)
   906fc:	10800403 	ldbu	r2,16(r2)
   90700:	10803fcc 	andi	r2,r2,255
   90704:	1000191e 	bne	r2,zero,9076c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   90708:	e0bffd17 	ldw	r2,-12(fp)
   9070c:	10800317 	ldw	r2,12(r2)
   90710:	e0fffd17 	ldw	r3,-12(fp)
   90714:	18c00517 	ldw	r3,20(r3)
   90718:	1809883a 	mov	r4,r3
   9071c:	103ee83a 	callr	r2
   90720:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   90724:	e0bfff17 	ldw	r2,-4(fp)
   90728:	1000031e 	bne	r2,zero,90738 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   9072c:	e13ffd17 	ldw	r4,-12(fp)
   90730:	00905fc0 	call	905fc <alt_alarm_stop>
   90734:	00000d06 	br	9076c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   90738:	e0bffd17 	ldw	r2,-12(fp)
   9073c:	10c00217 	ldw	r3,8(r2)
   90740:	e0bfff17 	ldw	r2,-4(fp)
   90744:	1887883a 	add	r3,r3,r2
   90748:	e0bffd17 	ldw	r2,-12(fp)
   9074c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   90750:	e0bffd17 	ldw	r2,-12(fp)
   90754:	10c00217 	ldw	r3,8(r2)
   90758:	d0a6f917 	ldw	r2,-25628(gp)
   9075c:	1880032e 	bgeu	r3,r2,9076c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   90760:	e0bffd17 	ldw	r2,-12(fp)
   90764:	00c00044 	movi	r3,1
   90768:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   9076c:	e0bffe17 	ldw	r2,-8(fp)
   90770:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   90774:	e0fffd17 	ldw	r3,-12(fp)
   90778:	d0a01004 	addi	r2,gp,-32704
   9077c:	18bfcf1e 	bne	r3,r2,906bc <__alt_data_end+0xfffc72dc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   90780:	0001883a 	nop
}
   90784:	e037883a 	mov	sp,fp
   90788:	dfc00117 	ldw	ra,4(sp)
   9078c:	df000017 	ldw	fp,0(sp)
   90790:	dec00204 	addi	sp,sp,8
   90794:	f800283a 	ret

00090798 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   90798:	deffff04 	addi	sp,sp,-4
   9079c:	df000015 	stw	fp,0(sp)
   907a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   907a4:	000170fa 	wrctl	ienable,zero
}
   907a8:	e037883a 	mov	sp,fp
   907ac:	df000017 	ldw	fp,0(sp)
   907b0:	dec00104 	addi	sp,sp,4
   907b4:	f800283a 	ret

000907b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   907b8:	defffb04 	addi	sp,sp,-20
   907bc:	dfc00415 	stw	ra,16(sp)
   907c0:	df000315 	stw	fp,12(sp)
   907c4:	df000304 	addi	fp,sp,12
   907c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   907cc:	00800274 	movhi	r2,9
   907d0:	108b4c04 	addi	r2,r2,11568
   907d4:	10800017 	ldw	r2,0(r2)
   907d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   907dc:	00003106 	br	908a4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   907e0:	e0bffd17 	ldw	r2,-12(fp)
   907e4:	10800217 	ldw	r2,8(r2)
   907e8:	1009883a 	mov	r4,r2
   907ec:	00812200 	call	81220 <strlen>
   907f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   907f4:	e0bffd17 	ldw	r2,-12(fp)
   907f8:	10c00217 	ldw	r3,8(r2)
   907fc:	e0bffe17 	ldw	r2,-8(fp)
   90800:	10bfffc4 	addi	r2,r2,-1
   90804:	1885883a 	add	r2,r3,r2
   90808:	10800003 	ldbu	r2,0(r2)
   9080c:	10803fcc 	andi	r2,r2,255
   90810:	1080201c 	xori	r2,r2,128
   90814:	10bfe004 	addi	r2,r2,-128
   90818:	10800bd8 	cmpnei	r2,r2,47
   9081c:	1000031e 	bne	r2,zero,9082c <alt_find_file+0x74>
    {
      len -= 1;
   90820:	e0bffe17 	ldw	r2,-8(fp)
   90824:	10bfffc4 	addi	r2,r2,-1
   90828:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9082c:	e0bffe17 	ldw	r2,-8(fp)
   90830:	e0ffff17 	ldw	r3,-4(fp)
   90834:	1885883a 	add	r2,r3,r2
   90838:	10800003 	ldbu	r2,0(r2)
   9083c:	10803fcc 	andi	r2,r2,255
   90840:	1080201c 	xori	r2,r2,128
   90844:	10bfe004 	addi	r2,r2,-128
   90848:	10800be0 	cmpeqi	r2,r2,47
   9084c:	1000081e 	bne	r2,zero,90870 <alt_find_file+0xb8>
   90850:	e0bffe17 	ldw	r2,-8(fp)
   90854:	e0ffff17 	ldw	r3,-4(fp)
   90858:	1885883a 	add	r2,r3,r2
   9085c:	10800003 	ldbu	r2,0(r2)
   90860:	10803fcc 	andi	r2,r2,255
   90864:	1080201c 	xori	r2,r2,128
   90868:	10bfe004 	addi	r2,r2,-128
   9086c:	10000a1e 	bne	r2,zero,90898 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   90870:	e0bffd17 	ldw	r2,-12(fp)
   90874:	10c00217 	ldw	r3,8(r2)
   90878:	e0bffe17 	ldw	r2,-8(fp)
   9087c:	1809883a 	mov	r4,r3
   90880:	e17fff17 	ldw	r5,-4(fp)
   90884:	100d883a 	mov	r6,r2
   90888:	0090a880 	call	90a88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9088c:	1000021e 	bne	r2,zero,90898 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   90890:	e0bffd17 	ldw	r2,-12(fp)
   90894:	00000806 	br	908b8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   90898:	e0bffd17 	ldw	r2,-12(fp)
   9089c:	10800017 	ldw	r2,0(r2)
   908a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   908a4:	e0fffd17 	ldw	r3,-12(fp)
   908a8:	00800274 	movhi	r2,9
   908ac:	108b4c04 	addi	r2,r2,11568
   908b0:	18bfcb1e 	bne	r3,r2,907e0 <__alt_data_end+0xfffc7400>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   908b4:	0005883a 	mov	r2,zero
}
   908b8:	e037883a 	mov	sp,fp
   908bc:	dfc00117 	ldw	ra,4(sp)
   908c0:	df000017 	ldw	fp,0(sp)
   908c4:	dec00204 	addi	sp,sp,8
   908c8:	f800283a 	ret

000908cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   908cc:	defffa04 	addi	sp,sp,-24
   908d0:	dfc00515 	stw	ra,20(sp)
   908d4:	df000415 	stw	fp,16(sp)
   908d8:	dc000315 	stw	r16,12(sp)
   908dc:	df000404 	addi	fp,sp,16
   908e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   908e4:	00bffa04 	movi	r2,-24
   908e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   908ec:	e03ffc15 	stw	zero,-16(fp)
   908f0:	00002106 	br	90978 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   908f4:	04000274 	movhi	r16,9
   908f8:	8406b404 	addi	r16,r16,6864
   908fc:	e0bffc17 	ldw	r2,-16(fp)
   90900:	1009883a 	mov	r4,r2
   90904:	01400304 	movi	r5,12
   90908:	008b0d80 	call	8b0d8 <__mulsi3>
   9090c:	8085883a 	add	r2,r16,r2
   90910:	10800017 	ldw	r2,0(r2)
   90914:	1000151e 	bne	r2,zero,9096c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   90918:	04000274 	movhi	r16,9
   9091c:	8406b404 	addi	r16,r16,6864
   90920:	e0bffc17 	ldw	r2,-16(fp)
   90924:	1009883a 	mov	r4,r2
   90928:	01400304 	movi	r5,12
   9092c:	008b0d80 	call	8b0d8 <__mulsi3>
   90930:	8085883a 	add	r2,r16,r2
   90934:	e0fffe17 	ldw	r3,-8(fp)
   90938:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   9093c:	00800274 	movhi	r2,9
   90940:	108b5004 	addi	r2,r2,11584
   90944:	10c00017 	ldw	r3,0(r2)
   90948:	e0bffc17 	ldw	r2,-16(fp)
   9094c:	1880040e 	bge	r3,r2,90960 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   90950:	00800274 	movhi	r2,9
   90954:	108b5004 	addi	r2,r2,11584
   90958:	e0fffc17 	ldw	r3,-16(fp)
   9095c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   90960:	e0bffc17 	ldw	r2,-16(fp)
   90964:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   90968:	00000606 	br	90984 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9096c:	e0bffc17 	ldw	r2,-16(fp)
   90970:	10800044 	addi	r2,r2,1
   90974:	e0bffc15 	stw	r2,-16(fp)
   90978:	e0bffc17 	ldw	r2,-16(fp)
   9097c:	10800810 	cmplti	r2,r2,32
   90980:	103fdc1e 	bne	r2,zero,908f4 <__alt_data_end+0xfffc7514>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   90984:	e0bffd17 	ldw	r2,-12(fp)
}
   90988:	e6ffff04 	addi	sp,fp,-4
   9098c:	dfc00217 	ldw	ra,8(sp)
   90990:	df000117 	ldw	fp,4(sp)
   90994:	dc000017 	ldw	r16,0(sp)
   90998:	dec00304 	addi	sp,sp,12
   9099c:	f800283a 	ret

000909a0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   909a0:	defffe04 	addi	sp,sp,-8
   909a4:	df000115 	stw	fp,4(sp)
   909a8:	df000104 	addi	fp,sp,4
   909ac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   909b0:	e0bfff17 	ldw	r2,-4(fp)
   909b4:	10bffe84 	addi	r2,r2,-6
   909b8:	10c00428 	cmpgeui	r3,r2,16
   909bc:	18001a1e 	bne	r3,zero,90a28 <alt_exception_cause_generated_bad_addr+0x88>
   909c0:	100690ba 	slli	r3,r2,2
   909c4:	00800274 	movhi	r2,9
   909c8:	10827604 	addi	r2,r2,2520
   909cc:	1885883a 	add	r2,r3,r2
   909d0:	10800017 	ldw	r2,0(r2)
   909d4:	1000683a 	jmp	r2
   909d8:	00090a18 	cmpnei	zero,zero,9256
   909dc:	00090a18 	cmpnei	zero,zero,9256
   909e0:	00090a28 	cmpgeui	zero,zero,9256
   909e4:	00090a28 	cmpgeui	zero,zero,9256
   909e8:	00090a28 	cmpgeui	zero,zero,9256
   909ec:	00090a18 	cmpnei	zero,zero,9256
   909f0:	00090a20 	cmpeqi	zero,zero,9256
   909f4:	00090a28 	cmpgeui	zero,zero,9256
   909f8:	00090a18 	cmpnei	zero,zero,9256
   909fc:	00090a18 	cmpnei	zero,zero,9256
   90a00:	00090a28 	cmpgeui	zero,zero,9256
   90a04:	00090a18 	cmpnei	zero,zero,9256
   90a08:	00090a20 	cmpeqi	zero,zero,9256
   90a0c:	00090a28 	cmpgeui	zero,zero,9256
   90a10:	00090a28 	cmpgeui	zero,zero,9256
   90a14:	00090a18 	cmpnei	zero,zero,9256
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   90a18:	00800044 	movi	r2,1
   90a1c:	00000306 	br	90a2c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   90a20:	0005883a 	mov	r2,zero
   90a24:	00000106 	br	90a2c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   90a28:	0005883a 	mov	r2,zero
  }
}
   90a2c:	e037883a 	mov	sp,fp
   90a30:	df000017 	ldw	fp,0(sp)
   90a34:	dec00104 	addi	sp,sp,4
   90a38:	f800283a 	ret

00090a3c <atexit>:
   90a3c:	200b883a 	mov	r5,r4
   90a40:	000d883a 	mov	r6,zero
   90a44:	0009883a 	mov	r4,zero
   90a48:	000f883a 	mov	r7,zero
   90a4c:	0090b041 	jmpi	90b04 <__register_exitproc>

00090a50 <exit>:
   90a50:	defffe04 	addi	sp,sp,-8
   90a54:	000b883a 	mov	r5,zero
   90a58:	dc000015 	stw	r16,0(sp)
   90a5c:	dfc00115 	stw	ra,4(sp)
   90a60:	2021883a 	mov	r16,r4
   90a64:	0090c180 	call	90c18 <__call_exitprocs>
   90a68:	00800274 	movhi	r2,9
   90a6c:	108b4604 	addi	r2,r2,11544
   90a70:	11000017 	ldw	r4,0(r2)
   90a74:	20800f17 	ldw	r2,60(r4)
   90a78:	10000126 	beq	r2,zero,90a80 <exit+0x30>
   90a7c:	103ee83a 	callr	r2
   90a80:	8009883a 	mov	r4,r16
   90a84:	0090dac0 	call	90dac <_exit>

00090a88 <memcmp>:
   90a88:	01c000c4 	movi	r7,3
   90a8c:	3980192e 	bgeu	r7,r6,90af4 <memcmp+0x6c>
   90a90:	2144b03a 	or	r2,r4,r5
   90a94:	11c4703a 	and	r2,r2,r7
   90a98:	10000f26 	beq	r2,zero,90ad8 <memcmp+0x50>
   90a9c:	20800003 	ldbu	r2,0(r4)
   90aa0:	28c00003 	ldbu	r3,0(r5)
   90aa4:	10c0151e 	bne	r2,r3,90afc <memcmp+0x74>
   90aa8:	31bfff84 	addi	r6,r6,-2
   90aac:	01ffffc4 	movi	r7,-1
   90ab0:	00000406 	br	90ac4 <memcmp+0x3c>
   90ab4:	20800003 	ldbu	r2,0(r4)
   90ab8:	28c00003 	ldbu	r3,0(r5)
   90abc:	31bfffc4 	addi	r6,r6,-1
   90ac0:	10c00e1e 	bne	r2,r3,90afc <memcmp+0x74>
   90ac4:	21000044 	addi	r4,r4,1
   90ac8:	29400044 	addi	r5,r5,1
   90acc:	31fff91e 	bne	r6,r7,90ab4 <__alt_data_end+0xfffc76d4>
   90ad0:	0005883a 	mov	r2,zero
   90ad4:	f800283a 	ret
   90ad8:	20c00017 	ldw	r3,0(r4)
   90adc:	28800017 	ldw	r2,0(r5)
   90ae0:	1880041e 	bne	r3,r2,90af4 <memcmp+0x6c>
   90ae4:	31bfff04 	addi	r6,r6,-4
   90ae8:	21000104 	addi	r4,r4,4
   90aec:	29400104 	addi	r5,r5,4
   90af0:	39bff936 	bltu	r7,r6,90ad8 <__alt_data_end+0xfffc76f8>
   90af4:	303fe91e 	bne	r6,zero,90a9c <__alt_data_end+0xfffc76bc>
   90af8:	003ff506 	br	90ad0 <__alt_data_end+0xfffc76f0>
   90afc:	10c5c83a 	sub	r2,r2,r3
   90b00:	f800283a 	ret

00090b04 <__register_exitproc>:
   90b04:	00800274 	movhi	r2,9
   90b08:	defffa04 	addi	sp,sp,-24
   90b0c:	108b4604 	addi	r2,r2,11544
   90b10:	dc000315 	stw	r16,12(sp)
   90b14:	14000017 	ldw	r16,0(r2)
   90b18:	dc400415 	stw	r17,16(sp)
   90b1c:	dfc00515 	stw	ra,20(sp)
   90b20:	80805217 	ldw	r2,328(r16)
   90b24:	2023883a 	mov	r17,r4
   90b28:	10003626 	beq	r2,zero,90c04 <__register_exitproc+0x100>
   90b2c:	10c00117 	ldw	r3,4(r2)
   90b30:	010007c4 	movi	r4,31
   90b34:	20c00e16 	blt	r4,r3,90b70 <__register_exitproc+0x6c>
   90b38:	1a400044 	addi	r9,r3,1
   90b3c:	8800211e 	bne	r17,zero,90bc4 <__register_exitproc+0xc0>
   90b40:	18c00084 	addi	r3,r3,2
   90b44:	18c7883a 	add	r3,r3,r3
   90b48:	18c7883a 	add	r3,r3,r3
   90b4c:	12400115 	stw	r9,4(r2)
   90b50:	10c7883a 	add	r3,r2,r3
   90b54:	19400015 	stw	r5,0(r3)
   90b58:	0005883a 	mov	r2,zero
   90b5c:	dfc00517 	ldw	ra,20(sp)
   90b60:	dc400417 	ldw	r17,16(sp)
   90b64:	dc000317 	ldw	r16,12(sp)
   90b68:	dec00604 	addi	sp,sp,24
   90b6c:	f800283a 	ret
   90b70:	00800034 	movhi	r2,0
   90b74:	10800004 	addi	r2,r2,0
   90b78:	10002526 	beq	r2,zero,90c10 <__register_exitproc+0x10c>
   90b7c:	01006404 	movi	r4,400
   90b80:	d9400015 	stw	r5,0(sp)
   90b84:	d9800115 	stw	r6,4(sp)
   90b88:	d9c00215 	stw	r7,8(sp)
   90b8c:	00000000 	call	0 <__reset-0x80000>
   90b90:	d9400017 	ldw	r5,0(sp)
   90b94:	d9800117 	ldw	r6,4(sp)
   90b98:	d9c00217 	ldw	r7,8(sp)
   90b9c:	10001c26 	beq	r2,zero,90c10 <__register_exitproc+0x10c>
   90ba0:	80c05217 	ldw	r3,328(r16)
   90ba4:	10000115 	stw	zero,4(r2)
   90ba8:	02400044 	movi	r9,1
   90bac:	10c00015 	stw	r3,0(r2)
   90bb0:	80805215 	stw	r2,328(r16)
   90bb4:	10006215 	stw	zero,392(r2)
   90bb8:	10006315 	stw	zero,396(r2)
   90bbc:	0007883a 	mov	r3,zero
   90bc0:	883fdf26 	beq	r17,zero,90b40 <__alt_data_end+0xfffc7760>
   90bc4:	18d1883a 	add	r8,r3,r3
   90bc8:	4211883a 	add	r8,r8,r8
   90bcc:	1211883a 	add	r8,r2,r8
   90bd0:	41802215 	stw	r6,136(r8)
   90bd4:	01000044 	movi	r4,1
   90bd8:	11806217 	ldw	r6,392(r2)
   90bdc:	20c8983a 	sll	r4,r4,r3
   90be0:	310cb03a 	or	r6,r6,r4
   90be4:	11806215 	stw	r6,392(r2)
   90be8:	41c04215 	stw	r7,264(r8)
   90bec:	01800084 	movi	r6,2
   90bf0:	89bfd31e 	bne	r17,r6,90b40 <__alt_data_end+0xfffc7760>
   90bf4:	11806317 	ldw	r6,396(r2)
   90bf8:	3108b03a 	or	r4,r6,r4
   90bfc:	11006315 	stw	r4,396(r2)
   90c00:	003fcf06 	br	90b40 <__alt_data_end+0xfffc7760>
   90c04:	80805304 	addi	r2,r16,332
   90c08:	80805215 	stw	r2,328(r16)
   90c0c:	003fc706 	br	90b2c <__alt_data_end+0xfffc774c>
   90c10:	00bfffc4 	movi	r2,-1
   90c14:	003fd106 	br	90b5c <__alt_data_end+0xfffc777c>

00090c18 <__call_exitprocs>:
   90c18:	00800274 	movhi	r2,9
   90c1c:	108b4604 	addi	r2,r2,11544
   90c20:	10800017 	ldw	r2,0(r2)
   90c24:	defff404 	addi	sp,sp,-48
   90c28:	dd800815 	stw	r22,32(sp)
   90c2c:	d8800015 	stw	r2,0(sp)
   90c30:	10805204 	addi	r2,r2,328
   90c34:	dd000615 	stw	r20,24(sp)
   90c38:	dc800415 	stw	r18,16(sp)
   90c3c:	dfc00b15 	stw	ra,44(sp)
   90c40:	df000a15 	stw	fp,40(sp)
   90c44:	ddc00915 	stw	r23,36(sp)
   90c48:	dd400715 	stw	r21,28(sp)
   90c4c:	dcc00515 	stw	r19,20(sp)
   90c50:	dc400315 	stw	r17,12(sp)
   90c54:	dc000215 	stw	r16,8(sp)
   90c58:	2025883a 	mov	r18,r4
   90c5c:	2829883a 	mov	r20,r5
   90c60:	d8800115 	stw	r2,4(sp)
   90c64:	05bfffc4 	movi	r22,-1
   90c68:	d8800017 	ldw	r2,0(sp)
   90c6c:	14c05217 	ldw	r19,328(r2)
   90c70:	98001d26 	beq	r19,zero,90ce8 <__call_exitprocs+0xd0>
   90c74:	dd400117 	ldw	r21,4(sp)
   90c78:	98800117 	ldw	r2,4(r19)
   90c7c:	173fffc4 	addi	fp,r2,-1
   90c80:	e0000d16 	blt	fp,zero,90cb8 <__call_exitprocs+0xa0>
   90c84:	14000044 	addi	r16,r2,1
   90c88:	8421883a 	add	r16,r16,r16
   90c8c:	8421883a 	add	r16,r16,r16
   90c90:	84402004 	addi	r17,r16,128
   90c94:	9c63883a 	add	r17,r19,r17
   90c98:	9c21883a 	add	r16,r19,r16
   90c9c:	a0001e26 	beq	r20,zero,90d18 <__call_exitprocs+0x100>
   90ca0:	80804017 	ldw	r2,256(r16)
   90ca4:	15001c26 	beq	r2,r20,90d18 <__call_exitprocs+0x100>
   90ca8:	e73fffc4 	addi	fp,fp,-1
   90cac:	843fff04 	addi	r16,r16,-4
   90cb0:	8c7fff04 	addi	r17,r17,-4
   90cb4:	e5bff91e 	bne	fp,r22,90c9c <__alt_data_end+0xfffc78bc>
   90cb8:	00800034 	movhi	r2,0
   90cbc:	10800004 	addi	r2,r2,0
   90cc0:	10000926 	beq	r2,zero,90ce8 <__call_exitprocs+0xd0>
   90cc4:	98800117 	ldw	r2,4(r19)
   90cc8:	1000311e 	bne	r2,zero,90d90 <__call_exitprocs+0x178>
   90ccc:	98800017 	ldw	r2,0(r19)
   90cd0:	10003426 	beq	r2,zero,90da4 <__call_exitprocs+0x18c>
   90cd4:	9809883a 	mov	r4,r19
   90cd8:	a8800015 	stw	r2,0(r21)
   90cdc:	00000000 	call	0 <__reset-0x80000>
   90ce0:	acc00017 	ldw	r19,0(r21)
   90ce4:	983fe41e 	bne	r19,zero,90c78 <__alt_data_end+0xfffc7898>
   90ce8:	dfc00b17 	ldw	ra,44(sp)
   90cec:	df000a17 	ldw	fp,40(sp)
   90cf0:	ddc00917 	ldw	r23,36(sp)
   90cf4:	dd800817 	ldw	r22,32(sp)
   90cf8:	dd400717 	ldw	r21,28(sp)
   90cfc:	dd000617 	ldw	r20,24(sp)
   90d00:	dcc00517 	ldw	r19,20(sp)
   90d04:	dc800417 	ldw	r18,16(sp)
   90d08:	dc400317 	ldw	r17,12(sp)
   90d0c:	dc000217 	ldw	r16,8(sp)
   90d10:	dec00c04 	addi	sp,sp,48
   90d14:	f800283a 	ret
   90d18:	98800117 	ldw	r2,4(r19)
   90d1c:	80c00017 	ldw	r3,0(r16)
   90d20:	10bfffc4 	addi	r2,r2,-1
   90d24:	17001526 	beq	r2,fp,90d7c <__call_exitprocs+0x164>
   90d28:	80000015 	stw	zero,0(r16)
   90d2c:	183fde26 	beq	r3,zero,90ca8 <__alt_data_end+0xfffc78c8>
   90d30:	00800044 	movi	r2,1
   90d34:	1708983a 	sll	r4,r2,fp
   90d38:	98806217 	ldw	r2,392(r19)
   90d3c:	9dc00117 	ldw	r23,4(r19)
   90d40:	2084703a 	and	r2,r4,r2
   90d44:	1000061e 	bne	r2,zero,90d60 <__call_exitprocs+0x148>
   90d48:	183ee83a 	callr	r3
   90d4c:	98800117 	ldw	r2,4(r19)
   90d50:	15ffc51e 	bne	r2,r23,90c68 <__alt_data_end+0xfffc7888>
   90d54:	a8800017 	ldw	r2,0(r21)
   90d58:	14ffd326 	beq	r2,r19,90ca8 <__alt_data_end+0xfffc78c8>
   90d5c:	003fc206 	br	90c68 <__alt_data_end+0xfffc7888>
   90d60:	98806317 	ldw	r2,396(r19)
   90d64:	2084703a 	and	r2,r4,r2
   90d68:	1000061e 	bne	r2,zero,90d84 <__call_exitprocs+0x16c>
   90d6c:	89400017 	ldw	r5,0(r17)
   90d70:	9009883a 	mov	r4,r18
   90d74:	183ee83a 	callr	r3
   90d78:	003ff406 	br	90d4c <__alt_data_end+0xfffc796c>
   90d7c:	9f000115 	stw	fp,4(r19)
   90d80:	003fea06 	br	90d2c <__alt_data_end+0xfffc794c>
   90d84:	89000017 	ldw	r4,0(r17)
   90d88:	183ee83a 	callr	r3
   90d8c:	003fef06 	br	90d4c <__alt_data_end+0xfffc796c>
   90d90:	98800017 	ldw	r2,0(r19)
   90d94:	982b883a 	mov	r21,r19
   90d98:	1027883a 	mov	r19,r2
   90d9c:	983fb61e 	bne	r19,zero,90c78 <__alt_data_end+0xfffc7898>
   90da0:	003fd106 	br	90ce8 <__alt_data_end+0xfffc7908>
   90da4:	0005883a 	mov	r2,zero
   90da8:	003ffa06 	br	90d94 <__alt_data_end+0xfffc79b4>

00090dac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   90dac:	defffd04 	addi	sp,sp,-12
   90db0:	df000215 	stw	fp,8(sp)
   90db4:	df000204 	addi	fp,sp,8
   90db8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   90dbc:	0001883a 	nop
   90dc0:	e0bfff17 	ldw	r2,-4(fp)
   90dc4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   90dc8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   90dcc:	10000226 	beq	r2,zero,90dd8 <_exit+0x2c>
    ALT_SIM_FAIL();
   90dd0:	002af070 	cmpltui	zero,zero,43969
   90dd4:	00000106 	br	90ddc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   90dd8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   90ddc:	003fff06 	br	90ddc <__alt_data_end+0xfffc79fc>
